// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: workflow.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace AF.ECT.Shared {
  /// <summary>
  /// WorkflowService provides gRPC and REST endpoints for managing workflows, users, and related operations in the ALOD system.
  /// </summary>
  public static partial class WorkflowService
  {
    static readonly string __ServiceName = "workflow.WorkflowService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetReinvestigationRequestsRequest> __Marshaller_workflow_GetReinvestigationRequestsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetReinvestigationRequestsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetReinvestigationRequestsResponse> __Marshaller_workflow_GetReinvestigationRequestsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetReinvestigationRequestsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.ReinvestigationRequestItem> __Marshaller_workflow_ReinvestigationRequestItem = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.ReinvestigationRequestItem.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetMailingListForLODRequest> __Marshaller_workflow_GetMailingListForLODRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetMailingListForLODRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetMailingListForLODResponse> __Marshaller_workflow_GetMailingListForLODResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetMailingListForLODResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.MailingListItem> __Marshaller_workflow_MailingListItem = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.MailingListItem.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetManagedUsersRequest> __Marshaller_workflow_GetManagedUsersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetManagedUsersRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetManagedUsersResponse> __Marshaller_workflow_GetManagedUsersResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetManagedUsersResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.ManagedUserItem> __Marshaller_workflow_ManagedUserItem = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.ManagedUserItem.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetMembersUserIdRequest> __Marshaller_workflow_GetMembersUserIdRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetMembersUserIdRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetMembersUserIdResponse> __Marshaller_workflow_GetMembersUserIdResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetMembersUserIdResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetUserAltTitleRequest> __Marshaller_workflow_GetUserAltTitleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetUserAltTitleRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetUserAltTitleResponse> __Marshaller_workflow_GetUserAltTitleResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetUserAltTitleResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.UserAltTitleItem> __Marshaller_workflow_UserAltTitleItem = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.UserAltTitleItem.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetUserAltTitleByGroupCompoRequest> __Marshaller_workflow_GetUserAltTitleByGroupCompoRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetUserAltTitleByGroupCompoRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetUserAltTitleByGroupCompoResponse> __Marshaller_workflow_GetUserAltTitleByGroupCompoResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetUserAltTitleByGroupCompoResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.UserAltTitleByGroupCompoItem> __Marshaller_workflow_UserAltTitleByGroupCompoItem = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.UserAltTitleByGroupCompoItem.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetUserNameRequest> __Marshaller_workflow_GetUserNameRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetUserNameRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetUserNameResponse> __Marshaller_workflow_GetUserNameResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetUserNameResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.UserNameItem> __Marshaller_workflow_UserNameItem = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.UserNameItem.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetUsersAltTitleByGroupRequest> __Marshaller_workflow_GetUsersAltTitleByGroupRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetUsersAltTitleByGroupRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetUsersAltTitleByGroupResponse> __Marshaller_workflow_GetUsersAltTitleByGroupResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetUsersAltTitleByGroupResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.UsersAltTitleByGroupItem> __Marshaller_workflow_UsersAltTitleByGroupItem = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.UsersAltTitleByGroupItem.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.EmptyRequest> __Marshaller_workflow_EmptyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.EmptyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetUsersOnlineResponse> __Marshaller_workflow_GetUsersOnlineResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetUsersOnlineResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.UserOnlineItem> __Marshaller_workflow_UserOnlineItem = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.UserOnlineItem.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetWhoisRequest> __Marshaller_workflow_GetWhoisRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetWhoisRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.WhoisItem> __Marshaller_workflow_WhoisItem = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.WhoisItem.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.HasHQTechAccountRequest> __Marshaller_workflow_HasHQTechAccountRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.HasHQTechAccountRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.HQTechAccountItem> __Marshaller_workflow_HQTechAccountItem = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.HQTechAccountItem.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.IsFinalStatusCodeRequest> __Marshaller_workflow_IsFinalStatusCodeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.IsFinalStatusCodeRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.FinalStatusCodeItem> __Marshaller_workflow_FinalStatusCodeItem = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.FinalStatusCodeItem.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.UpdateLoginRequest> __Marshaller_workflow_UpdateLoginRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.UpdateLoginRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.LoginUpdateItem> __Marshaller_workflow_LoginUpdateItem = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.LoginUpdateItem.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetWhoisResponse> __Marshaller_workflow_GetWhoisResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetWhoisResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.HasHQTechAccountResponse> __Marshaller_workflow_HasHQTechAccountResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.HasHQTechAccountResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.IsFinalStatusCodeResponse> __Marshaller_workflow_IsFinalStatusCodeResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.IsFinalStatusCodeResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.LogoutRequest> __Marshaller_workflow_LogoutRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.LogoutRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.LogoutResponse> __Marshaller_workflow_LogoutResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.LogoutResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.RegisterUserRequest> __Marshaller_workflow_RegisterUserRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.RegisterUserRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.RegisterUserResponse> __Marshaller_workflow_RegisterUserResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.RegisterUserResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.RegisterUserRoleRequest> __Marshaller_workflow_RegisterUserRoleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.RegisterUserRoleRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.RegisterUserRoleResponse> __Marshaller_workflow_RegisterUserRoleResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.RegisterUserRoleResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.SearchMemberDataRequest> __Marshaller_workflow_SearchMemberDataRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.SearchMemberDataRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.SearchMemberDataResponse> __Marshaller_workflow_SearchMemberDataResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.SearchMemberDataResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.MemberDataItem> __Marshaller_workflow_MemberDataItem = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.MemberDataItem.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.SearchMemberDataTestRequest> __Marshaller_workflow_SearchMemberDataTestRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.SearchMemberDataTestRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.SearchMemberDataTestResponse> __Marshaller_workflow_SearchMemberDataTestResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.SearchMemberDataTestResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.MemberDataTestItem> __Marshaller_workflow_MemberDataTestItem = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.MemberDataTestItem.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.UpdateAccountStatusRequest> __Marshaller_workflow_UpdateAccountStatusRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.UpdateAccountStatusRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.UpdateAccountStatusResponse> __Marshaller_workflow_UpdateAccountStatusResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.UpdateAccountStatusResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.UpdateLoginResponse> __Marshaller_workflow_UpdateLoginResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.UpdateLoginResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.UpdateManagedSettingsRequest> __Marshaller_workflow_UpdateManagedSettingsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.UpdateManagedSettingsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.UpdateManagedSettingsResponse> __Marshaller_workflow_UpdateManagedSettingsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.UpdateManagedSettingsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.UpdateUserAltTitleRequest> __Marshaller_workflow_UpdateUserAltTitleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.UpdateUserAltTitleRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.UpdateUserAltTitleResponse> __Marshaller_workflow_UpdateUserAltTitleResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.UpdateUserAltTitleResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.AddSignatureRequest> __Marshaller_workflow_AddSignatureRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.AddSignatureRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.AddSignatureResponse> __Marshaller_workflow_AddSignatureResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.AddSignatureResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.CopyActionsRequest> __Marshaller_workflow_CopyActionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.CopyActionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.CopyActionsResponse> __Marshaller_workflow_CopyActionsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.CopyActionsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.CopyRulesRequest> __Marshaller_workflow_CopyRulesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.CopyRulesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.CopyRulesResponse> __Marshaller_workflow_CopyRulesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.CopyRulesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.CopyWorkflowRequest> __Marshaller_workflow_CopyWorkflowRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.CopyWorkflowRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.CopyWorkflowResponse> __Marshaller_workflow_CopyWorkflowResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.CopyWorkflowResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.DeleteStatusCodeRequest> __Marshaller_workflow_DeleteStatusCodeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.DeleteStatusCodeRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.DeleteStatusCodeResponse> __Marshaller_workflow_DeleteStatusCodeResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.DeleteStatusCodeResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetActionsByStepRequest> __Marshaller_workflow_GetActionsByStepRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetActionsByStepRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetActionsByStepResponse> __Marshaller_workflow_GetActionsByStepResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetActionsByStepResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetActiveCasesRequest> __Marshaller_workflow_GetActiveCasesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetActiveCasesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetActiveCasesResponse> __Marshaller_workflow_GetActiveCasesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetActiveCasesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetAllFindingByReasonOfResponse> __Marshaller_workflow_GetAllFindingByReasonOfResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetAllFindingByReasonOfResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetAllLocksResponse> __Marshaller_workflow_GetAllLocksResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetAllLocksResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetCancelReasonsRequest> __Marshaller_workflow_GetCancelReasonsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetCancelReasonsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetCancelReasonsResponse> __Marshaller_workflow_GetCancelReasonsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetCancelReasonsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetCreatableByGroupRequest> __Marshaller_workflow_GetCreatableByGroupRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetCreatableByGroupRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetCreatableByGroupResponse> __Marshaller_workflow_GetCreatableByGroupResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetCreatableByGroupResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetFindingByReasonOfByIdRequest> __Marshaller_workflow_GetFindingByReasonOfByIdRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetFindingByReasonOfByIdRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetFindingByReasonOfByIdResponse> __Marshaller_workflow_GetFindingByReasonOfByIdResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetFindingByReasonOfByIdResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetFindingsRequest> __Marshaller_workflow_GetFindingsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetFindingsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetFindingsResponse> __Marshaller_workflow_GetFindingsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetFindingsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetModuleFromWorkflowRequest> __Marshaller_workflow_GetModuleFromWorkflowRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetModuleFromWorkflowRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetModuleFromWorkflowResponse> __Marshaller_workflow_GetModuleFromWorkflowResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetModuleFromWorkflowResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetPageAccessByGroupRequest> __Marshaller_workflow_GetPageAccessByGroupRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetPageAccessByGroupRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetPageAccessByGroupResponse> __Marshaller_workflow_GetPageAccessByGroupResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetPageAccessByGroupResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetPageAccessByWorkflowViewRequest> __Marshaller_workflow_GetPageAccessByWorkflowViewRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetPageAccessByWorkflowViewRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetPageAccessByWorkflowViewResponse> __Marshaller_workflow_GetPageAccessByWorkflowViewResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetPageAccessByWorkflowViewResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetPagesByWorkflowIdRequest> __Marshaller_workflow_GetPagesByWorkflowIdRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetPagesByWorkflowIdRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetPagesByWorkflowIdResponse> __Marshaller_workflow_GetPagesByWorkflowIdResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetPagesByWorkflowIdResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetPermissionsRequest> __Marshaller_workflow_GetPermissionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetPermissionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetPermissionsResponse> __Marshaller_workflow_GetPermissionsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetPermissionsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetPermissionsByCompoRequest> __Marshaller_workflow_GetPermissionsByCompoRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetPermissionsByCompoRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetPermissionsByCompoResponse> __Marshaller_workflow_GetPermissionsByCompoResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetPermissionsByCompoResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetReturnReasonsRequest> __Marshaller_workflow_GetReturnReasonsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetReturnReasonsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetReturnReasonsResponse> __Marshaller_workflow_GetReturnReasonsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetReturnReasonsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetRwoaReasonsRequest> __Marshaller_workflow_GetRwoaReasonsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetRwoaReasonsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetRwoaReasonsResponse> __Marshaller_workflow_GetRwoaReasonsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetRwoaReasonsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetStatusCodesByCompoRequest> __Marshaller_workflow_GetStatusCodesByCompoRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetStatusCodesByCompoRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetStatusCodesByCompoResponse> __Marshaller_workflow_GetStatusCodesByCompoResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetStatusCodesByCompoResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetStatusCodesByCompoAndModuleRequest> __Marshaller_workflow_GetStatusCodesByCompoAndModuleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetStatusCodesByCompoAndModuleRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetStatusCodesByCompoAndModuleResponse> __Marshaller_workflow_GetStatusCodesByCompoAndModuleResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetStatusCodesByCompoAndModuleResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetStatusCodesBySignCodeRequest> __Marshaller_workflow_GetStatusCodesBySignCodeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetStatusCodesBySignCodeRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetStatusCodesBySignCodeResponse> __Marshaller_workflow_GetStatusCodesBySignCodeResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetStatusCodesBySignCodeResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetStatusCodesByWorkflowRequest> __Marshaller_workflow_GetStatusCodesByWorkflowRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetStatusCodesByWorkflowRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetStatusCodesByWorkflowResponse> __Marshaller_workflow_GetStatusCodesByWorkflowResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetStatusCodesByWorkflowResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetStatusCodesByWorkflowAndAccessScopeRequest> __Marshaller_workflow_GetStatusCodesByWorkflowAndAccessScopeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetStatusCodesByWorkflowAndAccessScopeRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetStatusCodesByWorkflowAndAccessScopeResponse> __Marshaller_workflow_GetStatusCodesByWorkflowAndAccessScopeResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetStatusCodesByWorkflowAndAccessScopeResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetStatusCodeScopeRequest> __Marshaller_workflow_GetStatusCodeScopeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetStatusCodeScopeRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetStatusCodeScopeResponse> __Marshaller_workflow_GetStatusCodeScopeResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetStatusCodeScopeResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetStepsByWorkflowRequest> __Marshaller_workflow_GetStepsByWorkflowRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetStepsByWorkflowRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetStepsByWorkflowResponse> __Marshaller_workflow_GetStepsByWorkflowResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetStepsByWorkflowResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetStepsByWorkflowAndStatusRequest> __Marshaller_workflow_GetStepsByWorkflowAndStatusRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetStepsByWorkflowAndStatusRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetStepsByWorkflowAndStatusResponse> __Marshaller_workflow_GetStepsByWorkflowAndStatusResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetStepsByWorkflowAndStatusResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetViewableByGroupRequest> __Marshaller_workflow_GetViewableByGroupRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetViewableByGroupRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetViewableByGroupResponse> __Marshaller_workflow_GetViewableByGroupResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetViewableByGroupResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetWorkflowByCompoRequest> __Marshaller_workflow_GetWorkflowByCompoRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetWorkflowByCompoRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetWorkflowByCompoResponse> __Marshaller_workflow_GetWorkflowByCompoResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetWorkflowByCompoResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetWorkflowFromModuleRequest> __Marshaller_workflow_GetWorkflowFromModuleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetWorkflowFromModuleRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetWorkflowFromModuleResponse> __Marshaller_workflow_GetWorkflowFromModuleResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetWorkflowFromModuleResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetWorkflowInitialStatusCodeRequest> __Marshaller_workflow_GetWorkflowInitialStatusCodeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetWorkflowInitialStatusCodeRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetWorkflowInitialStatusCodeResponse> __Marshaller_workflow_GetWorkflowInitialStatusCodeResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetWorkflowInitialStatusCodeResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetWorkflowTitleRequest> __Marshaller_workflow_GetWorkflowTitleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetWorkflowTitleRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetWorkflowTitleResponse> __Marshaller_workflow_GetWorkflowTitleResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetWorkflowTitleResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetWorkflowTitleByWorkStatusIdRequest> __Marshaller_workflow_GetWorkflowTitleByWorkStatusIdRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetWorkflowTitleByWorkStatusIdRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetWorkflowTitleByWorkStatusIdResponse> __Marshaller_workflow_GetWorkflowTitleByWorkStatusIdResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetWorkflowTitleByWorkStatusIdResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.InsertActionRequest> __Marshaller_workflow_InsertActionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.InsertActionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.InsertActionResponse> __Marshaller_workflow_InsertActionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.InsertActionResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.InsertOptionActionRequest> __Marshaller_workflow_InsertOptionActionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.InsertOptionActionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.InsertOptionActionResponse> __Marshaller_workflow_InsertOptionActionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.InsertOptionActionResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.SignatureItem> __Marshaller_workflow_SignatureItem = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.SignatureItem.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.WorkflowCopyItem> __Marshaller_workflow_WorkflowCopyItem = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.WorkflowCopyItem.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.ActionByStepItem> __Marshaller_workflow_ActionByStepItem = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.ActionByStepItem.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.ActiveCaseItem> __Marshaller_workflow_ActiveCaseItem = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.ActiveCaseItem.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.FindingByReasonOfItem> __Marshaller_workflow_FindingByReasonOfItem = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.FindingByReasonOfItem.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.LockItem> __Marshaller_workflow_LockItem = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.LockItem.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.CancelReasonItem> __Marshaller_workflow_CancelReasonItem = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.CancelReasonItem.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.CreatableByGroupItem> __Marshaller_workflow_CreatableByGroupItem = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.CreatableByGroupItem.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.FindingByReasonOfByIdItem> __Marshaller_workflow_FindingByReasonOfByIdItem = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.FindingByReasonOfByIdItem.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.FindingItem> __Marshaller_workflow_FindingItem = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.FindingItem.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.ModuleFromWorkflowItem> __Marshaller_workflow_ModuleFromWorkflowItem = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.ModuleFromWorkflowItem.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.PageAccessByGroupItem> __Marshaller_workflow_PageAccessByGroupItem = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.PageAccessByGroupItem.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.PageAccessByWorkflowViewItem> __Marshaller_workflow_PageAccessByWorkflowViewItem = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.PageAccessByWorkflowViewItem.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.PageByWorkflowItem> __Marshaller_workflow_PageByWorkflowItem = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.PageByWorkflowItem.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.PermissionItem> __Marshaller_workflow_PermissionItem = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.PermissionItem.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.PermissionByCompoItem> __Marshaller_workflow_PermissionByCompoItem = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.PermissionByCompoItem.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.ReturnReasonItem> __Marshaller_workflow_ReturnReasonItem = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.ReturnReasonItem.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.RwoaReasonItem> __Marshaller_workflow_RwoaReasonItem = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.RwoaReasonItem.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.StatusCodeByCompoItem> __Marshaller_workflow_StatusCodeByCompoItem = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.StatusCodeByCompoItem.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.StatusCodeByCompoAndModuleItem> __Marshaller_workflow_StatusCodeByCompoAndModuleItem = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.StatusCodeByCompoAndModuleItem.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.StatusCodeBySignCodeItem> __Marshaller_workflow_StatusCodeBySignCodeItem = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.StatusCodeBySignCodeItem.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.StatusCodeByWorkflowItem> __Marshaller_workflow_StatusCodeByWorkflowItem = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.StatusCodeByWorkflowItem.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.StatusCodeByWorkflowAndAccessScopeItem> __Marshaller_workflow_StatusCodeByWorkflowAndAccessScopeItem = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.StatusCodeByWorkflowAndAccessScopeItem.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.StatusCodeScopeItem> __Marshaller_workflow_StatusCodeScopeItem = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.StatusCodeScopeItem.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.StepByWorkflowItem> __Marshaller_workflow_StepByWorkflowItem = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.StepByWorkflowItem.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.StepByWorkflowAndStatusItem> __Marshaller_workflow_StepByWorkflowAndStatusItem = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.StepByWorkflowAndStatusItem.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.ViewableByGroupItem> __Marshaller_workflow_ViewableByGroupItem = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.ViewableByGroupItem.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.WorkflowByCompoItem> __Marshaller_workflow_WorkflowByCompoItem = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.WorkflowByCompoItem.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.WorkflowFromModuleItem> __Marshaller_workflow_WorkflowFromModuleItem = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.WorkflowFromModuleItem.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.WorkflowInitialStatusCodeItem> __Marshaller_workflow_WorkflowInitialStatusCodeItem = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.WorkflowInitialStatusCodeItem.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.WorkflowTitleItem> __Marshaller_workflow_WorkflowTitleItem = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.WorkflowTitleItem.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.WorkflowTitleByWorkStatusIdItem> __Marshaller_workflow_WorkflowTitleByWorkStatusIdItem = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.WorkflowTitleByWorkStatusIdItem.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.InsertActionItem> __Marshaller_workflow_InsertActionItem = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.InsertActionItem.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.InsertOptionActionItem> __Marshaller_workflow_InsertOptionActionItem = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.InsertOptionActionItem.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.DeleteLogByIdRequest> __Marshaller_workflow_DeleteLogByIdRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.DeleteLogByIdRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.DeleteLogByIdResponse> __Marshaller_workflow_DeleteLogByIdResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.DeleteLogByIdResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.FindProcessLastExecutionDateRequest> __Marshaller_workflow_FindProcessLastExecutionDateRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.FindProcessLastExecutionDateRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.FindProcessLastExecutionDateResponse> __Marshaller_workflow_FindProcessLastExecutionDateResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.FindProcessLastExecutionDateResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.ProcessLastExecutionDateItem> __Marshaller_workflow_ProcessLastExecutionDateItem = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.ProcessLastExecutionDateItem.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetAllLogsResponse> __Marshaller_workflow_GetAllLogsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetAllLogsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.LogItem> __Marshaller_workflow_LogItem = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.LogItem.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.InsertLogRequest> __Marshaller_workflow_InsertLogRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.InsertLogRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.InsertLogResponse> __Marshaller_workflow_InsertLogResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.InsertLogResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.IsProcessActiveRequest> __Marshaller_workflow_IsProcessActiveRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.IsProcessActiveRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.IsProcessActiveResponse> __Marshaller_workflow_IsProcessActiveResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.IsProcessActiveResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.ProcessActiveItem> __Marshaller_workflow_ProcessActiveItem = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.ProcessActiveItem.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetWorkflowByIdRequest> __Marshaller_workflow_GetWorkflowByIdRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetWorkflowByIdRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetWorkflowByIdResponse> __Marshaller_workflow_GetWorkflowByIdResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetWorkflowByIdResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.WorkflowByIdItem> __Marshaller_workflow_WorkflowByIdItem = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.WorkflowByIdItem.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetWorkflowsByRefIdRequest> __Marshaller_workflow_GetWorkflowsByRefIdRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetWorkflowsByRefIdRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetWorkflowsByRefIdResponse> __Marshaller_workflow_GetWorkflowsByRefIdResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetWorkflowsByRefIdResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.WorkflowByRefIdItem> __Marshaller_workflow_WorkflowByRefIdItem = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.WorkflowByRefIdItem.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetWorkflowsByRefIdAndTypeRequest> __Marshaller_workflow_GetWorkflowsByRefIdAndTypeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetWorkflowsByRefIdAndTypeRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetWorkflowsByRefIdAndTypeResponse> __Marshaller_workflow_GetWorkflowsByRefIdAndTypeResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetWorkflowsByRefIdAndTypeResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.WorkflowByRefIdAndTypeItem> __Marshaller_workflow_WorkflowByRefIdAndTypeItem = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.WorkflowByRefIdAndTypeItem.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetWorkflowTypesResponse> __Marshaller_workflow_GetWorkflowTypesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetWorkflowTypesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.WorkflowTypeItem> __Marshaller_workflow_WorkflowTypeItem = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.WorkflowTypeItem.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.InsertWorkflowRequest> __Marshaller_workflow_InsertWorkflowRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.InsertWorkflowRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.InsertWorkflowResponse> __Marshaller_workflow_InsertWorkflowResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.InsertWorkflowResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.UpdateWorkflowRequest> __Marshaller_workflow_UpdateWorkflowRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.UpdateWorkflowRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.UpdateWorkflowResponse> __Marshaller_workflow_UpdateWorkflowResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.UpdateWorkflowResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetWorkstatusByIdRequest> __Marshaller_workflow_GetWorkstatusByIdRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetWorkstatusByIdRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetWorkstatusByIdResponse> __Marshaller_workflow_GetWorkstatusByIdResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetWorkstatusByIdResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.WorkstatusByIdItem> __Marshaller_workflow_WorkstatusByIdItem = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.WorkstatusByIdItem.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetWorkstatusesByRefIdRequest> __Marshaller_workflow_GetWorkstatusesByRefIdRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetWorkstatusesByRefIdRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetWorkstatusesByRefIdResponse> __Marshaller_workflow_GetWorkstatusesByRefIdResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetWorkstatusesByRefIdResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.WorkstatusByRefIdItem> __Marshaller_workflow_WorkstatusByRefIdItem = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.WorkstatusByRefIdItem.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetWorkstatusesByRefIdAndTypeRequest> __Marshaller_workflow_GetWorkstatusesByRefIdAndTypeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetWorkstatusesByRefIdAndTypeRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetWorkstatusesByRefIdAndTypeResponse> __Marshaller_workflow_GetWorkstatusesByRefIdAndTypeResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetWorkstatusesByRefIdAndTypeResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.WorkstatusByRefIdAndTypeItem> __Marshaller_workflow_WorkstatusByRefIdAndTypeItem = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.WorkstatusByRefIdAndTypeItem.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.GetWorkstatusTypesResponse> __Marshaller_workflow_GetWorkstatusTypesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.GetWorkstatusTypesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.WorkstatusTypeItem> __Marshaller_workflow_WorkstatusTypeItem = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.WorkstatusTypeItem.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.InsertWorkstatusRequest> __Marshaller_workflow_InsertWorkstatusRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.InsertWorkstatusRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.InsertWorkstatusResponse> __Marshaller_workflow_InsertWorkstatusResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.InsertWorkstatusResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.UpdateWorkstatusRequest> __Marshaller_workflow_UpdateWorkstatusRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.UpdateWorkstatusRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AF.ECT.Shared.UpdateWorkstatusResponse> __Marshaller_workflow_UpdateWorkstatusResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AF.ECT.Shared.UpdateWorkstatusResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetReinvestigationRequestsRequest, global::AF.ECT.Shared.GetReinvestigationRequestsResponse> __Method_GetReinvestigationRequests = new grpc::Method<global::AF.ECT.Shared.GetReinvestigationRequestsRequest, global::AF.ECT.Shared.GetReinvestigationRequestsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetReinvestigationRequests",
        __Marshaller_workflow_GetReinvestigationRequestsRequest,
        __Marshaller_workflow_GetReinvestigationRequestsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetReinvestigationRequestsRequest, global::AF.ECT.Shared.ReinvestigationRequestItem> __Method_GetReinvestigationRequestsStream = new grpc::Method<global::AF.ECT.Shared.GetReinvestigationRequestsRequest, global::AF.ECT.Shared.ReinvestigationRequestItem>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetReinvestigationRequestsStream",
        __Marshaller_workflow_GetReinvestigationRequestsRequest,
        __Marshaller_workflow_ReinvestigationRequestItem);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetMailingListForLODRequest, global::AF.ECT.Shared.GetMailingListForLODResponse> __Method_GetMailingListForLOD = new grpc::Method<global::AF.ECT.Shared.GetMailingListForLODRequest, global::AF.ECT.Shared.GetMailingListForLODResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMailingListForLOD",
        __Marshaller_workflow_GetMailingListForLODRequest,
        __Marshaller_workflow_GetMailingListForLODResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetMailingListForLODRequest, global::AF.ECT.Shared.MailingListItem> __Method_GetMailingListForLODStream = new grpc::Method<global::AF.ECT.Shared.GetMailingListForLODRequest, global::AF.ECT.Shared.MailingListItem>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetMailingListForLODStream",
        __Marshaller_workflow_GetMailingListForLODRequest,
        __Marshaller_workflow_MailingListItem);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetManagedUsersRequest, global::AF.ECT.Shared.GetManagedUsersResponse> __Method_GetManagedUsers = new grpc::Method<global::AF.ECT.Shared.GetManagedUsersRequest, global::AF.ECT.Shared.GetManagedUsersResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetManagedUsers",
        __Marshaller_workflow_GetManagedUsersRequest,
        __Marshaller_workflow_GetManagedUsersResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetManagedUsersRequest, global::AF.ECT.Shared.ManagedUserItem> __Method_GetManagedUsersStream = new grpc::Method<global::AF.ECT.Shared.GetManagedUsersRequest, global::AF.ECT.Shared.ManagedUserItem>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetManagedUsersStream",
        __Marshaller_workflow_GetManagedUsersRequest,
        __Marshaller_workflow_ManagedUserItem);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetMembersUserIdRequest, global::AF.ECT.Shared.GetMembersUserIdResponse> __Method_GetMembersUserId = new grpc::Method<global::AF.ECT.Shared.GetMembersUserIdRequest, global::AF.ECT.Shared.GetMembersUserIdResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMembersUserId",
        __Marshaller_workflow_GetMembersUserIdRequest,
        __Marshaller_workflow_GetMembersUserIdResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetUserAltTitleRequest, global::AF.ECT.Shared.GetUserAltTitleResponse> __Method_GetUserAltTitle = new grpc::Method<global::AF.ECT.Shared.GetUserAltTitleRequest, global::AF.ECT.Shared.GetUserAltTitleResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetUserAltTitle",
        __Marshaller_workflow_GetUserAltTitleRequest,
        __Marshaller_workflow_GetUserAltTitleResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetUserAltTitleRequest, global::AF.ECT.Shared.UserAltTitleItem> __Method_GetUserAltTitleStream = new grpc::Method<global::AF.ECT.Shared.GetUserAltTitleRequest, global::AF.ECT.Shared.UserAltTitleItem>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetUserAltTitleStream",
        __Marshaller_workflow_GetUserAltTitleRequest,
        __Marshaller_workflow_UserAltTitleItem);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetUserAltTitleByGroupCompoRequest, global::AF.ECT.Shared.GetUserAltTitleByGroupCompoResponse> __Method_GetUserAltTitleByGroupCompo = new grpc::Method<global::AF.ECT.Shared.GetUserAltTitleByGroupCompoRequest, global::AF.ECT.Shared.GetUserAltTitleByGroupCompoResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetUserAltTitleByGroupCompo",
        __Marshaller_workflow_GetUserAltTitleByGroupCompoRequest,
        __Marshaller_workflow_GetUserAltTitleByGroupCompoResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetUserAltTitleByGroupCompoRequest, global::AF.ECT.Shared.UserAltTitleByGroupCompoItem> __Method_GetUserAltTitleByGroupCompoStream = new grpc::Method<global::AF.ECT.Shared.GetUserAltTitleByGroupCompoRequest, global::AF.ECT.Shared.UserAltTitleByGroupCompoItem>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetUserAltTitleByGroupCompoStream",
        __Marshaller_workflow_GetUserAltTitleByGroupCompoRequest,
        __Marshaller_workflow_UserAltTitleByGroupCompoItem);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetUserNameRequest, global::AF.ECT.Shared.GetUserNameResponse> __Method_GetUserName = new grpc::Method<global::AF.ECT.Shared.GetUserNameRequest, global::AF.ECT.Shared.GetUserNameResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetUserName",
        __Marshaller_workflow_GetUserNameRequest,
        __Marshaller_workflow_GetUserNameResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetUserNameRequest, global::AF.ECT.Shared.UserNameItem> __Method_GetUserNameStream = new grpc::Method<global::AF.ECT.Shared.GetUserNameRequest, global::AF.ECT.Shared.UserNameItem>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetUserNameStream",
        __Marshaller_workflow_GetUserNameRequest,
        __Marshaller_workflow_UserNameItem);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetUsersAltTitleByGroupRequest, global::AF.ECT.Shared.GetUsersAltTitleByGroupResponse> __Method_GetUsersAltTitleByGroup = new grpc::Method<global::AF.ECT.Shared.GetUsersAltTitleByGroupRequest, global::AF.ECT.Shared.GetUsersAltTitleByGroupResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetUsersAltTitleByGroup",
        __Marshaller_workflow_GetUsersAltTitleByGroupRequest,
        __Marshaller_workflow_GetUsersAltTitleByGroupResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetUsersAltTitleByGroupRequest, global::AF.ECT.Shared.UsersAltTitleByGroupItem> __Method_GetUsersAltTitleByGroupStream = new grpc::Method<global::AF.ECT.Shared.GetUsersAltTitleByGroupRequest, global::AF.ECT.Shared.UsersAltTitleByGroupItem>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetUsersAltTitleByGroupStream",
        __Marshaller_workflow_GetUsersAltTitleByGroupRequest,
        __Marshaller_workflow_UsersAltTitleByGroupItem);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.EmptyRequest, global::AF.ECT.Shared.GetUsersOnlineResponse> __Method_GetUsersOnline = new grpc::Method<global::AF.ECT.Shared.EmptyRequest, global::AF.ECT.Shared.GetUsersOnlineResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetUsersOnline",
        __Marshaller_workflow_EmptyRequest,
        __Marshaller_workflow_GetUsersOnlineResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.EmptyRequest, global::AF.ECT.Shared.UserOnlineItem> __Method_GetUsersOnlineStream = new grpc::Method<global::AF.ECT.Shared.EmptyRequest, global::AF.ECT.Shared.UserOnlineItem>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetUsersOnlineStream",
        __Marshaller_workflow_EmptyRequest,
        __Marshaller_workflow_UserOnlineItem);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetWhoisRequest, global::AF.ECT.Shared.WhoisItem> __Method_GetWhoisStream = new grpc::Method<global::AF.ECT.Shared.GetWhoisRequest, global::AF.ECT.Shared.WhoisItem>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetWhoisStream",
        __Marshaller_workflow_GetWhoisRequest,
        __Marshaller_workflow_WhoisItem);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.HasHQTechAccountRequest, global::AF.ECT.Shared.HQTechAccountItem> __Method_HasHQTechAccountStream = new grpc::Method<global::AF.ECT.Shared.HasHQTechAccountRequest, global::AF.ECT.Shared.HQTechAccountItem>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "HasHQTechAccountStream",
        __Marshaller_workflow_HasHQTechAccountRequest,
        __Marshaller_workflow_HQTechAccountItem);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.IsFinalStatusCodeRequest, global::AF.ECT.Shared.FinalStatusCodeItem> __Method_IsFinalStatusCodeStream = new grpc::Method<global::AF.ECT.Shared.IsFinalStatusCodeRequest, global::AF.ECT.Shared.FinalStatusCodeItem>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "IsFinalStatusCodeStream",
        __Marshaller_workflow_IsFinalStatusCodeRequest,
        __Marshaller_workflow_FinalStatusCodeItem);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.UpdateLoginRequest, global::AF.ECT.Shared.LoginUpdateItem> __Method_UpdateLoginStream = new grpc::Method<global::AF.ECT.Shared.UpdateLoginRequest, global::AF.ECT.Shared.LoginUpdateItem>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "UpdateLoginStream",
        __Marshaller_workflow_UpdateLoginRequest,
        __Marshaller_workflow_LoginUpdateItem);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetWhoisRequest, global::AF.ECT.Shared.GetWhoisResponse> __Method_GetWhois = new grpc::Method<global::AF.ECT.Shared.GetWhoisRequest, global::AF.ECT.Shared.GetWhoisResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetWhois",
        __Marshaller_workflow_GetWhoisRequest,
        __Marshaller_workflow_GetWhoisResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.HasHQTechAccountRequest, global::AF.ECT.Shared.HasHQTechAccountResponse> __Method_HasHQTechAccount = new grpc::Method<global::AF.ECT.Shared.HasHQTechAccountRequest, global::AF.ECT.Shared.HasHQTechAccountResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "HasHQTechAccount",
        __Marshaller_workflow_HasHQTechAccountRequest,
        __Marshaller_workflow_HasHQTechAccountResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.IsFinalStatusCodeRequest, global::AF.ECT.Shared.IsFinalStatusCodeResponse> __Method_IsFinalStatusCode = new grpc::Method<global::AF.ECT.Shared.IsFinalStatusCodeRequest, global::AF.ECT.Shared.IsFinalStatusCodeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "IsFinalStatusCode",
        __Marshaller_workflow_IsFinalStatusCodeRequest,
        __Marshaller_workflow_IsFinalStatusCodeResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.LogoutRequest, global::AF.ECT.Shared.LogoutResponse> __Method_Logout = new grpc::Method<global::AF.ECT.Shared.LogoutRequest, global::AF.ECT.Shared.LogoutResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Logout",
        __Marshaller_workflow_LogoutRequest,
        __Marshaller_workflow_LogoutResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.RegisterUserRequest, global::AF.ECT.Shared.RegisterUserResponse> __Method_RegisterUser = new grpc::Method<global::AF.ECT.Shared.RegisterUserRequest, global::AF.ECT.Shared.RegisterUserResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RegisterUser",
        __Marshaller_workflow_RegisterUserRequest,
        __Marshaller_workflow_RegisterUserResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.RegisterUserRoleRequest, global::AF.ECT.Shared.RegisterUserRoleResponse> __Method_RegisterUserRole = new grpc::Method<global::AF.ECT.Shared.RegisterUserRoleRequest, global::AF.ECT.Shared.RegisterUserRoleResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RegisterUserRole",
        __Marshaller_workflow_RegisterUserRoleRequest,
        __Marshaller_workflow_RegisterUserRoleResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.SearchMemberDataRequest, global::AF.ECT.Shared.SearchMemberDataResponse> __Method_SearchMemberData = new grpc::Method<global::AF.ECT.Shared.SearchMemberDataRequest, global::AF.ECT.Shared.SearchMemberDataResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SearchMemberData",
        __Marshaller_workflow_SearchMemberDataRequest,
        __Marshaller_workflow_SearchMemberDataResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.SearchMemberDataRequest, global::AF.ECT.Shared.MemberDataItem> __Method_SearchMemberDataStream = new grpc::Method<global::AF.ECT.Shared.SearchMemberDataRequest, global::AF.ECT.Shared.MemberDataItem>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SearchMemberDataStream",
        __Marshaller_workflow_SearchMemberDataRequest,
        __Marshaller_workflow_MemberDataItem);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.SearchMemberDataTestRequest, global::AF.ECT.Shared.SearchMemberDataTestResponse> __Method_SearchMemberDataTest = new grpc::Method<global::AF.ECT.Shared.SearchMemberDataTestRequest, global::AF.ECT.Shared.SearchMemberDataTestResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SearchMemberDataTest",
        __Marshaller_workflow_SearchMemberDataTestRequest,
        __Marshaller_workflow_SearchMemberDataTestResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.SearchMemberDataTestRequest, global::AF.ECT.Shared.MemberDataTestItem> __Method_SearchMemberDataTestStream = new grpc::Method<global::AF.ECT.Shared.SearchMemberDataTestRequest, global::AF.ECT.Shared.MemberDataTestItem>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SearchMemberDataTestStream",
        __Marshaller_workflow_SearchMemberDataTestRequest,
        __Marshaller_workflow_MemberDataTestItem);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.UpdateAccountStatusRequest, global::AF.ECT.Shared.UpdateAccountStatusResponse> __Method_UpdateAccountStatus = new grpc::Method<global::AF.ECT.Shared.UpdateAccountStatusRequest, global::AF.ECT.Shared.UpdateAccountStatusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateAccountStatus",
        __Marshaller_workflow_UpdateAccountStatusRequest,
        __Marshaller_workflow_UpdateAccountStatusResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.UpdateLoginRequest, global::AF.ECT.Shared.UpdateLoginResponse> __Method_UpdateLogin = new grpc::Method<global::AF.ECT.Shared.UpdateLoginRequest, global::AF.ECT.Shared.UpdateLoginResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateLogin",
        __Marshaller_workflow_UpdateLoginRequest,
        __Marshaller_workflow_UpdateLoginResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.UpdateManagedSettingsRequest, global::AF.ECT.Shared.UpdateManagedSettingsResponse> __Method_UpdateManagedSettings = new grpc::Method<global::AF.ECT.Shared.UpdateManagedSettingsRequest, global::AF.ECT.Shared.UpdateManagedSettingsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateManagedSettings",
        __Marshaller_workflow_UpdateManagedSettingsRequest,
        __Marshaller_workflow_UpdateManagedSettingsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.UpdateUserAltTitleRequest, global::AF.ECT.Shared.UpdateUserAltTitleResponse> __Method_UpdateUserAltTitle = new grpc::Method<global::AF.ECT.Shared.UpdateUserAltTitleRequest, global::AF.ECT.Shared.UpdateUserAltTitleResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateUserAltTitle",
        __Marshaller_workflow_UpdateUserAltTitleRequest,
        __Marshaller_workflow_UpdateUserAltTitleResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.AddSignatureRequest, global::AF.ECT.Shared.AddSignatureResponse> __Method_AddSignature = new grpc::Method<global::AF.ECT.Shared.AddSignatureRequest, global::AF.ECT.Shared.AddSignatureResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddSignature",
        __Marshaller_workflow_AddSignatureRequest,
        __Marshaller_workflow_AddSignatureResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.CopyActionsRequest, global::AF.ECT.Shared.CopyActionsResponse> __Method_CopyActions = new grpc::Method<global::AF.ECT.Shared.CopyActionsRequest, global::AF.ECT.Shared.CopyActionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CopyActions",
        __Marshaller_workflow_CopyActionsRequest,
        __Marshaller_workflow_CopyActionsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.CopyRulesRequest, global::AF.ECT.Shared.CopyRulesResponse> __Method_CopyRules = new grpc::Method<global::AF.ECT.Shared.CopyRulesRequest, global::AF.ECT.Shared.CopyRulesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CopyRules",
        __Marshaller_workflow_CopyRulesRequest,
        __Marshaller_workflow_CopyRulesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.CopyWorkflowRequest, global::AF.ECT.Shared.CopyWorkflowResponse> __Method_CopyWorkflow = new grpc::Method<global::AF.ECT.Shared.CopyWorkflowRequest, global::AF.ECT.Shared.CopyWorkflowResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CopyWorkflow",
        __Marshaller_workflow_CopyWorkflowRequest,
        __Marshaller_workflow_CopyWorkflowResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.DeleteStatusCodeRequest, global::AF.ECT.Shared.DeleteStatusCodeResponse> __Method_DeleteStatusCode = new grpc::Method<global::AF.ECT.Shared.DeleteStatusCodeRequest, global::AF.ECT.Shared.DeleteStatusCodeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteStatusCode",
        __Marshaller_workflow_DeleteStatusCodeRequest,
        __Marshaller_workflow_DeleteStatusCodeResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetActionsByStepRequest, global::AF.ECT.Shared.GetActionsByStepResponse> __Method_GetActionsByStep = new grpc::Method<global::AF.ECT.Shared.GetActionsByStepRequest, global::AF.ECT.Shared.GetActionsByStepResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetActionsByStep",
        __Marshaller_workflow_GetActionsByStepRequest,
        __Marshaller_workflow_GetActionsByStepResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetActiveCasesRequest, global::AF.ECT.Shared.GetActiveCasesResponse> __Method_GetActiveCases = new grpc::Method<global::AF.ECT.Shared.GetActiveCasesRequest, global::AF.ECT.Shared.GetActiveCasesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetActiveCases",
        __Marshaller_workflow_GetActiveCasesRequest,
        __Marshaller_workflow_GetActiveCasesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.EmptyRequest, global::AF.ECT.Shared.GetAllFindingByReasonOfResponse> __Method_GetAllFindingByReasonOf = new grpc::Method<global::AF.ECT.Shared.EmptyRequest, global::AF.ECT.Shared.GetAllFindingByReasonOfResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAllFindingByReasonOf",
        __Marshaller_workflow_EmptyRequest,
        __Marshaller_workflow_GetAllFindingByReasonOfResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.EmptyRequest, global::AF.ECT.Shared.GetAllLocksResponse> __Method_GetAllLocks = new grpc::Method<global::AF.ECT.Shared.EmptyRequest, global::AF.ECT.Shared.GetAllLocksResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAllLocks",
        __Marshaller_workflow_EmptyRequest,
        __Marshaller_workflow_GetAllLocksResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetCancelReasonsRequest, global::AF.ECT.Shared.GetCancelReasonsResponse> __Method_GetCancelReasons = new grpc::Method<global::AF.ECT.Shared.GetCancelReasonsRequest, global::AF.ECT.Shared.GetCancelReasonsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCancelReasons",
        __Marshaller_workflow_GetCancelReasonsRequest,
        __Marshaller_workflow_GetCancelReasonsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetCreatableByGroupRequest, global::AF.ECT.Shared.GetCreatableByGroupResponse> __Method_GetCreatableByGroup = new grpc::Method<global::AF.ECT.Shared.GetCreatableByGroupRequest, global::AF.ECT.Shared.GetCreatableByGroupResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCreatableByGroup",
        __Marshaller_workflow_GetCreatableByGroupRequest,
        __Marshaller_workflow_GetCreatableByGroupResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetFindingByReasonOfByIdRequest, global::AF.ECT.Shared.GetFindingByReasonOfByIdResponse> __Method_GetFindingByReasonOfById = new grpc::Method<global::AF.ECT.Shared.GetFindingByReasonOfByIdRequest, global::AF.ECT.Shared.GetFindingByReasonOfByIdResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetFindingByReasonOfById",
        __Marshaller_workflow_GetFindingByReasonOfByIdRequest,
        __Marshaller_workflow_GetFindingByReasonOfByIdResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetFindingsRequest, global::AF.ECT.Shared.GetFindingsResponse> __Method_GetFindings = new grpc::Method<global::AF.ECT.Shared.GetFindingsRequest, global::AF.ECT.Shared.GetFindingsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetFindings",
        __Marshaller_workflow_GetFindingsRequest,
        __Marshaller_workflow_GetFindingsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetModuleFromWorkflowRequest, global::AF.ECT.Shared.GetModuleFromWorkflowResponse> __Method_GetModuleFromWorkflow = new grpc::Method<global::AF.ECT.Shared.GetModuleFromWorkflowRequest, global::AF.ECT.Shared.GetModuleFromWorkflowResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetModuleFromWorkflow",
        __Marshaller_workflow_GetModuleFromWorkflowRequest,
        __Marshaller_workflow_GetModuleFromWorkflowResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetPageAccessByGroupRequest, global::AF.ECT.Shared.GetPageAccessByGroupResponse> __Method_GetPageAccessByGroup = new grpc::Method<global::AF.ECT.Shared.GetPageAccessByGroupRequest, global::AF.ECT.Shared.GetPageAccessByGroupResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPageAccessByGroup",
        __Marshaller_workflow_GetPageAccessByGroupRequest,
        __Marshaller_workflow_GetPageAccessByGroupResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetPageAccessByWorkflowViewRequest, global::AF.ECT.Shared.GetPageAccessByWorkflowViewResponse> __Method_GetPageAccessByWorkflowView = new grpc::Method<global::AF.ECT.Shared.GetPageAccessByWorkflowViewRequest, global::AF.ECT.Shared.GetPageAccessByWorkflowViewResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPageAccessByWorkflowView",
        __Marshaller_workflow_GetPageAccessByWorkflowViewRequest,
        __Marshaller_workflow_GetPageAccessByWorkflowViewResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetPagesByWorkflowIdRequest, global::AF.ECT.Shared.GetPagesByWorkflowIdResponse> __Method_GetPagesByWorkflowId = new grpc::Method<global::AF.ECT.Shared.GetPagesByWorkflowIdRequest, global::AF.ECT.Shared.GetPagesByWorkflowIdResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPagesByWorkflowId",
        __Marshaller_workflow_GetPagesByWorkflowIdRequest,
        __Marshaller_workflow_GetPagesByWorkflowIdResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetPermissionsRequest, global::AF.ECT.Shared.GetPermissionsResponse> __Method_GetPermissions = new grpc::Method<global::AF.ECT.Shared.GetPermissionsRequest, global::AF.ECT.Shared.GetPermissionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPermissions",
        __Marshaller_workflow_GetPermissionsRequest,
        __Marshaller_workflow_GetPermissionsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetPermissionsByCompoRequest, global::AF.ECT.Shared.GetPermissionsByCompoResponse> __Method_GetPermissionsByCompo = new grpc::Method<global::AF.ECT.Shared.GetPermissionsByCompoRequest, global::AF.ECT.Shared.GetPermissionsByCompoResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPermissionsByCompo",
        __Marshaller_workflow_GetPermissionsByCompoRequest,
        __Marshaller_workflow_GetPermissionsByCompoResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetReturnReasonsRequest, global::AF.ECT.Shared.GetReturnReasonsResponse> __Method_GetReturnReasons = new grpc::Method<global::AF.ECT.Shared.GetReturnReasonsRequest, global::AF.ECT.Shared.GetReturnReasonsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetReturnReasons",
        __Marshaller_workflow_GetReturnReasonsRequest,
        __Marshaller_workflow_GetReturnReasonsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetRwoaReasonsRequest, global::AF.ECT.Shared.GetRwoaReasonsResponse> __Method_GetRwoaReasons = new grpc::Method<global::AF.ECT.Shared.GetRwoaReasonsRequest, global::AF.ECT.Shared.GetRwoaReasonsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetRwoaReasons",
        __Marshaller_workflow_GetRwoaReasonsRequest,
        __Marshaller_workflow_GetRwoaReasonsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetStatusCodesByCompoRequest, global::AF.ECT.Shared.GetStatusCodesByCompoResponse> __Method_GetStatusCodesByCompo = new grpc::Method<global::AF.ECT.Shared.GetStatusCodesByCompoRequest, global::AF.ECT.Shared.GetStatusCodesByCompoResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetStatusCodesByCompo",
        __Marshaller_workflow_GetStatusCodesByCompoRequest,
        __Marshaller_workflow_GetStatusCodesByCompoResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetStatusCodesByCompoAndModuleRequest, global::AF.ECT.Shared.GetStatusCodesByCompoAndModuleResponse> __Method_GetStatusCodesByCompoAndModule = new grpc::Method<global::AF.ECT.Shared.GetStatusCodesByCompoAndModuleRequest, global::AF.ECT.Shared.GetStatusCodesByCompoAndModuleResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetStatusCodesByCompoAndModule",
        __Marshaller_workflow_GetStatusCodesByCompoAndModuleRequest,
        __Marshaller_workflow_GetStatusCodesByCompoAndModuleResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetStatusCodesBySignCodeRequest, global::AF.ECT.Shared.GetStatusCodesBySignCodeResponse> __Method_GetStatusCodesBySignCode = new grpc::Method<global::AF.ECT.Shared.GetStatusCodesBySignCodeRequest, global::AF.ECT.Shared.GetStatusCodesBySignCodeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetStatusCodesBySignCode",
        __Marshaller_workflow_GetStatusCodesBySignCodeRequest,
        __Marshaller_workflow_GetStatusCodesBySignCodeResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetStatusCodesByWorkflowRequest, global::AF.ECT.Shared.GetStatusCodesByWorkflowResponse> __Method_GetStatusCodesByWorkflow = new grpc::Method<global::AF.ECT.Shared.GetStatusCodesByWorkflowRequest, global::AF.ECT.Shared.GetStatusCodesByWorkflowResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetStatusCodesByWorkflow",
        __Marshaller_workflow_GetStatusCodesByWorkflowRequest,
        __Marshaller_workflow_GetStatusCodesByWorkflowResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetStatusCodesByWorkflowAndAccessScopeRequest, global::AF.ECT.Shared.GetStatusCodesByWorkflowAndAccessScopeResponse> __Method_GetStatusCodesByWorkflowAndAccessScope = new grpc::Method<global::AF.ECT.Shared.GetStatusCodesByWorkflowAndAccessScopeRequest, global::AF.ECT.Shared.GetStatusCodesByWorkflowAndAccessScopeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetStatusCodesByWorkflowAndAccessScope",
        __Marshaller_workflow_GetStatusCodesByWorkflowAndAccessScopeRequest,
        __Marshaller_workflow_GetStatusCodesByWorkflowAndAccessScopeResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetStatusCodeScopeRequest, global::AF.ECT.Shared.GetStatusCodeScopeResponse> __Method_GetStatusCodeScope = new grpc::Method<global::AF.ECT.Shared.GetStatusCodeScopeRequest, global::AF.ECT.Shared.GetStatusCodeScopeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetStatusCodeScope",
        __Marshaller_workflow_GetStatusCodeScopeRequest,
        __Marshaller_workflow_GetStatusCodeScopeResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetStepsByWorkflowRequest, global::AF.ECT.Shared.GetStepsByWorkflowResponse> __Method_GetStepsByWorkflow = new grpc::Method<global::AF.ECT.Shared.GetStepsByWorkflowRequest, global::AF.ECT.Shared.GetStepsByWorkflowResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetStepsByWorkflow",
        __Marshaller_workflow_GetStepsByWorkflowRequest,
        __Marshaller_workflow_GetStepsByWorkflowResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetStepsByWorkflowAndStatusRequest, global::AF.ECT.Shared.GetStepsByWorkflowAndStatusResponse> __Method_GetStepsByWorkflowAndStatus = new grpc::Method<global::AF.ECT.Shared.GetStepsByWorkflowAndStatusRequest, global::AF.ECT.Shared.GetStepsByWorkflowAndStatusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetStepsByWorkflowAndStatus",
        __Marshaller_workflow_GetStepsByWorkflowAndStatusRequest,
        __Marshaller_workflow_GetStepsByWorkflowAndStatusResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetViewableByGroupRequest, global::AF.ECT.Shared.GetViewableByGroupResponse> __Method_GetViewableByGroup = new grpc::Method<global::AF.ECT.Shared.GetViewableByGroupRequest, global::AF.ECT.Shared.GetViewableByGroupResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetViewableByGroup",
        __Marshaller_workflow_GetViewableByGroupRequest,
        __Marshaller_workflow_GetViewableByGroupResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetWorkflowByCompoRequest, global::AF.ECT.Shared.GetWorkflowByCompoResponse> __Method_GetWorkflowByCompo = new grpc::Method<global::AF.ECT.Shared.GetWorkflowByCompoRequest, global::AF.ECT.Shared.GetWorkflowByCompoResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetWorkflowByCompo",
        __Marshaller_workflow_GetWorkflowByCompoRequest,
        __Marshaller_workflow_GetWorkflowByCompoResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetWorkflowFromModuleRequest, global::AF.ECT.Shared.GetWorkflowFromModuleResponse> __Method_GetWorkflowFromModule = new grpc::Method<global::AF.ECT.Shared.GetWorkflowFromModuleRequest, global::AF.ECT.Shared.GetWorkflowFromModuleResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetWorkflowFromModule",
        __Marshaller_workflow_GetWorkflowFromModuleRequest,
        __Marshaller_workflow_GetWorkflowFromModuleResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetWorkflowInitialStatusCodeRequest, global::AF.ECT.Shared.GetWorkflowInitialStatusCodeResponse> __Method_GetWorkflowInitialStatusCode = new grpc::Method<global::AF.ECT.Shared.GetWorkflowInitialStatusCodeRequest, global::AF.ECT.Shared.GetWorkflowInitialStatusCodeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetWorkflowInitialStatusCode",
        __Marshaller_workflow_GetWorkflowInitialStatusCodeRequest,
        __Marshaller_workflow_GetWorkflowInitialStatusCodeResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetWorkflowTitleRequest, global::AF.ECT.Shared.GetWorkflowTitleResponse> __Method_GetWorkflowTitle = new grpc::Method<global::AF.ECT.Shared.GetWorkflowTitleRequest, global::AF.ECT.Shared.GetWorkflowTitleResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetWorkflowTitle",
        __Marshaller_workflow_GetWorkflowTitleRequest,
        __Marshaller_workflow_GetWorkflowTitleResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetWorkflowTitleByWorkStatusIdRequest, global::AF.ECT.Shared.GetWorkflowTitleByWorkStatusIdResponse> __Method_GetWorkflowTitleByWorkStatusId = new grpc::Method<global::AF.ECT.Shared.GetWorkflowTitleByWorkStatusIdRequest, global::AF.ECT.Shared.GetWorkflowTitleByWorkStatusIdResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetWorkflowTitleByWorkStatusId",
        __Marshaller_workflow_GetWorkflowTitleByWorkStatusIdRequest,
        __Marshaller_workflow_GetWorkflowTitleByWorkStatusIdResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.InsertActionRequest, global::AF.ECT.Shared.InsertActionResponse> __Method_InsertAction = new grpc::Method<global::AF.ECT.Shared.InsertActionRequest, global::AF.ECT.Shared.InsertActionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "InsertAction",
        __Marshaller_workflow_InsertActionRequest,
        __Marshaller_workflow_InsertActionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.InsertOptionActionRequest, global::AF.ECT.Shared.InsertOptionActionResponse> __Method_InsertOptionAction = new grpc::Method<global::AF.ECT.Shared.InsertOptionActionRequest, global::AF.ECT.Shared.InsertOptionActionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "InsertOptionAction",
        __Marshaller_workflow_InsertOptionActionRequest,
        __Marshaller_workflow_InsertOptionActionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.AddSignatureRequest, global::AF.ECT.Shared.SignatureItem> __Method_AddSignatureStream = new grpc::Method<global::AF.ECT.Shared.AddSignatureRequest, global::AF.ECT.Shared.SignatureItem>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "AddSignatureStream",
        __Marshaller_workflow_AddSignatureRequest,
        __Marshaller_workflow_SignatureItem);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.CopyWorkflowRequest, global::AF.ECT.Shared.WorkflowCopyItem> __Method_CopyWorkflowStream = new grpc::Method<global::AF.ECT.Shared.CopyWorkflowRequest, global::AF.ECT.Shared.WorkflowCopyItem>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "CopyWorkflowStream",
        __Marshaller_workflow_CopyWorkflowRequest,
        __Marshaller_workflow_WorkflowCopyItem);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetActionsByStepRequest, global::AF.ECT.Shared.ActionByStepItem> __Method_GetActionsByStepStream = new grpc::Method<global::AF.ECT.Shared.GetActionsByStepRequest, global::AF.ECT.Shared.ActionByStepItem>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetActionsByStepStream",
        __Marshaller_workflow_GetActionsByStepRequest,
        __Marshaller_workflow_ActionByStepItem);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetActiveCasesRequest, global::AF.ECT.Shared.ActiveCaseItem> __Method_GetActiveCasesStream = new grpc::Method<global::AF.ECT.Shared.GetActiveCasesRequest, global::AF.ECT.Shared.ActiveCaseItem>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetActiveCasesStream",
        __Marshaller_workflow_GetActiveCasesRequest,
        __Marshaller_workflow_ActiveCaseItem);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.EmptyRequest, global::AF.ECT.Shared.FindingByReasonOfItem> __Method_GetAllFindingByReasonOfStream = new grpc::Method<global::AF.ECT.Shared.EmptyRequest, global::AF.ECT.Shared.FindingByReasonOfItem>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetAllFindingByReasonOfStream",
        __Marshaller_workflow_EmptyRequest,
        __Marshaller_workflow_FindingByReasonOfItem);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.EmptyRequest, global::AF.ECT.Shared.LockItem> __Method_GetAllLocksStream = new grpc::Method<global::AF.ECT.Shared.EmptyRequest, global::AF.ECT.Shared.LockItem>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetAllLocksStream",
        __Marshaller_workflow_EmptyRequest,
        __Marshaller_workflow_LockItem);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetCancelReasonsRequest, global::AF.ECT.Shared.CancelReasonItem> __Method_GetCancelReasonsStream = new grpc::Method<global::AF.ECT.Shared.GetCancelReasonsRequest, global::AF.ECT.Shared.CancelReasonItem>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetCancelReasonsStream",
        __Marshaller_workflow_GetCancelReasonsRequest,
        __Marshaller_workflow_CancelReasonItem);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetCreatableByGroupRequest, global::AF.ECT.Shared.CreatableByGroupItem> __Method_GetCreatableByGroupStream = new grpc::Method<global::AF.ECT.Shared.GetCreatableByGroupRequest, global::AF.ECT.Shared.CreatableByGroupItem>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetCreatableByGroupStream",
        __Marshaller_workflow_GetCreatableByGroupRequest,
        __Marshaller_workflow_CreatableByGroupItem);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetFindingByReasonOfByIdRequest, global::AF.ECT.Shared.FindingByReasonOfByIdItem> __Method_GetFindingByReasonOfByIdStream = new grpc::Method<global::AF.ECT.Shared.GetFindingByReasonOfByIdRequest, global::AF.ECT.Shared.FindingByReasonOfByIdItem>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetFindingByReasonOfByIdStream",
        __Marshaller_workflow_GetFindingByReasonOfByIdRequest,
        __Marshaller_workflow_FindingByReasonOfByIdItem);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetFindingsRequest, global::AF.ECT.Shared.FindingItem> __Method_GetFindingsStream = new grpc::Method<global::AF.ECT.Shared.GetFindingsRequest, global::AF.ECT.Shared.FindingItem>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetFindingsStream",
        __Marshaller_workflow_GetFindingsRequest,
        __Marshaller_workflow_FindingItem);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetModuleFromWorkflowRequest, global::AF.ECT.Shared.ModuleFromWorkflowItem> __Method_GetModuleFromWorkflowStream = new grpc::Method<global::AF.ECT.Shared.GetModuleFromWorkflowRequest, global::AF.ECT.Shared.ModuleFromWorkflowItem>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetModuleFromWorkflowStream",
        __Marshaller_workflow_GetModuleFromWorkflowRequest,
        __Marshaller_workflow_ModuleFromWorkflowItem);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetPageAccessByGroupRequest, global::AF.ECT.Shared.PageAccessByGroupItem> __Method_GetPageAccessByGroupStream = new grpc::Method<global::AF.ECT.Shared.GetPageAccessByGroupRequest, global::AF.ECT.Shared.PageAccessByGroupItem>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetPageAccessByGroupStream",
        __Marshaller_workflow_GetPageAccessByGroupRequest,
        __Marshaller_workflow_PageAccessByGroupItem);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetPageAccessByWorkflowViewRequest, global::AF.ECT.Shared.PageAccessByWorkflowViewItem> __Method_GetPageAccessByWorkflowViewStream = new grpc::Method<global::AF.ECT.Shared.GetPageAccessByWorkflowViewRequest, global::AF.ECT.Shared.PageAccessByWorkflowViewItem>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetPageAccessByWorkflowViewStream",
        __Marshaller_workflow_GetPageAccessByWorkflowViewRequest,
        __Marshaller_workflow_PageAccessByWorkflowViewItem);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetPagesByWorkflowIdRequest, global::AF.ECT.Shared.PageByWorkflowItem> __Method_GetPagesByWorkflowIdStream = new grpc::Method<global::AF.ECT.Shared.GetPagesByWorkflowIdRequest, global::AF.ECT.Shared.PageByWorkflowItem>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetPagesByWorkflowIdStream",
        __Marshaller_workflow_GetPagesByWorkflowIdRequest,
        __Marshaller_workflow_PageByWorkflowItem);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetPermissionsRequest, global::AF.ECT.Shared.PermissionItem> __Method_GetPermissionsStream = new grpc::Method<global::AF.ECT.Shared.GetPermissionsRequest, global::AF.ECT.Shared.PermissionItem>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetPermissionsStream",
        __Marshaller_workflow_GetPermissionsRequest,
        __Marshaller_workflow_PermissionItem);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetPermissionsByCompoRequest, global::AF.ECT.Shared.PermissionByCompoItem> __Method_GetPermissionsByCompoStream = new grpc::Method<global::AF.ECT.Shared.GetPermissionsByCompoRequest, global::AF.ECT.Shared.PermissionByCompoItem>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetPermissionsByCompoStream",
        __Marshaller_workflow_GetPermissionsByCompoRequest,
        __Marshaller_workflow_PermissionByCompoItem);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetReturnReasonsRequest, global::AF.ECT.Shared.ReturnReasonItem> __Method_GetReturnReasonsStream = new grpc::Method<global::AF.ECT.Shared.GetReturnReasonsRequest, global::AF.ECT.Shared.ReturnReasonItem>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetReturnReasonsStream",
        __Marshaller_workflow_GetReturnReasonsRequest,
        __Marshaller_workflow_ReturnReasonItem);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetRwoaReasonsRequest, global::AF.ECT.Shared.RwoaReasonItem> __Method_GetRwoaReasonsStream = new grpc::Method<global::AF.ECT.Shared.GetRwoaReasonsRequest, global::AF.ECT.Shared.RwoaReasonItem>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetRwoaReasonsStream",
        __Marshaller_workflow_GetRwoaReasonsRequest,
        __Marshaller_workflow_RwoaReasonItem);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetStatusCodesByCompoRequest, global::AF.ECT.Shared.StatusCodeByCompoItem> __Method_GetStatusCodesByCompoStream = new grpc::Method<global::AF.ECT.Shared.GetStatusCodesByCompoRequest, global::AF.ECT.Shared.StatusCodeByCompoItem>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetStatusCodesByCompoStream",
        __Marshaller_workflow_GetStatusCodesByCompoRequest,
        __Marshaller_workflow_StatusCodeByCompoItem);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetStatusCodesByCompoAndModuleRequest, global::AF.ECT.Shared.StatusCodeByCompoAndModuleItem> __Method_GetStatusCodesByCompoAndModuleStream = new grpc::Method<global::AF.ECT.Shared.GetStatusCodesByCompoAndModuleRequest, global::AF.ECT.Shared.StatusCodeByCompoAndModuleItem>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetStatusCodesByCompoAndModuleStream",
        __Marshaller_workflow_GetStatusCodesByCompoAndModuleRequest,
        __Marshaller_workflow_StatusCodeByCompoAndModuleItem);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetStatusCodesBySignCodeRequest, global::AF.ECT.Shared.StatusCodeBySignCodeItem> __Method_GetStatusCodesBySignCodeStream = new grpc::Method<global::AF.ECT.Shared.GetStatusCodesBySignCodeRequest, global::AF.ECT.Shared.StatusCodeBySignCodeItem>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetStatusCodesBySignCodeStream",
        __Marshaller_workflow_GetStatusCodesBySignCodeRequest,
        __Marshaller_workflow_StatusCodeBySignCodeItem);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetStatusCodesByWorkflowRequest, global::AF.ECT.Shared.StatusCodeByWorkflowItem> __Method_GetStatusCodesByWorkflowStream = new grpc::Method<global::AF.ECT.Shared.GetStatusCodesByWorkflowRequest, global::AF.ECT.Shared.StatusCodeByWorkflowItem>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetStatusCodesByWorkflowStream",
        __Marshaller_workflow_GetStatusCodesByWorkflowRequest,
        __Marshaller_workflow_StatusCodeByWorkflowItem);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetStatusCodesByWorkflowAndAccessScopeRequest, global::AF.ECT.Shared.StatusCodeByWorkflowAndAccessScopeItem> __Method_GetStatusCodesByWorkflowAndAccessScopeStream = new grpc::Method<global::AF.ECT.Shared.GetStatusCodesByWorkflowAndAccessScopeRequest, global::AF.ECT.Shared.StatusCodeByWorkflowAndAccessScopeItem>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetStatusCodesByWorkflowAndAccessScopeStream",
        __Marshaller_workflow_GetStatusCodesByWorkflowAndAccessScopeRequest,
        __Marshaller_workflow_StatusCodeByWorkflowAndAccessScopeItem);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetStatusCodeScopeRequest, global::AF.ECT.Shared.StatusCodeScopeItem> __Method_GetStatusCodeScopeStream = new grpc::Method<global::AF.ECT.Shared.GetStatusCodeScopeRequest, global::AF.ECT.Shared.StatusCodeScopeItem>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetStatusCodeScopeStream",
        __Marshaller_workflow_GetStatusCodeScopeRequest,
        __Marshaller_workflow_StatusCodeScopeItem);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetStepsByWorkflowRequest, global::AF.ECT.Shared.StepByWorkflowItem> __Method_GetStepsByWorkflowStream = new grpc::Method<global::AF.ECT.Shared.GetStepsByWorkflowRequest, global::AF.ECT.Shared.StepByWorkflowItem>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetStepsByWorkflowStream",
        __Marshaller_workflow_GetStepsByWorkflowRequest,
        __Marshaller_workflow_StepByWorkflowItem);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetStepsByWorkflowAndStatusRequest, global::AF.ECT.Shared.StepByWorkflowAndStatusItem> __Method_GetStepsByWorkflowAndStatusStream = new grpc::Method<global::AF.ECT.Shared.GetStepsByWorkflowAndStatusRequest, global::AF.ECT.Shared.StepByWorkflowAndStatusItem>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetStepsByWorkflowAndStatusStream",
        __Marshaller_workflow_GetStepsByWorkflowAndStatusRequest,
        __Marshaller_workflow_StepByWorkflowAndStatusItem);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetViewableByGroupRequest, global::AF.ECT.Shared.ViewableByGroupItem> __Method_GetViewableByGroupStream = new grpc::Method<global::AF.ECT.Shared.GetViewableByGroupRequest, global::AF.ECT.Shared.ViewableByGroupItem>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetViewableByGroupStream",
        __Marshaller_workflow_GetViewableByGroupRequest,
        __Marshaller_workflow_ViewableByGroupItem);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetWorkflowByCompoRequest, global::AF.ECT.Shared.WorkflowByCompoItem> __Method_GetWorkflowByCompoStream = new grpc::Method<global::AF.ECT.Shared.GetWorkflowByCompoRequest, global::AF.ECT.Shared.WorkflowByCompoItem>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetWorkflowByCompoStream",
        __Marshaller_workflow_GetWorkflowByCompoRequest,
        __Marshaller_workflow_WorkflowByCompoItem);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetWorkflowFromModuleRequest, global::AF.ECT.Shared.WorkflowFromModuleItem> __Method_GetWorkflowFromModuleStream = new grpc::Method<global::AF.ECT.Shared.GetWorkflowFromModuleRequest, global::AF.ECT.Shared.WorkflowFromModuleItem>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetWorkflowFromModuleStream",
        __Marshaller_workflow_GetWorkflowFromModuleRequest,
        __Marshaller_workflow_WorkflowFromModuleItem);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetWorkflowInitialStatusCodeRequest, global::AF.ECT.Shared.WorkflowInitialStatusCodeItem> __Method_GetWorkflowInitialStatusCodeStream = new grpc::Method<global::AF.ECT.Shared.GetWorkflowInitialStatusCodeRequest, global::AF.ECT.Shared.WorkflowInitialStatusCodeItem>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetWorkflowInitialStatusCodeStream",
        __Marshaller_workflow_GetWorkflowInitialStatusCodeRequest,
        __Marshaller_workflow_WorkflowInitialStatusCodeItem);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetWorkflowTitleRequest, global::AF.ECT.Shared.WorkflowTitleItem> __Method_GetWorkflowTitleStream = new grpc::Method<global::AF.ECT.Shared.GetWorkflowTitleRequest, global::AF.ECT.Shared.WorkflowTitleItem>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetWorkflowTitleStream",
        __Marshaller_workflow_GetWorkflowTitleRequest,
        __Marshaller_workflow_WorkflowTitleItem);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetWorkflowTitleByWorkStatusIdRequest, global::AF.ECT.Shared.WorkflowTitleByWorkStatusIdItem> __Method_GetWorkflowTitleByWorkStatusIdStream = new grpc::Method<global::AF.ECT.Shared.GetWorkflowTitleByWorkStatusIdRequest, global::AF.ECT.Shared.WorkflowTitleByWorkStatusIdItem>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetWorkflowTitleByWorkStatusIdStream",
        __Marshaller_workflow_GetWorkflowTitleByWorkStatusIdRequest,
        __Marshaller_workflow_WorkflowTitleByWorkStatusIdItem);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.InsertActionRequest, global::AF.ECT.Shared.InsertActionItem> __Method_InsertActionStream = new grpc::Method<global::AF.ECT.Shared.InsertActionRequest, global::AF.ECT.Shared.InsertActionItem>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "InsertActionStream",
        __Marshaller_workflow_InsertActionRequest,
        __Marshaller_workflow_InsertActionItem);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.InsertOptionActionRequest, global::AF.ECT.Shared.InsertOptionActionItem> __Method_InsertOptionActionStream = new grpc::Method<global::AF.ECT.Shared.InsertOptionActionRequest, global::AF.ECT.Shared.InsertOptionActionItem>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "InsertOptionActionStream",
        __Marshaller_workflow_InsertOptionActionRequest,
        __Marshaller_workflow_InsertOptionActionItem);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.DeleteLogByIdRequest, global::AF.ECT.Shared.DeleteLogByIdResponse> __Method_DeleteLogById = new grpc::Method<global::AF.ECT.Shared.DeleteLogByIdRequest, global::AF.ECT.Shared.DeleteLogByIdResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteLogById",
        __Marshaller_workflow_DeleteLogByIdRequest,
        __Marshaller_workflow_DeleteLogByIdResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.FindProcessLastExecutionDateRequest, global::AF.ECT.Shared.FindProcessLastExecutionDateResponse> __Method_FindProcessLastExecutionDate = new grpc::Method<global::AF.ECT.Shared.FindProcessLastExecutionDateRequest, global::AF.ECT.Shared.FindProcessLastExecutionDateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FindProcessLastExecutionDate",
        __Marshaller_workflow_FindProcessLastExecutionDateRequest,
        __Marshaller_workflow_FindProcessLastExecutionDateResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.FindProcessLastExecutionDateRequest, global::AF.ECT.Shared.ProcessLastExecutionDateItem> __Method_FindProcessLastExecutionDateStream = new grpc::Method<global::AF.ECT.Shared.FindProcessLastExecutionDateRequest, global::AF.ECT.Shared.ProcessLastExecutionDateItem>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "FindProcessLastExecutionDateStream",
        __Marshaller_workflow_FindProcessLastExecutionDateRequest,
        __Marshaller_workflow_ProcessLastExecutionDateItem);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.EmptyRequest, global::AF.ECT.Shared.GetAllLogsResponse> __Method_GetAllLogs = new grpc::Method<global::AF.ECT.Shared.EmptyRequest, global::AF.ECT.Shared.GetAllLogsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAllLogs",
        __Marshaller_workflow_EmptyRequest,
        __Marshaller_workflow_GetAllLogsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.EmptyRequest, global::AF.ECT.Shared.LogItem> __Method_GetAllLogsStream = new grpc::Method<global::AF.ECT.Shared.EmptyRequest, global::AF.ECT.Shared.LogItem>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetAllLogsStream",
        __Marshaller_workflow_EmptyRequest,
        __Marshaller_workflow_LogItem);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.InsertLogRequest, global::AF.ECT.Shared.InsertLogResponse> __Method_InsertLog = new grpc::Method<global::AF.ECT.Shared.InsertLogRequest, global::AF.ECT.Shared.InsertLogResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "InsertLog",
        __Marshaller_workflow_InsertLogRequest,
        __Marshaller_workflow_InsertLogResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.IsProcessActiveRequest, global::AF.ECT.Shared.IsProcessActiveResponse> __Method_IsProcessActive = new grpc::Method<global::AF.ECT.Shared.IsProcessActiveRequest, global::AF.ECT.Shared.IsProcessActiveResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "IsProcessActive",
        __Marshaller_workflow_IsProcessActiveRequest,
        __Marshaller_workflow_IsProcessActiveResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.IsProcessActiveRequest, global::AF.ECT.Shared.ProcessActiveItem> __Method_IsProcessActiveStream = new grpc::Method<global::AF.ECT.Shared.IsProcessActiveRequest, global::AF.ECT.Shared.ProcessActiveItem>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "IsProcessActiveStream",
        __Marshaller_workflow_IsProcessActiveRequest,
        __Marshaller_workflow_ProcessActiveItem);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetWorkflowByIdRequest, global::AF.ECT.Shared.GetWorkflowByIdResponse> __Method_GetWorkflowById = new grpc::Method<global::AF.ECT.Shared.GetWorkflowByIdRequest, global::AF.ECT.Shared.GetWorkflowByIdResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetWorkflowById",
        __Marshaller_workflow_GetWorkflowByIdRequest,
        __Marshaller_workflow_GetWorkflowByIdResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetWorkflowByIdRequest, global::AF.ECT.Shared.WorkflowByIdItem> __Method_GetWorkflowByIdStream = new grpc::Method<global::AF.ECT.Shared.GetWorkflowByIdRequest, global::AF.ECT.Shared.WorkflowByIdItem>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetWorkflowByIdStream",
        __Marshaller_workflow_GetWorkflowByIdRequest,
        __Marshaller_workflow_WorkflowByIdItem);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetWorkflowsByRefIdRequest, global::AF.ECT.Shared.GetWorkflowsByRefIdResponse> __Method_GetWorkflowsByRefId = new grpc::Method<global::AF.ECT.Shared.GetWorkflowsByRefIdRequest, global::AF.ECT.Shared.GetWorkflowsByRefIdResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetWorkflowsByRefId",
        __Marshaller_workflow_GetWorkflowsByRefIdRequest,
        __Marshaller_workflow_GetWorkflowsByRefIdResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetWorkflowsByRefIdRequest, global::AF.ECT.Shared.WorkflowByRefIdItem> __Method_GetWorkflowsByRefIdStream = new grpc::Method<global::AF.ECT.Shared.GetWorkflowsByRefIdRequest, global::AF.ECT.Shared.WorkflowByRefIdItem>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetWorkflowsByRefIdStream",
        __Marshaller_workflow_GetWorkflowsByRefIdRequest,
        __Marshaller_workflow_WorkflowByRefIdItem);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetWorkflowsByRefIdAndTypeRequest, global::AF.ECT.Shared.GetWorkflowsByRefIdAndTypeResponse> __Method_GetWorkflowsByRefIdAndType = new grpc::Method<global::AF.ECT.Shared.GetWorkflowsByRefIdAndTypeRequest, global::AF.ECT.Shared.GetWorkflowsByRefIdAndTypeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetWorkflowsByRefIdAndType",
        __Marshaller_workflow_GetWorkflowsByRefIdAndTypeRequest,
        __Marshaller_workflow_GetWorkflowsByRefIdAndTypeResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetWorkflowsByRefIdAndTypeRequest, global::AF.ECT.Shared.WorkflowByRefIdAndTypeItem> __Method_GetWorkflowsByRefIdAndTypeStream = new grpc::Method<global::AF.ECT.Shared.GetWorkflowsByRefIdAndTypeRequest, global::AF.ECT.Shared.WorkflowByRefIdAndTypeItem>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetWorkflowsByRefIdAndTypeStream",
        __Marshaller_workflow_GetWorkflowsByRefIdAndTypeRequest,
        __Marshaller_workflow_WorkflowByRefIdAndTypeItem);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.EmptyRequest, global::AF.ECT.Shared.GetWorkflowTypesResponse> __Method_GetWorkflowTypes = new grpc::Method<global::AF.ECT.Shared.EmptyRequest, global::AF.ECT.Shared.GetWorkflowTypesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetWorkflowTypes",
        __Marshaller_workflow_EmptyRequest,
        __Marshaller_workflow_GetWorkflowTypesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.EmptyRequest, global::AF.ECT.Shared.WorkflowTypeItem> __Method_GetWorkflowTypesStream = new grpc::Method<global::AF.ECT.Shared.EmptyRequest, global::AF.ECT.Shared.WorkflowTypeItem>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetWorkflowTypesStream",
        __Marshaller_workflow_EmptyRequest,
        __Marshaller_workflow_WorkflowTypeItem);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.InsertWorkflowRequest, global::AF.ECT.Shared.InsertWorkflowResponse> __Method_InsertWorkflow = new grpc::Method<global::AF.ECT.Shared.InsertWorkflowRequest, global::AF.ECT.Shared.InsertWorkflowResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "InsertWorkflow",
        __Marshaller_workflow_InsertWorkflowRequest,
        __Marshaller_workflow_InsertWorkflowResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.UpdateWorkflowRequest, global::AF.ECT.Shared.UpdateWorkflowResponse> __Method_UpdateWorkflow = new grpc::Method<global::AF.ECT.Shared.UpdateWorkflowRequest, global::AF.ECT.Shared.UpdateWorkflowResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateWorkflow",
        __Marshaller_workflow_UpdateWorkflowRequest,
        __Marshaller_workflow_UpdateWorkflowResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetWorkstatusByIdRequest, global::AF.ECT.Shared.GetWorkstatusByIdResponse> __Method_GetWorkstatusById = new grpc::Method<global::AF.ECT.Shared.GetWorkstatusByIdRequest, global::AF.ECT.Shared.GetWorkstatusByIdResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetWorkstatusById",
        __Marshaller_workflow_GetWorkstatusByIdRequest,
        __Marshaller_workflow_GetWorkstatusByIdResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetWorkstatusByIdRequest, global::AF.ECT.Shared.WorkstatusByIdItem> __Method_GetWorkstatusByIdStream = new grpc::Method<global::AF.ECT.Shared.GetWorkstatusByIdRequest, global::AF.ECT.Shared.WorkstatusByIdItem>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetWorkstatusByIdStream",
        __Marshaller_workflow_GetWorkstatusByIdRequest,
        __Marshaller_workflow_WorkstatusByIdItem);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetWorkstatusesByRefIdRequest, global::AF.ECT.Shared.GetWorkstatusesByRefIdResponse> __Method_GetWorkstatusesByRefId = new grpc::Method<global::AF.ECT.Shared.GetWorkstatusesByRefIdRequest, global::AF.ECT.Shared.GetWorkstatusesByRefIdResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetWorkstatusesByRefId",
        __Marshaller_workflow_GetWorkstatusesByRefIdRequest,
        __Marshaller_workflow_GetWorkstatusesByRefIdResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetWorkstatusesByRefIdRequest, global::AF.ECT.Shared.WorkstatusByRefIdItem> __Method_GetWorkstatusesByRefIdStream = new grpc::Method<global::AF.ECT.Shared.GetWorkstatusesByRefIdRequest, global::AF.ECT.Shared.WorkstatusByRefIdItem>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetWorkstatusesByRefIdStream",
        __Marshaller_workflow_GetWorkstatusesByRefIdRequest,
        __Marshaller_workflow_WorkstatusByRefIdItem);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetWorkstatusesByRefIdAndTypeRequest, global::AF.ECT.Shared.GetWorkstatusesByRefIdAndTypeResponse> __Method_GetWorkstatusesByRefIdAndType = new grpc::Method<global::AF.ECT.Shared.GetWorkstatusesByRefIdAndTypeRequest, global::AF.ECT.Shared.GetWorkstatusesByRefIdAndTypeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetWorkstatusesByRefIdAndType",
        __Marshaller_workflow_GetWorkstatusesByRefIdAndTypeRequest,
        __Marshaller_workflow_GetWorkstatusesByRefIdAndTypeResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.GetWorkstatusesByRefIdAndTypeRequest, global::AF.ECT.Shared.WorkstatusByRefIdAndTypeItem> __Method_GetWorkstatusesByRefIdAndTypeStream = new grpc::Method<global::AF.ECT.Shared.GetWorkstatusesByRefIdAndTypeRequest, global::AF.ECT.Shared.WorkstatusByRefIdAndTypeItem>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetWorkstatusesByRefIdAndTypeStream",
        __Marshaller_workflow_GetWorkstatusesByRefIdAndTypeRequest,
        __Marshaller_workflow_WorkstatusByRefIdAndTypeItem);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.EmptyRequest, global::AF.ECT.Shared.GetWorkstatusTypesResponse> __Method_GetWorkstatusTypes = new grpc::Method<global::AF.ECT.Shared.EmptyRequest, global::AF.ECT.Shared.GetWorkstatusTypesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetWorkstatusTypes",
        __Marshaller_workflow_EmptyRequest,
        __Marshaller_workflow_GetWorkstatusTypesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.EmptyRequest, global::AF.ECT.Shared.WorkstatusTypeItem> __Method_GetWorkstatusTypesStream = new grpc::Method<global::AF.ECT.Shared.EmptyRequest, global::AF.ECT.Shared.WorkstatusTypeItem>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetWorkstatusTypesStream",
        __Marshaller_workflow_EmptyRequest,
        __Marshaller_workflow_WorkstatusTypeItem);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.InsertWorkstatusRequest, global::AF.ECT.Shared.InsertWorkstatusResponse> __Method_InsertWorkstatus = new grpc::Method<global::AF.ECT.Shared.InsertWorkstatusRequest, global::AF.ECT.Shared.InsertWorkstatusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "InsertWorkstatus",
        __Marshaller_workflow_InsertWorkstatusRequest,
        __Marshaller_workflow_InsertWorkstatusResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AF.ECT.Shared.UpdateWorkstatusRequest, global::AF.ECT.Shared.UpdateWorkstatusResponse> __Method_UpdateWorkstatus = new grpc::Method<global::AF.ECT.Shared.UpdateWorkstatusRequest, global::AF.ECT.Shared.UpdateWorkstatusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateWorkstatus",
        __Marshaller_workflow_UpdateWorkstatusRequest,
        __Marshaller_workflow_UpdateWorkstatusResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::AF.ECT.Shared.WorkflowReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of WorkflowService</summary>
    [grpc::BindServiceMethod(typeof(WorkflowService), "BindService")]
    public abstract partial class WorkflowServiceBase
    {
      /// <summary>
      /// Core User Methods
      /// Retrieves reinvestigation requests for a user, optionally filtered by SARC status.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.GetReinvestigationRequestsResponse> GetReinvestigationRequests(global::AF.ECT.Shared.GetReinvestigationRequestsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves reinvestigation requests for a user as a stream, optionally filtered by SARC status.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task GetReinvestigationRequestsStream(global::AF.ECT.Shared.GetReinvestigationRequestsRequest request, grpc::IServerStreamWriter<global::AF.ECT.Shared.ReinvestigationRequestItem> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves mailing list for LOD based on reference ID, group ID, and status.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.GetMailingListForLODResponse> GetMailingListForLOD(global::AF.ECT.Shared.GetMailingListForLODRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves mailing list for LOD as a stream based on reference ID, group ID, and status.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task GetMailingListForLODStream(global::AF.ECT.Shared.GetMailingListForLODRequest request, grpc::IServerStreamWriter<global::AF.ECT.Shared.MailingListItem> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves managed users based on various filters like user ID, SSN, name, status, role, and unit.
      /// Caching hint: User data may be cached for short periods (5-15 minutes) depending on update frequency.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.GetManagedUsersResponse> GetManagedUsers(global::AF.ECT.Shared.GetManagedUsersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves managed users as a stream based on various filters.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task GetManagedUsersStream(global::AF.ECT.Shared.GetManagedUsersRequest request, grpc::IServerStreamWriter<global::AF.ECT.Shared.ManagedUserItem> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves user ID for a member based on SSN.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.GetMembersUserIdResponse> GetMembersUserId(global::AF.ECT.Shared.GetMembersUserIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves alternative title for a user based on user ID and group ID.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.GetUserAltTitleResponse> GetUserAltTitle(global::AF.ECT.Shared.GetUserAltTitleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves alternative title for a user as a stream based on user ID and group ID.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task GetUserAltTitleStream(global::AF.ECT.Shared.GetUserAltTitleRequest request, grpc::IServerStreamWriter<global::AF.ECT.Shared.UserAltTitleItem> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves alternative title for a user by group component based on group ID and work component.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.GetUserAltTitleByGroupCompoResponse> GetUserAltTitleByGroupCompo(global::AF.ECT.Shared.GetUserAltTitleByGroupCompoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves alternative title for a user by group component as a stream.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task GetUserAltTitleByGroupCompoStream(global::AF.ECT.Shared.GetUserAltTitleByGroupCompoRequest request, grpc::IServerStreamWriter<global::AF.ECT.Shared.UserAltTitleByGroupCompoItem> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves user name based on first and last name.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.GetUserNameResponse> GetUserName(global::AF.ECT.Shared.GetUserNameRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves user name as a stream based on first and last name.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task GetUserNameStream(global::AF.ECT.Shared.GetUserNameRequest request, grpc::IServerStreamWriter<global::AF.ECT.Shared.UserNameItem> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves alternative titles for users by group based on group ID.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.GetUsersAltTitleByGroupResponse> GetUsersAltTitleByGroup(global::AF.ECT.Shared.GetUsersAltTitleByGroupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves alternative titles for users by group as a stream.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task GetUsersAltTitleByGroupStream(global::AF.ECT.Shared.GetUsersAltTitleByGroupRequest request, grpc::IServerStreamWriter<global::AF.ECT.Shared.UsersAltTitleByGroupItem> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves users who are currently online.
      /// Caching hint: Online status changes frequently; use short cache duration (1-5 minutes) or real-time updates.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.GetUsersOnlineResponse> GetUsersOnline(global::AF.ECT.Shared.EmptyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves users who are currently online as a stream.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task GetUsersOnlineStream(global::AF.ECT.Shared.EmptyRequest request, grpc::IServerStreamWriter<global::AF.ECT.Shared.UserOnlineItem> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves whois information as a stream based on user ID.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task GetWhoisStream(global::AF.ECT.Shared.GetWhoisRequest request, grpc::IServerStreamWriter<global::AF.ECT.Shared.WhoisItem> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Checks if a user has HQ tech account as a stream based on origin user ID and EDIPIN.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task HasHQTechAccountStream(global::AF.ECT.Shared.HasHQTechAccountRequest request, grpc::IServerStreamWriter<global::AF.ECT.Shared.HQTechAccountItem> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Checks if a status code is final as a stream based on status ID.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task IsFinalStatusCodeStream(global::AF.ECT.Shared.IsFinalStatusCodeRequest request, grpc::IServerStreamWriter<global::AF.ECT.Shared.FinalStatusCodeItem> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates login information as a stream based on user ID, session ID, and remote address.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task UpdateLoginStream(global::AF.ECT.Shared.UpdateLoginRequest request, grpc::IServerStreamWriter<global::AF.ECT.Shared.LoginUpdateItem> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves whois information based on user ID.
      /// Caching hint: User session data; cache for short duration (5-10 minutes) to balance performance and accuracy.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.GetWhoisResponse> GetWhois(global::AF.ECT.Shared.GetWhoisRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Checks if a user has HQ tech account based on origin user ID and EDIPIN.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.HasHQTechAccountResponse> HasHQTechAccount(global::AF.ECT.Shared.HasHQTechAccountRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Checks if a status code is final based on status ID.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.IsFinalStatusCodeResponse> IsFinalStatusCode(global::AF.ECT.Shared.IsFinalStatusCodeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Logs out a user based on user ID.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.LogoutResponse> Logout(global::AF.ECT.Shared.LogoutRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Registers a new user with details like user ID, work component, email preference, group ID, account status, and expiration date.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.RegisterUserResponse> RegisterUser(global::AF.ECT.Shared.RegisterUserRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Registers a user role with user ID, group ID, and status.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.RegisterUserRoleResponse> RegisterUserRole(global::AF.ECT.Shared.RegisterUserRoleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Searches member data based on user ID, SSN, names, unit, and report view.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.SearchMemberDataResponse> SearchMemberData(global::AF.ECT.Shared.SearchMemberDataRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Searches member data as a stream based on user ID, SSN, names, unit, and report view.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task SearchMemberDataStream(global::AF.ECT.Shared.SearchMemberDataRequest request, grpc::IServerStreamWriter<global::AF.ECT.Shared.MemberDataItem> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Searches member data for testing based on user ID, SSN, name, unit, and report view.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.SearchMemberDataTestResponse> SearchMemberDataTest(global::AF.ECT.Shared.SearchMemberDataTestRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Searches member data for testing as a stream.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task SearchMemberDataTestStream(global::AF.ECT.Shared.SearchMemberDataTestRequest request, grpc::IServerStreamWriter<global::AF.ECT.Shared.MemberDataTestItem> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates account status for a user with status, expiration date, and comment.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.UpdateAccountStatusResponse> UpdateAccountStatus(global::AF.ECT.Shared.UpdateAccountStatusRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates login information based on user ID, session ID, and remote address.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.UpdateLoginResponse> UpdateLogin(global::AF.ECT.Shared.UpdateLoginRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates managed settings for a user with component, role ID, group ID, comment, email preference, and expiration date.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.UpdateManagedSettingsResponse> UpdateManagedSettings(global::AF.ECT.Shared.UpdateManagedSettingsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates alternative title for a user based on user ID, group ID, and new title.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.UpdateUserAltTitleResponse> UpdateUserAltTitle(global::AF.ECT.Shared.UpdateUserAltTitleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Core Workflow Methods
      /// Adds a signature to a workflow with reference ID, module type, user ID, action ID, group ID, status in/out.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.AddSignatureResponse> AddSignature(global::AF.ECT.Shared.AddSignatureRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Copies actions from one workflow step to another.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.CopyActionsResponse> CopyActions(global::AF.ECT.Shared.CopyActionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Copies rules from one workflow to another.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.CopyRulesResponse> CopyRules(global::AF.ECT.Shared.CopyRulesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Copies a workflow from one ID to another.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.CopyWorkflowResponse> CopyWorkflow(global::AF.ECT.Shared.CopyWorkflowRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a status code by its ID.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.DeleteStatusCodeResponse> DeleteStatusCode(global::AF.ECT.Shared.DeleteStatusCodeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves actions by step ID.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.GetActionsByStepResponse> GetActionsByStep(global::AF.ECT.Shared.GetActionsByStepRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves active cases based on reference ID and group ID.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.GetActiveCasesResponse> GetActiveCases(global::AF.ECT.Shared.GetActiveCasesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves all findings by reason of.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.GetAllFindingByReasonOfResponse> GetAllFindingByReasonOf(global::AF.ECT.Shared.EmptyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves all locks.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.GetAllLocksResponse> GetAllLocks(global::AF.ECT.Shared.EmptyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves cancel reasons for a workflow, optionally formal.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.GetCancelReasonsResponse> GetCancelReasons(global::AF.ECT.Shared.GetCancelReasonsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves creatable workflows by group based on component, module, and group ID.
      /// Caching hint: Creatable workflows by group; cache for 15-30 minutes depending on workflow creation frequency.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.GetCreatableByGroupResponse> GetCreatableByGroup(global::AF.ECT.Shared.GetCreatableByGroupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves finding by reason of by ID.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.GetFindingByReasonOfByIdResponse> GetFindingByReasonOfById(global::AF.ECT.Shared.GetFindingByReasonOfByIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves findings for a workflow based on workflow ID and group ID.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.GetFindingsResponse> GetFindings(global::AF.ECT.Shared.GetFindingsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves module from workflow by workflow ID.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.GetModuleFromWorkflowResponse> GetModuleFromWorkflow(global::AF.ECT.Shared.GetModuleFromWorkflowRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves page access by group based on workflow, status, and group.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.GetPageAccessByGroupResponse> GetPageAccessByGroup(global::AF.ECT.Shared.GetPageAccessByGroupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves page access by workflow view based on component, workflow, and status.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.GetPageAccessByWorkflowViewResponse> GetPageAccessByWorkflowView(global::AF.ECT.Shared.GetPageAccessByWorkflowViewRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves pages by workflow ID.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.GetPagesByWorkflowIdResponse> GetPagesByWorkflowId(global::AF.ECT.Shared.GetPagesByWorkflowIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves permissions for a workflow.
      /// Caching hint: Permissions change infrequently per user/role; consider caching for 15-30 minutes.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.GetPermissionsResponse> GetPermissions(global::AF.ECT.Shared.GetPermissionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves permissions by component for a workflow.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.GetPermissionsByCompoResponse> GetPermissionsByCompo(global::AF.ECT.Shared.GetPermissionsByCompoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves return reasons for a workflow.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.GetReturnReasonsResponse> GetReturnReasons(global::AF.ECT.Shared.GetReturnReasonsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves RWoA reasons for a workflow.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.GetRwoaReasonsResponse> GetRwoaReasons(global::AF.ECT.Shared.GetRwoaReasonsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves status codes by component.
      /// Caching hint: Status codes change infrequently; consider caching for 1 hour.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.GetStatusCodesByCompoResponse> GetStatusCodesByCompo(global::AF.ECT.Shared.GetStatusCodesByCompoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves status codes by component and module.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.GetStatusCodesByCompoAndModuleResponse> GetStatusCodesByCompoAndModule(global::AF.ECT.Shared.GetStatusCodesByCompoAndModuleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves status codes by sign code based on group ID and module.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.GetStatusCodesBySignCodeResponse> GetStatusCodesBySignCode(global::AF.ECT.Shared.GetStatusCodesBySignCodeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves status codes by workflow.
      /// Caching hint: Status codes per workflow; cache for 30-60 minutes if status codes are stable.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.GetStatusCodesByWorkflowResponse> GetStatusCodesByWorkflow(global::AF.ECT.Shared.GetStatusCodesByWorkflowRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves status codes by workflow and access scope.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.GetStatusCodesByWorkflowAndAccessScopeResponse> GetStatusCodesByWorkflowAndAccessScope(global::AF.ECT.Shared.GetStatusCodesByWorkflowAndAccessScopeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves status code scope by status ID.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.GetStatusCodeScopeResponse> GetStatusCodeScope(global::AF.ECT.Shared.GetStatusCodeScopeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves steps by workflow.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.GetStepsByWorkflowResponse> GetStepsByWorkflow(global::AF.ECT.Shared.GetStepsByWorkflowRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves steps by workflow and status, optionally with death status.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.GetStepsByWorkflowAndStatusResponse> GetStepsByWorkflowAndStatus(global::AF.ECT.Shared.GetStepsByWorkflowAndStatusRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves viewable workflows by group based on group ID and module.
      /// Caching hint: Viewable workflows by group; cache for 10-20 minutes if permissions change moderately.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.GetViewableByGroupResponse> GetViewableByGroup(global::AF.ECT.Shared.GetViewableByGroupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves workflows by component based on component and user ID.
      /// Caching hint: Workflow lists by component; cache for 10-15 minutes if workflows don't change often.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.GetWorkflowByCompoResponse> GetWorkflowByCompo(global::AF.ECT.Shared.GetWorkflowByCompoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves workflows from module by module ID.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.GetWorkflowFromModuleResponse> GetWorkflowFromModule(global::AF.ECT.Shared.GetWorkflowFromModuleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves initial status code for a workflow based on component, module, and workflow ID.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.GetWorkflowInitialStatusCodeResponse> GetWorkflowInitialStatusCode(global::AF.ECT.Shared.GetWorkflowInitialStatusCodeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves workflow title based on module ID and sub-case.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.GetWorkflowTitleResponse> GetWorkflowTitle(global::AF.ECT.Shared.GetWorkflowTitleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves workflow title by work status ID based on workflow ID and sub-case.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.GetWorkflowTitleByWorkStatusIdResponse> GetWorkflowTitleByWorkStatusId(global::AF.ECT.Shared.GetWorkflowTitleByWorkStatusIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Inserts a new action with type, step ID, target, and data.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.InsertActionResponse> InsertAction(global::AF.ECT.Shared.InsertActionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Inserts an option action with type, WSOID, target, and data.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.InsertOptionActionResponse> InsertOptionAction(global::AF.ECT.Shared.InsertOptionActionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Adds a signature as a stream.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task AddSignatureStream(global::AF.ECT.Shared.AddSignatureRequest request, grpc::IServerStreamWriter<global::AF.ECT.Shared.SignatureItem> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Copies a workflow as a stream.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task CopyWorkflowStream(global::AF.ECT.Shared.CopyWorkflowRequest request, grpc::IServerStreamWriter<global::AF.ECT.Shared.WorkflowCopyItem> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves actions by step as a stream.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task GetActionsByStepStream(global::AF.ECT.Shared.GetActionsByStepRequest request, grpc::IServerStreamWriter<global::AF.ECT.Shared.ActionByStepItem> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves active cases as a stream.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task GetActiveCasesStream(global::AF.ECT.Shared.GetActiveCasesRequest request, grpc::IServerStreamWriter<global::AF.ECT.Shared.ActiveCaseItem> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves all findings by reason of as a stream.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task GetAllFindingByReasonOfStream(global::AF.ECT.Shared.EmptyRequest request, grpc::IServerStreamWriter<global::AF.ECT.Shared.FindingByReasonOfItem> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves all locks as a stream.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task GetAllLocksStream(global::AF.ECT.Shared.EmptyRequest request, grpc::IServerStreamWriter<global::AF.ECT.Shared.LockItem> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves cancel reasons as a stream.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task GetCancelReasonsStream(global::AF.ECT.Shared.GetCancelReasonsRequest request, grpc::IServerStreamWriter<global::AF.ECT.Shared.CancelReasonItem> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves creatable by group as a stream.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task GetCreatableByGroupStream(global::AF.ECT.Shared.GetCreatableByGroupRequest request, grpc::IServerStreamWriter<global::AF.ECT.Shared.CreatableByGroupItem> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves finding by reason of by ID as a stream.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task GetFindingByReasonOfByIdStream(global::AF.ECT.Shared.GetFindingByReasonOfByIdRequest request, grpc::IServerStreamWriter<global::AF.ECT.Shared.FindingByReasonOfByIdItem> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves findings as a stream.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task GetFindingsStream(global::AF.ECT.Shared.GetFindingsRequest request, grpc::IServerStreamWriter<global::AF.ECT.Shared.FindingItem> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves module from workflow as a stream.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task GetModuleFromWorkflowStream(global::AF.ECT.Shared.GetModuleFromWorkflowRequest request, grpc::IServerStreamWriter<global::AF.ECT.Shared.ModuleFromWorkflowItem> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves page access by group as a stream.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task GetPageAccessByGroupStream(global::AF.ECT.Shared.GetPageAccessByGroupRequest request, grpc::IServerStreamWriter<global::AF.ECT.Shared.PageAccessByGroupItem> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves page access by workflow view as a stream.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task GetPageAccessByWorkflowViewStream(global::AF.ECT.Shared.GetPageAccessByWorkflowViewRequest request, grpc::IServerStreamWriter<global::AF.ECT.Shared.PageAccessByWorkflowViewItem> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves pages by workflow ID as a stream.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task GetPagesByWorkflowIdStream(global::AF.ECT.Shared.GetPagesByWorkflowIdRequest request, grpc::IServerStreamWriter<global::AF.ECT.Shared.PageByWorkflowItem> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves permissions as a stream.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task GetPermissionsStream(global::AF.ECT.Shared.GetPermissionsRequest request, grpc::IServerStreamWriter<global::AF.ECT.Shared.PermissionItem> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves permissions by component as a stream.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task GetPermissionsByCompoStream(global::AF.ECT.Shared.GetPermissionsByCompoRequest request, grpc::IServerStreamWriter<global::AF.ECT.Shared.PermissionByCompoItem> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves return reasons as a stream.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task GetReturnReasonsStream(global::AF.ECT.Shared.GetReturnReasonsRequest request, grpc::IServerStreamWriter<global::AF.ECT.Shared.ReturnReasonItem> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves RWoA reasons as a stream.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task GetRwoaReasonsStream(global::AF.ECT.Shared.GetRwoaReasonsRequest request, grpc::IServerStreamWriter<global::AF.ECT.Shared.RwoaReasonItem> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves status codes by component as a stream.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task GetStatusCodesByCompoStream(global::AF.ECT.Shared.GetStatusCodesByCompoRequest request, grpc::IServerStreamWriter<global::AF.ECT.Shared.StatusCodeByCompoItem> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves status codes by component and module as a stream.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task GetStatusCodesByCompoAndModuleStream(global::AF.ECT.Shared.GetStatusCodesByCompoAndModuleRequest request, grpc::IServerStreamWriter<global::AF.ECT.Shared.StatusCodeByCompoAndModuleItem> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves status codes by sign code as a stream.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task GetStatusCodesBySignCodeStream(global::AF.ECT.Shared.GetStatusCodesBySignCodeRequest request, grpc::IServerStreamWriter<global::AF.ECT.Shared.StatusCodeBySignCodeItem> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves status codes by workflow as a stream.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task GetStatusCodesByWorkflowStream(global::AF.ECT.Shared.GetStatusCodesByWorkflowRequest request, grpc::IServerStreamWriter<global::AF.ECT.Shared.StatusCodeByWorkflowItem> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves status codes by workflow and access scope as a stream.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task GetStatusCodesByWorkflowAndAccessScopeStream(global::AF.ECT.Shared.GetStatusCodesByWorkflowAndAccessScopeRequest request, grpc::IServerStreamWriter<global::AF.ECT.Shared.StatusCodeByWorkflowAndAccessScopeItem> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves status code scope as a stream.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task GetStatusCodeScopeStream(global::AF.ECT.Shared.GetStatusCodeScopeRequest request, grpc::IServerStreamWriter<global::AF.ECT.Shared.StatusCodeScopeItem> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves steps by workflow as a stream.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task GetStepsByWorkflowStream(global::AF.ECT.Shared.GetStepsByWorkflowRequest request, grpc::IServerStreamWriter<global::AF.ECT.Shared.StepByWorkflowItem> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves steps by workflow and status as a stream.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task GetStepsByWorkflowAndStatusStream(global::AF.ECT.Shared.GetStepsByWorkflowAndStatusRequest request, grpc::IServerStreamWriter<global::AF.ECT.Shared.StepByWorkflowAndStatusItem> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves viewable by group as a stream.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task GetViewableByGroupStream(global::AF.ECT.Shared.GetViewableByGroupRequest request, grpc::IServerStreamWriter<global::AF.ECT.Shared.ViewableByGroupItem> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves workflow by component as a stream.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task GetWorkflowByCompoStream(global::AF.ECT.Shared.GetWorkflowByCompoRequest request, grpc::IServerStreamWriter<global::AF.ECT.Shared.WorkflowByCompoItem> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves workflow from module as a stream.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task GetWorkflowFromModuleStream(global::AF.ECT.Shared.GetWorkflowFromModuleRequest request, grpc::IServerStreamWriter<global::AF.ECT.Shared.WorkflowFromModuleItem> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves workflow initial status code as a stream.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task GetWorkflowInitialStatusCodeStream(global::AF.ECT.Shared.GetWorkflowInitialStatusCodeRequest request, grpc::IServerStreamWriter<global::AF.ECT.Shared.WorkflowInitialStatusCodeItem> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves workflow title as a stream.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task GetWorkflowTitleStream(global::AF.ECT.Shared.GetWorkflowTitleRequest request, grpc::IServerStreamWriter<global::AF.ECT.Shared.WorkflowTitleItem> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves workflow title by work status ID as a stream.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task GetWorkflowTitleByWorkStatusIdStream(global::AF.ECT.Shared.GetWorkflowTitleByWorkStatusIdRequest request, grpc::IServerStreamWriter<global::AF.ECT.Shared.WorkflowTitleByWorkStatusIdItem> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Inserts an action as a stream.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task InsertActionStream(global::AF.ECT.Shared.InsertActionRequest request, grpc::IServerStreamWriter<global::AF.ECT.Shared.InsertActionItem> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Inserts an option action as a stream.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task InsertOptionActionStream(global::AF.ECT.Shared.InsertOptionActionRequest request, grpc::IServerStreamWriter<global::AF.ECT.Shared.InsertOptionActionItem> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Application Warmup Process Methods
      /// Deletes a log entry by ID.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.DeleteLogByIdResponse> DeleteLogById(global::AF.ECT.Shared.DeleteLogByIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Finds the last execution date of a process.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.FindProcessLastExecutionDateResponse> FindProcessLastExecutionDate(global::AF.ECT.Shared.FindProcessLastExecutionDateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Finds the last execution date of a process as a stream.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task FindProcessLastExecutionDateStream(global::AF.ECT.Shared.FindProcessLastExecutionDateRequest request, grpc::IServerStreamWriter<global::AF.ECT.Shared.ProcessLastExecutionDateItem> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves all log entries.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.GetAllLogsResponse> GetAllLogs(global::AF.ECT.Shared.EmptyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves all log entries as a stream.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task GetAllLogsStream(global::AF.ECT.Shared.EmptyRequest request, grpc::IServerStreamWriter<global::AF.ECT.Shared.LogItem> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Inserts a new log entry with process name, execution date, and message.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.InsertLogResponse> InsertLog(global::AF.ECT.Shared.InsertLogRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Checks if a process is active.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.IsProcessActiveResponse> IsProcessActive(global::AF.ECT.Shared.IsProcessActiveRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Checks if a process is active as a stream.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task IsProcessActiveStream(global::AF.ECT.Shared.IsProcessActiveRequest request, grpc::IServerStreamWriter<global::AF.ECT.Shared.ProcessActiveItem> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Workflow Methods
      /// Retrieves a workflow by its ID.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.GetWorkflowByIdResponse> GetWorkflowById(global::AF.ECT.Shared.GetWorkflowByIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves a workflow by its ID as a stream.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task GetWorkflowByIdStream(global::AF.ECT.Shared.GetWorkflowByIdRequest request, grpc::IServerStreamWriter<global::AF.ECT.Shared.WorkflowByIdItem> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves workflows by reference ID and optionally module.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.GetWorkflowsByRefIdResponse> GetWorkflowsByRefId(global::AF.ECT.Shared.GetWorkflowsByRefIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves workflows by reference ID as a stream.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task GetWorkflowsByRefIdStream(global::AF.ECT.Shared.GetWorkflowsByRefIdRequest request, grpc::IServerStreamWriter<global::AF.ECT.Shared.WorkflowByRefIdItem> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves workflows by reference ID, module, and workflow type.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.GetWorkflowsByRefIdAndTypeResponse> GetWorkflowsByRefIdAndType(global::AF.ECT.Shared.GetWorkflowsByRefIdAndTypeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves workflows by reference ID and type as a stream.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task GetWorkflowsByRefIdAndTypeStream(global::AF.ECT.Shared.GetWorkflowsByRefIdAndTypeRequest request, grpc::IServerStreamWriter<global::AF.ECT.Shared.WorkflowByRefIdAndTypeItem> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves all workflow types.
      /// Caching hint: Workflow types are static reference data; cache for extended periods (1-24 hours).
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.GetWorkflowTypesResponse> GetWorkflowTypes(global::AF.ECT.Shared.EmptyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves all workflow types as a stream.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task GetWorkflowTypesStream(global::AF.ECT.Shared.EmptyRequest request, grpc::IServerStreamWriter<global::AF.ECT.Shared.WorkflowTypeItem> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Inserts a new workflow with reference ID, module, type, text, and user ID.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.InsertWorkflowResponse> InsertWorkflow(global::AF.ECT.Shared.InsertWorkflowRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates an existing workflow with new text and user ID.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.UpdateWorkflowResponse> UpdateWorkflow(global::AF.ECT.Shared.UpdateWorkflowRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Workstatus Methods
      /// Retrieves a workstatus by its ID.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.GetWorkstatusByIdResponse> GetWorkstatusById(global::AF.ECT.Shared.GetWorkstatusByIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves a workstatus by its ID as a stream.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task GetWorkstatusByIdStream(global::AF.ECT.Shared.GetWorkstatusByIdRequest request, grpc::IServerStreamWriter<global::AF.ECT.Shared.WorkstatusByIdItem> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves workstatuses by reference ID and optionally module.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.GetWorkstatusesByRefIdResponse> GetWorkstatusesByRefId(global::AF.ECT.Shared.GetWorkstatusesByRefIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves workstatuses by reference ID as a stream.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task GetWorkstatusesByRefIdStream(global::AF.ECT.Shared.GetWorkstatusesByRefIdRequest request, grpc::IServerStreamWriter<global::AF.ECT.Shared.WorkstatusByRefIdItem> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves workstatuses by reference ID, module, and workstatus type.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.GetWorkstatusesByRefIdAndTypeResponse> GetWorkstatusesByRefIdAndType(global::AF.ECT.Shared.GetWorkstatusesByRefIdAndTypeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves workstatuses by reference ID and type as a stream.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task GetWorkstatusesByRefIdAndTypeStream(global::AF.ECT.Shared.GetWorkstatusesByRefIdAndTypeRequest request, grpc::IServerStreamWriter<global::AF.ECT.Shared.WorkstatusByRefIdAndTypeItem> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves all workstatus types.
      /// Caching hint: Workstatus types are static reference data; cache for extended periods (1-24 hours).
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.GetWorkstatusTypesResponse> GetWorkstatusTypes(global::AF.ECT.Shared.EmptyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves all workstatus types as a stream.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task GetWorkstatusTypesStream(global::AF.ECT.Shared.EmptyRequest request, grpc::IServerStreamWriter<global::AF.ECT.Shared.WorkstatusTypeItem> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Inserts a new workstatus with reference ID, module, type, text, and user ID.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.InsertWorkstatusResponse> InsertWorkstatus(global::AF.ECT.Shared.InsertWorkstatusRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates an existing workstatus with new text and user ID.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AF.ECT.Shared.UpdateWorkstatusResponse> UpdateWorkstatus(global::AF.ECT.Shared.UpdateWorkstatusRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for WorkflowService</summary>
    public partial class WorkflowServiceClient : grpc::ClientBase<WorkflowServiceClient>
    {
      /// <summary>Creates a new client for WorkflowService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public WorkflowServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for WorkflowService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public WorkflowServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected WorkflowServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected WorkflowServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Core User Methods
      /// Retrieves reinvestigation requests for a user, optionally filtered by SARC status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetReinvestigationRequestsResponse GetReinvestigationRequests(global::AF.ECT.Shared.GetReinvestigationRequestsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetReinvestigationRequests(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Core User Methods
      /// Retrieves reinvestigation requests for a user, optionally filtered by SARC status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetReinvestigationRequestsResponse GetReinvestigationRequests(global::AF.ECT.Shared.GetReinvestigationRequestsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetReinvestigationRequests, null, options, request);
      }
      /// <summary>
      /// Core User Methods
      /// Retrieves reinvestigation requests for a user, optionally filtered by SARC status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetReinvestigationRequestsResponse> GetReinvestigationRequestsAsync(global::AF.ECT.Shared.GetReinvestigationRequestsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetReinvestigationRequestsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Core User Methods
      /// Retrieves reinvestigation requests for a user, optionally filtered by SARC status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetReinvestigationRequestsResponse> GetReinvestigationRequestsAsync(global::AF.ECT.Shared.GetReinvestigationRequestsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetReinvestigationRequests, null, options, request);
      }
      /// <summary>
      /// Retrieves reinvestigation requests for a user as a stream, optionally filtered by SARC status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.ReinvestigationRequestItem> GetReinvestigationRequestsStream(global::AF.ECT.Shared.GetReinvestigationRequestsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetReinvestigationRequestsStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves reinvestigation requests for a user as a stream, optionally filtered by SARC status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.ReinvestigationRequestItem> GetReinvestigationRequestsStream(global::AF.ECT.Shared.GetReinvestigationRequestsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetReinvestigationRequestsStream, null, options, request);
      }
      /// <summary>
      /// Retrieves mailing list for LOD based on reference ID, group ID, and status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetMailingListForLODResponse GetMailingListForLOD(global::AF.ECT.Shared.GetMailingListForLODRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMailingListForLOD(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves mailing list for LOD based on reference ID, group ID, and status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetMailingListForLODResponse GetMailingListForLOD(global::AF.ECT.Shared.GetMailingListForLODRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMailingListForLOD, null, options, request);
      }
      /// <summary>
      /// Retrieves mailing list for LOD based on reference ID, group ID, and status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetMailingListForLODResponse> GetMailingListForLODAsync(global::AF.ECT.Shared.GetMailingListForLODRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMailingListForLODAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves mailing list for LOD based on reference ID, group ID, and status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetMailingListForLODResponse> GetMailingListForLODAsync(global::AF.ECT.Shared.GetMailingListForLODRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMailingListForLOD, null, options, request);
      }
      /// <summary>
      /// Retrieves mailing list for LOD as a stream based on reference ID, group ID, and status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.MailingListItem> GetMailingListForLODStream(global::AF.ECT.Shared.GetMailingListForLODRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMailingListForLODStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves mailing list for LOD as a stream based on reference ID, group ID, and status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.MailingListItem> GetMailingListForLODStream(global::AF.ECT.Shared.GetMailingListForLODRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetMailingListForLODStream, null, options, request);
      }
      /// <summary>
      /// Retrieves managed users based on various filters like user ID, SSN, name, status, role, and unit.
      /// Caching hint: User data may be cached for short periods (5-15 minutes) depending on update frequency.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetManagedUsersResponse GetManagedUsers(global::AF.ECT.Shared.GetManagedUsersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetManagedUsers(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves managed users based on various filters like user ID, SSN, name, status, role, and unit.
      /// Caching hint: User data may be cached for short periods (5-15 minutes) depending on update frequency.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetManagedUsersResponse GetManagedUsers(global::AF.ECT.Shared.GetManagedUsersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetManagedUsers, null, options, request);
      }
      /// <summary>
      /// Retrieves managed users based on various filters like user ID, SSN, name, status, role, and unit.
      /// Caching hint: User data may be cached for short periods (5-15 minutes) depending on update frequency.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetManagedUsersResponse> GetManagedUsersAsync(global::AF.ECT.Shared.GetManagedUsersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetManagedUsersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves managed users based on various filters like user ID, SSN, name, status, role, and unit.
      /// Caching hint: User data may be cached for short periods (5-15 minutes) depending on update frequency.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetManagedUsersResponse> GetManagedUsersAsync(global::AF.ECT.Shared.GetManagedUsersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetManagedUsers, null, options, request);
      }
      /// <summary>
      /// Retrieves managed users as a stream based on various filters.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.ManagedUserItem> GetManagedUsersStream(global::AF.ECT.Shared.GetManagedUsersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetManagedUsersStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves managed users as a stream based on various filters.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.ManagedUserItem> GetManagedUsersStream(global::AF.ECT.Shared.GetManagedUsersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetManagedUsersStream, null, options, request);
      }
      /// <summary>
      /// Retrieves user ID for a member based on SSN.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetMembersUserIdResponse GetMembersUserId(global::AF.ECT.Shared.GetMembersUserIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMembersUserId(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves user ID for a member based on SSN.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetMembersUserIdResponse GetMembersUserId(global::AF.ECT.Shared.GetMembersUserIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMembersUserId, null, options, request);
      }
      /// <summary>
      /// Retrieves user ID for a member based on SSN.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetMembersUserIdResponse> GetMembersUserIdAsync(global::AF.ECT.Shared.GetMembersUserIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMembersUserIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves user ID for a member based on SSN.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetMembersUserIdResponse> GetMembersUserIdAsync(global::AF.ECT.Shared.GetMembersUserIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMembersUserId, null, options, request);
      }
      /// <summary>
      /// Retrieves alternative title for a user based on user ID and group ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetUserAltTitleResponse GetUserAltTitle(global::AF.ECT.Shared.GetUserAltTitleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUserAltTitle(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves alternative title for a user based on user ID and group ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetUserAltTitleResponse GetUserAltTitle(global::AF.ECT.Shared.GetUserAltTitleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetUserAltTitle, null, options, request);
      }
      /// <summary>
      /// Retrieves alternative title for a user based on user ID and group ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetUserAltTitleResponse> GetUserAltTitleAsync(global::AF.ECT.Shared.GetUserAltTitleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUserAltTitleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves alternative title for a user based on user ID and group ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetUserAltTitleResponse> GetUserAltTitleAsync(global::AF.ECT.Shared.GetUserAltTitleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetUserAltTitle, null, options, request);
      }
      /// <summary>
      /// Retrieves alternative title for a user as a stream based on user ID and group ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.UserAltTitleItem> GetUserAltTitleStream(global::AF.ECT.Shared.GetUserAltTitleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUserAltTitleStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves alternative title for a user as a stream based on user ID and group ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.UserAltTitleItem> GetUserAltTitleStream(global::AF.ECT.Shared.GetUserAltTitleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetUserAltTitleStream, null, options, request);
      }
      /// <summary>
      /// Retrieves alternative title for a user by group component based on group ID and work component.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetUserAltTitleByGroupCompoResponse GetUserAltTitleByGroupCompo(global::AF.ECT.Shared.GetUserAltTitleByGroupCompoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUserAltTitleByGroupCompo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves alternative title for a user by group component based on group ID and work component.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetUserAltTitleByGroupCompoResponse GetUserAltTitleByGroupCompo(global::AF.ECT.Shared.GetUserAltTitleByGroupCompoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetUserAltTitleByGroupCompo, null, options, request);
      }
      /// <summary>
      /// Retrieves alternative title for a user by group component based on group ID and work component.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetUserAltTitleByGroupCompoResponse> GetUserAltTitleByGroupCompoAsync(global::AF.ECT.Shared.GetUserAltTitleByGroupCompoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUserAltTitleByGroupCompoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves alternative title for a user by group component based on group ID and work component.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetUserAltTitleByGroupCompoResponse> GetUserAltTitleByGroupCompoAsync(global::AF.ECT.Shared.GetUserAltTitleByGroupCompoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetUserAltTitleByGroupCompo, null, options, request);
      }
      /// <summary>
      /// Retrieves alternative title for a user by group component as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.UserAltTitleByGroupCompoItem> GetUserAltTitleByGroupCompoStream(global::AF.ECT.Shared.GetUserAltTitleByGroupCompoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUserAltTitleByGroupCompoStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves alternative title for a user by group component as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.UserAltTitleByGroupCompoItem> GetUserAltTitleByGroupCompoStream(global::AF.ECT.Shared.GetUserAltTitleByGroupCompoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetUserAltTitleByGroupCompoStream, null, options, request);
      }
      /// <summary>
      /// Retrieves user name based on first and last name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetUserNameResponse GetUserName(global::AF.ECT.Shared.GetUserNameRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUserName(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves user name based on first and last name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetUserNameResponse GetUserName(global::AF.ECT.Shared.GetUserNameRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetUserName, null, options, request);
      }
      /// <summary>
      /// Retrieves user name based on first and last name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetUserNameResponse> GetUserNameAsync(global::AF.ECT.Shared.GetUserNameRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUserNameAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves user name based on first and last name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetUserNameResponse> GetUserNameAsync(global::AF.ECT.Shared.GetUserNameRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetUserName, null, options, request);
      }
      /// <summary>
      /// Retrieves user name as a stream based on first and last name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.UserNameItem> GetUserNameStream(global::AF.ECT.Shared.GetUserNameRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUserNameStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves user name as a stream based on first and last name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.UserNameItem> GetUserNameStream(global::AF.ECT.Shared.GetUserNameRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetUserNameStream, null, options, request);
      }
      /// <summary>
      /// Retrieves alternative titles for users by group based on group ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetUsersAltTitleByGroupResponse GetUsersAltTitleByGroup(global::AF.ECT.Shared.GetUsersAltTitleByGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUsersAltTitleByGroup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves alternative titles for users by group based on group ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetUsersAltTitleByGroupResponse GetUsersAltTitleByGroup(global::AF.ECT.Shared.GetUsersAltTitleByGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetUsersAltTitleByGroup, null, options, request);
      }
      /// <summary>
      /// Retrieves alternative titles for users by group based on group ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetUsersAltTitleByGroupResponse> GetUsersAltTitleByGroupAsync(global::AF.ECT.Shared.GetUsersAltTitleByGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUsersAltTitleByGroupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves alternative titles for users by group based on group ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetUsersAltTitleByGroupResponse> GetUsersAltTitleByGroupAsync(global::AF.ECT.Shared.GetUsersAltTitleByGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetUsersAltTitleByGroup, null, options, request);
      }
      /// <summary>
      /// Retrieves alternative titles for users by group as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.UsersAltTitleByGroupItem> GetUsersAltTitleByGroupStream(global::AF.ECT.Shared.GetUsersAltTitleByGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUsersAltTitleByGroupStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves alternative titles for users by group as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.UsersAltTitleByGroupItem> GetUsersAltTitleByGroupStream(global::AF.ECT.Shared.GetUsersAltTitleByGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetUsersAltTitleByGroupStream, null, options, request);
      }
      /// <summary>
      /// Retrieves users who are currently online.
      /// Caching hint: Online status changes frequently; use short cache duration (1-5 minutes) or real-time updates.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetUsersOnlineResponse GetUsersOnline(global::AF.ECT.Shared.EmptyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUsersOnline(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves users who are currently online.
      /// Caching hint: Online status changes frequently; use short cache duration (1-5 minutes) or real-time updates.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetUsersOnlineResponse GetUsersOnline(global::AF.ECT.Shared.EmptyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetUsersOnline, null, options, request);
      }
      /// <summary>
      /// Retrieves users who are currently online.
      /// Caching hint: Online status changes frequently; use short cache duration (1-5 minutes) or real-time updates.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetUsersOnlineResponse> GetUsersOnlineAsync(global::AF.ECT.Shared.EmptyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUsersOnlineAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves users who are currently online.
      /// Caching hint: Online status changes frequently; use short cache duration (1-5 minutes) or real-time updates.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetUsersOnlineResponse> GetUsersOnlineAsync(global::AF.ECT.Shared.EmptyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetUsersOnline, null, options, request);
      }
      /// <summary>
      /// Retrieves users who are currently online as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.UserOnlineItem> GetUsersOnlineStream(global::AF.ECT.Shared.EmptyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUsersOnlineStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves users who are currently online as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.UserOnlineItem> GetUsersOnlineStream(global::AF.ECT.Shared.EmptyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetUsersOnlineStream, null, options, request);
      }
      /// <summary>
      /// Retrieves whois information as a stream based on user ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.WhoisItem> GetWhoisStream(global::AF.ECT.Shared.GetWhoisRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWhoisStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves whois information as a stream based on user ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.WhoisItem> GetWhoisStream(global::AF.ECT.Shared.GetWhoisRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetWhoisStream, null, options, request);
      }
      /// <summary>
      /// Checks if a user has HQ tech account as a stream based on origin user ID and EDIPIN.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.HQTechAccountItem> HasHQTechAccountStream(global::AF.ECT.Shared.HasHQTechAccountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return HasHQTechAccountStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Checks if a user has HQ tech account as a stream based on origin user ID and EDIPIN.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.HQTechAccountItem> HasHQTechAccountStream(global::AF.ECT.Shared.HasHQTechAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_HasHQTechAccountStream, null, options, request);
      }
      /// <summary>
      /// Checks if a status code is final as a stream based on status ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.FinalStatusCodeItem> IsFinalStatusCodeStream(global::AF.ECT.Shared.IsFinalStatusCodeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IsFinalStatusCodeStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Checks if a status code is final as a stream based on status ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.FinalStatusCodeItem> IsFinalStatusCodeStream(global::AF.ECT.Shared.IsFinalStatusCodeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_IsFinalStatusCodeStream, null, options, request);
      }
      /// <summary>
      /// Updates login information as a stream based on user ID, session ID, and remote address.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.LoginUpdateItem> UpdateLoginStream(global::AF.ECT.Shared.UpdateLoginRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateLoginStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates login information as a stream based on user ID, session ID, and remote address.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.LoginUpdateItem> UpdateLoginStream(global::AF.ECT.Shared.UpdateLoginRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_UpdateLoginStream, null, options, request);
      }
      /// <summary>
      /// Retrieves whois information based on user ID.
      /// Caching hint: User session data; cache for short duration (5-10 minutes) to balance performance and accuracy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetWhoisResponse GetWhois(global::AF.ECT.Shared.GetWhoisRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWhois(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves whois information based on user ID.
      /// Caching hint: User session data; cache for short duration (5-10 minutes) to balance performance and accuracy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetWhoisResponse GetWhois(global::AF.ECT.Shared.GetWhoisRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetWhois, null, options, request);
      }
      /// <summary>
      /// Retrieves whois information based on user ID.
      /// Caching hint: User session data; cache for short duration (5-10 minutes) to balance performance and accuracy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetWhoisResponse> GetWhoisAsync(global::AF.ECT.Shared.GetWhoisRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWhoisAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves whois information based on user ID.
      /// Caching hint: User session data; cache for short duration (5-10 minutes) to balance performance and accuracy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetWhoisResponse> GetWhoisAsync(global::AF.ECT.Shared.GetWhoisRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetWhois, null, options, request);
      }
      /// <summary>
      /// Checks if a user has HQ tech account based on origin user ID and EDIPIN.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.HasHQTechAccountResponse HasHQTechAccount(global::AF.ECT.Shared.HasHQTechAccountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return HasHQTechAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Checks if a user has HQ tech account based on origin user ID and EDIPIN.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.HasHQTechAccountResponse HasHQTechAccount(global::AF.ECT.Shared.HasHQTechAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_HasHQTechAccount, null, options, request);
      }
      /// <summary>
      /// Checks if a user has HQ tech account based on origin user ID and EDIPIN.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.HasHQTechAccountResponse> HasHQTechAccountAsync(global::AF.ECT.Shared.HasHQTechAccountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return HasHQTechAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Checks if a user has HQ tech account based on origin user ID and EDIPIN.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.HasHQTechAccountResponse> HasHQTechAccountAsync(global::AF.ECT.Shared.HasHQTechAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_HasHQTechAccount, null, options, request);
      }
      /// <summary>
      /// Checks if a status code is final based on status ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.IsFinalStatusCodeResponse IsFinalStatusCode(global::AF.ECT.Shared.IsFinalStatusCodeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IsFinalStatusCode(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Checks if a status code is final based on status ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.IsFinalStatusCodeResponse IsFinalStatusCode(global::AF.ECT.Shared.IsFinalStatusCodeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_IsFinalStatusCode, null, options, request);
      }
      /// <summary>
      /// Checks if a status code is final based on status ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.IsFinalStatusCodeResponse> IsFinalStatusCodeAsync(global::AF.ECT.Shared.IsFinalStatusCodeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IsFinalStatusCodeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Checks if a status code is final based on status ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.IsFinalStatusCodeResponse> IsFinalStatusCodeAsync(global::AF.ECT.Shared.IsFinalStatusCodeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_IsFinalStatusCode, null, options, request);
      }
      /// <summary>
      /// Logs out a user based on user ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.LogoutResponse Logout(global::AF.ECT.Shared.LogoutRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Logout(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Logs out a user based on user ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.LogoutResponse Logout(global::AF.ECT.Shared.LogoutRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Logout, null, options, request);
      }
      /// <summary>
      /// Logs out a user based on user ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.LogoutResponse> LogoutAsync(global::AF.ECT.Shared.LogoutRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LogoutAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Logs out a user based on user ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.LogoutResponse> LogoutAsync(global::AF.ECT.Shared.LogoutRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Logout, null, options, request);
      }
      /// <summary>
      /// Registers a new user with details like user ID, work component, email preference, group ID, account status, and expiration date.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.RegisterUserResponse RegisterUser(global::AF.ECT.Shared.RegisterUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterUser(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Registers a new user with details like user ID, work component, email preference, group ID, account status, and expiration date.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.RegisterUserResponse RegisterUser(global::AF.ECT.Shared.RegisterUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RegisterUser, null, options, request);
      }
      /// <summary>
      /// Registers a new user with details like user ID, work component, email preference, group ID, account status, and expiration date.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.RegisterUserResponse> RegisterUserAsync(global::AF.ECT.Shared.RegisterUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterUserAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Registers a new user with details like user ID, work component, email preference, group ID, account status, and expiration date.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.RegisterUserResponse> RegisterUserAsync(global::AF.ECT.Shared.RegisterUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RegisterUser, null, options, request);
      }
      /// <summary>
      /// Registers a user role with user ID, group ID, and status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.RegisterUserRoleResponse RegisterUserRole(global::AF.ECT.Shared.RegisterUserRoleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterUserRole(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Registers a user role with user ID, group ID, and status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.RegisterUserRoleResponse RegisterUserRole(global::AF.ECT.Shared.RegisterUserRoleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RegisterUserRole, null, options, request);
      }
      /// <summary>
      /// Registers a user role with user ID, group ID, and status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.RegisterUserRoleResponse> RegisterUserRoleAsync(global::AF.ECT.Shared.RegisterUserRoleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterUserRoleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Registers a user role with user ID, group ID, and status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.RegisterUserRoleResponse> RegisterUserRoleAsync(global::AF.ECT.Shared.RegisterUserRoleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RegisterUserRole, null, options, request);
      }
      /// <summary>
      /// Searches member data based on user ID, SSN, names, unit, and report view.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.SearchMemberDataResponse SearchMemberData(global::AF.ECT.Shared.SearchMemberDataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SearchMemberData(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Searches member data based on user ID, SSN, names, unit, and report view.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.SearchMemberDataResponse SearchMemberData(global::AF.ECT.Shared.SearchMemberDataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SearchMemberData, null, options, request);
      }
      /// <summary>
      /// Searches member data based on user ID, SSN, names, unit, and report view.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.SearchMemberDataResponse> SearchMemberDataAsync(global::AF.ECT.Shared.SearchMemberDataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SearchMemberDataAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Searches member data based on user ID, SSN, names, unit, and report view.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.SearchMemberDataResponse> SearchMemberDataAsync(global::AF.ECT.Shared.SearchMemberDataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SearchMemberData, null, options, request);
      }
      /// <summary>
      /// Searches member data as a stream based on user ID, SSN, names, unit, and report view.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.MemberDataItem> SearchMemberDataStream(global::AF.ECT.Shared.SearchMemberDataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SearchMemberDataStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Searches member data as a stream based on user ID, SSN, names, unit, and report view.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.MemberDataItem> SearchMemberDataStream(global::AF.ECT.Shared.SearchMemberDataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SearchMemberDataStream, null, options, request);
      }
      /// <summary>
      /// Searches member data for testing based on user ID, SSN, name, unit, and report view.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.SearchMemberDataTestResponse SearchMemberDataTest(global::AF.ECT.Shared.SearchMemberDataTestRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SearchMemberDataTest(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Searches member data for testing based on user ID, SSN, name, unit, and report view.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.SearchMemberDataTestResponse SearchMemberDataTest(global::AF.ECT.Shared.SearchMemberDataTestRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SearchMemberDataTest, null, options, request);
      }
      /// <summary>
      /// Searches member data for testing based on user ID, SSN, name, unit, and report view.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.SearchMemberDataTestResponse> SearchMemberDataTestAsync(global::AF.ECT.Shared.SearchMemberDataTestRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SearchMemberDataTestAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Searches member data for testing based on user ID, SSN, name, unit, and report view.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.SearchMemberDataTestResponse> SearchMemberDataTestAsync(global::AF.ECT.Shared.SearchMemberDataTestRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SearchMemberDataTest, null, options, request);
      }
      /// <summary>
      /// Searches member data for testing as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.MemberDataTestItem> SearchMemberDataTestStream(global::AF.ECT.Shared.SearchMemberDataTestRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SearchMemberDataTestStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Searches member data for testing as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.MemberDataTestItem> SearchMemberDataTestStream(global::AF.ECT.Shared.SearchMemberDataTestRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SearchMemberDataTestStream, null, options, request);
      }
      /// <summary>
      /// Updates account status for a user with status, expiration date, and comment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.UpdateAccountStatusResponse UpdateAccountStatus(global::AF.ECT.Shared.UpdateAccountStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAccountStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates account status for a user with status, expiration date, and comment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.UpdateAccountStatusResponse UpdateAccountStatus(global::AF.ECT.Shared.UpdateAccountStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateAccountStatus, null, options, request);
      }
      /// <summary>
      /// Updates account status for a user with status, expiration date, and comment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.UpdateAccountStatusResponse> UpdateAccountStatusAsync(global::AF.ECT.Shared.UpdateAccountStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAccountStatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates account status for a user with status, expiration date, and comment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.UpdateAccountStatusResponse> UpdateAccountStatusAsync(global::AF.ECT.Shared.UpdateAccountStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateAccountStatus, null, options, request);
      }
      /// <summary>
      /// Updates login information based on user ID, session ID, and remote address.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.UpdateLoginResponse UpdateLogin(global::AF.ECT.Shared.UpdateLoginRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateLogin(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates login information based on user ID, session ID, and remote address.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.UpdateLoginResponse UpdateLogin(global::AF.ECT.Shared.UpdateLoginRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateLogin, null, options, request);
      }
      /// <summary>
      /// Updates login information based on user ID, session ID, and remote address.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.UpdateLoginResponse> UpdateLoginAsync(global::AF.ECT.Shared.UpdateLoginRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateLoginAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates login information based on user ID, session ID, and remote address.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.UpdateLoginResponse> UpdateLoginAsync(global::AF.ECT.Shared.UpdateLoginRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateLogin, null, options, request);
      }
      /// <summary>
      /// Updates managed settings for a user with component, role ID, group ID, comment, email preference, and expiration date.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.UpdateManagedSettingsResponse UpdateManagedSettings(global::AF.ECT.Shared.UpdateManagedSettingsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateManagedSettings(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates managed settings for a user with component, role ID, group ID, comment, email preference, and expiration date.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.UpdateManagedSettingsResponse UpdateManagedSettings(global::AF.ECT.Shared.UpdateManagedSettingsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateManagedSettings, null, options, request);
      }
      /// <summary>
      /// Updates managed settings for a user with component, role ID, group ID, comment, email preference, and expiration date.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.UpdateManagedSettingsResponse> UpdateManagedSettingsAsync(global::AF.ECT.Shared.UpdateManagedSettingsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateManagedSettingsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates managed settings for a user with component, role ID, group ID, comment, email preference, and expiration date.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.UpdateManagedSettingsResponse> UpdateManagedSettingsAsync(global::AF.ECT.Shared.UpdateManagedSettingsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateManagedSettings, null, options, request);
      }
      /// <summary>
      /// Updates alternative title for a user based on user ID, group ID, and new title.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.UpdateUserAltTitleResponse UpdateUserAltTitle(global::AF.ECT.Shared.UpdateUserAltTitleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateUserAltTitle(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates alternative title for a user based on user ID, group ID, and new title.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.UpdateUserAltTitleResponse UpdateUserAltTitle(global::AF.ECT.Shared.UpdateUserAltTitleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateUserAltTitle, null, options, request);
      }
      /// <summary>
      /// Updates alternative title for a user based on user ID, group ID, and new title.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.UpdateUserAltTitleResponse> UpdateUserAltTitleAsync(global::AF.ECT.Shared.UpdateUserAltTitleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateUserAltTitleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates alternative title for a user based on user ID, group ID, and new title.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.UpdateUserAltTitleResponse> UpdateUserAltTitleAsync(global::AF.ECT.Shared.UpdateUserAltTitleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateUserAltTitle, null, options, request);
      }
      /// <summary>
      /// Core Workflow Methods
      /// Adds a signature to a workflow with reference ID, module type, user ID, action ID, group ID, status in/out.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.AddSignatureResponse AddSignature(global::AF.ECT.Shared.AddSignatureRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddSignature(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Core Workflow Methods
      /// Adds a signature to a workflow with reference ID, module type, user ID, action ID, group ID, status in/out.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.AddSignatureResponse AddSignature(global::AF.ECT.Shared.AddSignatureRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddSignature, null, options, request);
      }
      /// <summary>
      /// Core Workflow Methods
      /// Adds a signature to a workflow with reference ID, module type, user ID, action ID, group ID, status in/out.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.AddSignatureResponse> AddSignatureAsync(global::AF.ECT.Shared.AddSignatureRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddSignatureAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Core Workflow Methods
      /// Adds a signature to a workflow with reference ID, module type, user ID, action ID, group ID, status in/out.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.AddSignatureResponse> AddSignatureAsync(global::AF.ECT.Shared.AddSignatureRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddSignature, null, options, request);
      }
      /// <summary>
      /// Copies actions from one workflow step to another.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.CopyActionsResponse CopyActions(global::AF.ECT.Shared.CopyActionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CopyActions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Copies actions from one workflow step to another.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.CopyActionsResponse CopyActions(global::AF.ECT.Shared.CopyActionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CopyActions, null, options, request);
      }
      /// <summary>
      /// Copies actions from one workflow step to another.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.CopyActionsResponse> CopyActionsAsync(global::AF.ECT.Shared.CopyActionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CopyActionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Copies actions from one workflow step to another.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.CopyActionsResponse> CopyActionsAsync(global::AF.ECT.Shared.CopyActionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CopyActions, null, options, request);
      }
      /// <summary>
      /// Copies rules from one workflow to another.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.CopyRulesResponse CopyRules(global::AF.ECT.Shared.CopyRulesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CopyRules(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Copies rules from one workflow to another.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.CopyRulesResponse CopyRules(global::AF.ECT.Shared.CopyRulesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CopyRules, null, options, request);
      }
      /// <summary>
      /// Copies rules from one workflow to another.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.CopyRulesResponse> CopyRulesAsync(global::AF.ECT.Shared.CopyRulesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CopyRulesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Copies rules from one workflow to another.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.CopyRulesResponse> CopyRulesAsync(global::AF.ECT.Shared.CopyRulesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CopyRules, null, options, request);
      }
      /// <summary>
      /// Copies a workflow from one ID to another.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.CopyWorkflowResponse CopyWorkflow(global::AF.ECT.Shared.CopyWorkflowRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CopyWorkflow(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Copies a workflow from one ID to another.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.CopyWorkflowResponse CopyWorkflow(global::AF.ECT.Shared.CopyWorkflowRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CopyWorkflow, null, options, request);
      }
      /// <summary>
      /// Copies a workflow from one ID to another.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.CopyWorkflowResponse> CopyWorkflowAsync(global::AF.ECT.Shared.CopyWorkflowRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CopyWorkflowAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Copies a workflow from one ID to another.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.CopyWorkflowResponse> CopyWorkflowAsync(global::AF.ECT.Shared.CopyWorkflowRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CopyWorkflow, null, options, request);
      }
      /// <summary>
      /// Deletes a status code by its ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.DeleteStatusCodeResponse DeleteStatusCode(global::AF.ECT.Shared.DeleteStatusCodeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteStatusCode(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a status code by its ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.DeleteStatusCodeResponse DeleteStatusCode(global::AF.ECT.Shared.DeleteStatusCodeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteStatusCode, null, options, request);
      }
      /// <summary>
      /// Deletes a status code by its ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.DeleteStatusCodeResponse> DeleteStatusCodeAsync(global::AF.ECT.Shared.DeleteStatusCodeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteStatusCodeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a status code by its ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.DeleteStatusCodeResponse> DeleteStatusCodeAsync(global::AF.ECT.Shared.DeleteStatusCodeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteStatusCode, null, options, request);
      }
      /// <summary>
      /// Retrieves actions by step ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetActionsByStepResponse GetActionsByStep(global::AF.ECT.Shared.GetActionsByStepRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetActionsByStep(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves actions by step ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetActionsByStepResponse GetActionsByStep(global::AF.ECT.Shared.GetActionsByStepRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetActionsByStep, null, options, request);
      }
      /// <summary>
      /// Retrieves actions by step ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetActionsByStepResponse> GetActionsByStepAsync(global::AF.ECT.Shared.GetActionsByStepRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetActionsByStepAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves actions by step ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetActionsByStepResponse> GetActionsByStepAsync(global::AF.ECT.Shared.GetActionsByStepRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetActionsByStep, null, options, request);
      }
      /// <summary>
      /// Retrieves active cases based on reference ID and group ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetActiveCasesResponse GetActiveCases(global::AF.ECT.Shared.GetActiveCasesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetActiveCases(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves active cases based on reference ID and group ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetActiveCasesResponse GetActiveCases(global::AF.ECT.Shared.GetActiveCasesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetActiveCases, null, options, request);
      }
      /// <summary>
      /// Retrieves active cases based on reference ID and group ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetActiveCasesResponse> GetActiveCasesAsync(global::AF.ECT.Shared.GetActiveCasesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetActiveCasesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves active cases based on reference ID and group ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetActiveCasesResponse> GetActiveCasesAsync(global::AF.ECT.Shared.GetActiveCasesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetActiveCases, null, options, request);
      }
      /// <summary>
      /// Retrieves all findings by reason of.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetAllFindingByReasonOfResponse GetAllFindingByReasonOf(global::AF.ECT.Shared.EmptyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllFindingByReasonOf(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves all findings by reason of.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetAllFindingByReasonOfResponse GetAllFindingByReasonOf(global::AF.ECT.Shared.EmptyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAllFindingByReasonOf, null, options, request);
      }
      /// <summary>
      /// Retrieves all findings by reason of.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetAllFindingByReasonOfResponse> GetAllFindingByReasonOfAsync(global::AF.ECT.Shared.EmptyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllFindingByReasonOfAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves all findings by reason of.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetAllFindingByReasonOfResponse> GetAllFindingByReasonOfAsync(global::AF.ECT.Shared.EmptyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAllFindingByReasonOf, null, options, request);
      }
      /// <summary>
      /// Retrieves all locks.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetAllLocksResponse GetAllLocks(global::AF.ECT.Shared.EmptyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllLocks(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves all locks.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetAllLocksResponse GetAllLocks(global::AF.ECT.Shared.EmptyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAllLocks, null, options, request);
      }
      /// <summary>
      /// Retrieves all locks.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetAllLocksResponse> GetAllLocksAsync(global::AF.ECT.Shared.EmptyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllLocksAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves all locks.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetAllLocksResponse> GetAllLocksAsync(global::AF.ECT.Shared.EmptyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAllLocks, null, options, request);
      }
      /// <summary>
      /// Retrieves cancel reasons for a workflow, optionally formal.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetCancelReasonsResponse GetCancelReasons(global::AF.ECT.Shared.GetCancelReasonsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCancelReasons(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves cancel reasons for a workflow, optionally formal.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetCancelReasonsResponse GetCancelReasons(global::AF.ECT.Shared.GetCancelReasonsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCancelReasons, null, options, request);
      }
      /// <summary>
      /// Retrieves cancel reasons for a workflow, optionally formal.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetCancelReasonsResponse> GetCancelReasonsAsync(global::AF.ECT.Shared.GetCancelReasonsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCancelReasonsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves cancel reasons for a workflow, optionally formal.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetCancelReasonsResponse> GetCancelReasonsAsync(global::AF.ECT.Shared.GetCancelReasonsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCancelReasons, null, options, request);
      }
      /// <summary>
      /// Retrieves creatable workflows by group based on component, module, and group ID.
      /// Caching hint: Creatable workflows by group; cache for 15-30 minutes depending on workflow creation frequency.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetCreatableByGroupResponse GetCreatableByGroup(global::AF.ECT.Shared.GetCreatableByGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCreatableByGroup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves creatable workflows by group based on component, module, and group ID.
      /// Caching hint: Creatable workflows by group; cache for 15-30 minutes depending on workflow creation frequency.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetCreatableByGroupResponse GetCreatableByGroup(global::AF.ECT.Shared.GetCreatableByGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCreatableByGroup, null, options, request);
      }
      /// <summary>
      /// Retrieves creatable workflows by group based on component, module, and group ID.
      /// Caching hint: Creatable workflows by group; cache for 15-30 minutes depending on workflow creation frequency.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetCreatableByGroupResponse> GetCreatableByGroupAsync(global::AF.ECT.Shared.GetCreatableByGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCreatableByGroupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves creatable workflows by group based on component, module, and group ID.
      /// Caching hint: Creatable workflows by group; cache for 15-30 minutes depending on workflow creation frequency.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetCreatableByGroupResponse> GetCreatableByGroupAsync(global::AF.ECT.Shared.GetCreatableByGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCreatableByGroup, null, options, request);
      }
      /// <summary>
      /// Retrieves finding by reason of by ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetFindingByReasonOfByIdResponse GetFindingByReasonOfById(global::AF.ECT.Shared.GetFindingByReasonOfByIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFindingByReasonOfById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves finding by reason of by ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetFindingByReasonOfByIdResponse GetFindingByReasonOfById(global::AF.ECT.Shared.GetFindingByReasonOfByIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetFindingByReasonOfById, null, options, request);
      }
      /// <summary>
      /// Retrieves finding by reason of by ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetFindingByReasonOfByIdResponse> GetFindingByReasonOfByIdAsync(global::AF.ECT.Shared.GetFindingByReasonOfByIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFindingByReasonOfByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves finding by reason of by ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetFindingByReasonOfByIdResponse> GetFindingByReasonOfByIdAsync(global::AF.ECT.Shared.GetFindingByReasonOfByIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetFindingByReasonOfById, null, options, request);
      }
      /// <summary>
      /// Retrieves findings for a workflow based on workflow ID and group ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetFindingsResponse GetFindings(global::AF.ECT.Shared.GetFindingsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFindings(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves findings for a workflow based on workflow ID and group ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetFindingsResponse GetFindings(global::AF.ECT.Shared.GetFindingsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetFindings, null, options, request);
      }
      /// <summary>
      /// Retrieves findings for a workflow based on workflow ID and group ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetFindingsResponse> GetFindingsAsync(global::AF.ECT.Shared.GetFindingsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFindingsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves findings for a workflow based on workflow ID and group ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetFindingsResponse> GetFindingsAsync(global::AF.ECT.Shared.GetFindingsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetFindings, null, options, request);
      }
      /// <summary>
      /// Retrieves module from workflow by workflow ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetModuleFromWorkflowResponse GetModuleFromWorkflow(global::AF.ECT.Shared.GetModuleFromWorkflowRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetModuleFromWorkflow(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves module from workflow by workflow ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetModuleFromWorkflowResponse GetModuleFromWorkflow(global::AF.ECT.Shared.GetModuleFromWorkflowRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetModuleFromWorkflow, null, options, request);
      }
      /// <summary>
      /// Retrieves module from workflow by workflow ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetModuleFromWorkflowResponse> GetModuleFromWorkflowAsync(global::AF.ECT.Shared.GetModuleFromWorkflowRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetModuleFromWorkflowAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves module from workflow by workflow ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetModuleFromWorkflowResponse> GetModuleFromWorkflowAsync(global::AF.ECT.Shared.GetModuleFromWorkflowRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetModuleFromWorkflow, null, options, request);
      }
      /// <summary>
      /// Retrieves page access by group based on workflow, status, and group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetPageAccessByGroupResponse GetPageAccessByGroup(global::AF.ECT.Shared.GetPageAccessByGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPageAccessByGroup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves page access by group based on workflow, status, and group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetPageAccessByGroupResponse GetPageAccessByGroup(global::AF.ECT.Shared.GetPageAccessByGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPageAccessByGroup, null, options, request);
      }
      /// <summary>
      /// Retrieves page access by group based on workflow, status, and group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetPageAccessByGroupResponse> GetPageAccessByGroupAsync(global::AF.ECT.Shared.GetPageAccessByGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPageAccessByGroupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves page access by group based on workflow, status, and group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetPageAccessByGroupResponse> GetPageAccessByGroupAsync(global::AF.ECT.Shared.GetPageAccessByGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPageAccessByGroup, null, options, request);
      }
      /// <summary>
      /// Retrieves page access by workflow view based on component, workflow, and status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetPageAccessByWorkflowViewResponse GetPageAccessByWorkflowView(global::AF.ECT.Shared.GetPageAccessByWorkflowViewRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPageAccessByWorkflowView(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves page access by workflow view based on component, workflow, and status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetPageAccessByWorkflowViewResponse GetPageAccessByWorkflowView(global::AF.ECT.Shared.GetPageAccessByWorkflowViewRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPageAccessByWorkflowView, null, options, request);
      }
      /// <summary>
      /// Retrieves page access by workflow view based on component, workflow, and status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetPageAccessByWorkflowViewResponse> GetPageAccessByWorkflowViewAsync(global::AF.ECT.Shared.GetPageAccessByWorkflowViewRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPageAccessByWorkflowViewAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves page access by workflow view based on component, workflow, and status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetPageAccessByWorkflowViewResponse> GetPageAccessByWorkflowViewAsync(global::AF.ECT.Shared.GetPageAccessByWorkflowViewRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPageAccessByWorkflowView, null, options, request);
      }
      /// <summary>
      /// Retrieves pages by workflow ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetPagesByWorkflowIdResponse GetPagesByWorkflowId(global::AF.ECT.Shared.GetPagesByWorkflowIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPagesByWorkflowId(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves pages by workflow ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetPagesByWorkflowIdResponse GetPagesByWorkflowId(global::AF.ECT.Shared.GetPagesByWorkflowIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPagesByWorkflowId, null, options, request);
      }
      /// <summary>
      /// Retrieves pages by workflow ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetPagesByWorkflowIdResponse> GetPagesByWorkflowIdAsync(global::AF.ECT.Shared.GetPagesByWorkflowIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPagesByWorkflowIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves pages by workflow ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetPagesByWorkflowIdResponse> GetPagesByWorkflowIdAsync(global::AF.ECT.Shared.GetPagesByWorkflowIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPagesByWorkflowId, null, options, request);
      }
      /// <summary>
      /// Retrieves permissions for a workflow.
      /// Caching hint: Permissions change infrequently per user/role; consider caching for 15-30 minutes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetPermissionsResponse GetPermissions(global::AF.ECT.Shared.GetPermissionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPermissions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves permissions for a workflow.
      /// Caching hint: Permissions change infrequently per user/role; consider caching for 15-30 minutes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetPermissionsResponse GetPermissions(global::AF.ECT.Shared.GetPermissionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPermissions, null, options, request);
      }
      /// <summary>
      /// Retrieves permissions for a workflow.
      /// Caching hint: Permissions change infrequently per user/role; consider caching for 15-30 minutes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetPermissionsResponse> GetPermissionsAsync(global::AF.ECT.Shared.GetPermissionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPermissionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves permissions for a workflow.
      /// Caching hint: Permissions change infrequently per user/role; consider caching for 15-30 minutes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetPermissionsResponse> GetPermissionsAsync(global::AF.ECT.Shared.GetPermissionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPermissions, null, options, request);
      }
      /// <summary>
      /// Retrieves permissions by component for a workflow.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetPermissionsByCompoResponse GetPermissionsByCompo(global::AF.ECT.Shared.GetPermissionsByCompoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPermissionsByCompo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves permissions by component for a workflow.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetPermissionsByCompoResponse GetPermissionsByCompo(global::AF.ECT.Shared.GetPermissionsByCompoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPermissionsByCompo, null, options, request);
      }
      /// <summary>
      /// Retrieves permissions by component for a workflow.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetPermissionsByCompoResponse> GetPermissionsByCompoAsync(global::AF.ECT.Shared.GetPermissionsByCompoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPermissionsByCompoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves permissions by component for a workflow.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetPermissionsByCompoResponse> GetPermissionsByCompoAsync(global::AF.ECT.Shared.GetPermissionsByCompoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPermissionsByCompo, null, options, request);
      }
      /// <summary>
      /// Retrieves return reasons for a workflow.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetReturnReasonsResponse GetReturnReasons(global::AF.ECT.Shared.GetReturnReasonsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetReturnReasons(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves return reasons for a workflow.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetReturnReasonsResponse GetReturnReasons(global::AF.ECT.Shared.GetReturnReasonsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetReturnReasons, null, options, request);
      }
      /// <summary>
      /// Retrieves return reasons for a workflow.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetReturnReasonsResponse> GetReturnReasonsAsync(global::AF.ECT.Shared.GetReturnReasonsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetReturnReasonsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves return reasons for a workflow.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetReturnReasonsResponse> GetReturnReasonsAsync(global::AF.ECT.Shared.GetReturnReasonsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetReturnReasons, null, options, request);
      }
      /// <summary>
      /// Retrieves RWoA reasons for a workflow.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetRwoaReasonsResponse GetRwoaReasons(global::AF.ECT.Shared.GetRwoaReasonsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRwoaReasons(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves RWoA reasons for a workflow.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetRwoaReasonsResponse GetRwoaReasons(global::AF.ECT.Shared.GetRwoaReasonsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetRwoaReasons, null, options, request);
      }
      /// <summary>
      /// Retrieves RWoA reasons for a workflow.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetRwoaReasonsResponse> GetRwoaReasonsAsync(global::AF.ECT.Shared.GetRwoaReasonsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRwoaReasonsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves RWoA reasons for a workflow.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetRwoaReasonsResponse> GetRwoaReasonsAsync(global::AF.ECT.Shared.GetRwoaReasonsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetRwoaReasons, null, options, request);
      }
      /// <summary>
      /// Retrieves status codes by component.
      /// Caching hint: Status codes change infrequently; consider caching for 1 hour.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetStatusCodesByCompoResponse GetStatusCodesByCompo(global::AF.ECT.Shared.GetStatusCodesByCompoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetStatusCodesByCompo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves status codes by component.
      /// Caching hint: Status codes change infrequently; consider caching for 1 hour.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetStatusCodesByCompoResponse GetStatusCodesByCompo(global::AF.ECT.Shared.GetStatusCodesByCompoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetStatusCodesByCompo, null, options, request);
      }
      /// <summary>
      /// Retrieves status codes by component.
      /// Caching hint: Status codes change infrequently; consider caching for 1 hour.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetStatusCodesByCompoResponse> GetStatusCodesByCompoAsync(global::AF.ECT.Shared.GetStatusCodesByCompoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetStatusCodesByCompoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves status codes by component.
      /// Caching hint: Status codes change infrequently; consider caching for 1 hour.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetStatusCodesByCompoResponse> GetStatusCodesByCompoAsync(global::AF.ECT.Shared.GetStatusCodesByCompoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetStatusCodesByCompo, null, options, request);
      }
      /// <summary>
      /// Retrieves status codes by component and module.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetStatusCodesByCompoAndModuleResponse GetStatusCodesByCompoAndModule(global::AF.ECT.Shared.GetStatusCodesByCompoAndModuleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetStatusCodesByCompoAndModule(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves status codes by component and module.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetStatusCodesByCompoAndModuleResponse GetStatusCodesByCompoAndModule(global::AF.ECT.Shared.GetStatusCodesByCompoAndModuleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetStatusCodesByCompoAndModule, null, options, request);
      }
      /// <summary>
      /// Retrieves status codes by component and module.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetStatusCodesByCompoAndModuleResponse> GetStatusCodesByCompoAndModuleAsync(global::AF.ECT.Shared.GetStatusCodesByCompoAndModuleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetStatusCodesByCompoAndModuleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves status codes by component and module.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetStatusCodesByCompoAndModuleResponse> GetStatusCodesByCompoAndModuleAsync(global::AF.ECT.Shared.GetStatusCodesByCompoAndModuleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetStatusCodesByCompoAndModule, null, options, request);
      }
      /// <summary>
      /// Retrieves status codes by sign code based on group ID and module.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetStatusCodesBySignCodeResponse GetStatusCodesBySignCode(global::AF.ECT.Shared.GetStatusCodesBySignCodeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetStatusCodesBySignCode(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves status codes by sign code based on group ID and module.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetStatusCodesBySignCodeResponse GetStatusCodesBySignCode(global::AF.ECT.Shared.GetStatusCodesBySignCodeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetStatusCodesBySignCode, null, options, request);
      }
      /// <summary>
      /// Retrieves status codes by sign code based on group ID and module.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetStatusCodesBySignCodeResponse> GetStatusCodesBySignCodeAsync(global::AF.ECT.Shared.GetStatusCodesBySignCodeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetStatusCodesBySignCodeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves status codes by sign code based on group ID and module.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetStatusCodesBySignCodeResponse> GetStatusCodesBySignCodeAsync(global::AF.ECT.Shared.GetStatusCodesBySignCodeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetStatusCodesBySignCode, null, options, request);
      }
      /// <summary>
      /// Retrieves status codes by workflow.
      /// Caching hint: Status codes per workflow; cache for 30-60 minutes if status codes are stable.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetStatusCodesByWorkflowResponse GetStatusCodesByWorkflow(global::AF.ECT.Shared.GetStatusCodesByWorkflowRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetStatusCodesByWorkflow(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves status codes by workflow.
      /// Caching hint: Status codes per workflow; cache for 30-60 minutes if status codes are stable.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetStatusCodesByWorkflowResponse GetStatusCodesByWorkflow(global::AF.ECT.Shared.GetStatusCodesByWorkflowRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetStatusCodesByWorkflow, null, options, request);
      }
      /// <summary>
      /// Retrieves status codes by workflow.
      /// Caching hint: Status codes per workflow; cache for 30-60 minutes if status codes are stable.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetStatusCodesByWorkflowResponse> GetStatusCodesByWorkflowAsync(global::AF.ECT.Shared.GetStatusCodesByWorkflowRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetStatusCodesByWorkflowAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves status codes by workflow.
      /// Caching hint: Status codes per workflow; cache for 30-60 minutes if status codes are stable.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetStatusCodesByWorkflowResponse> GetStatusCodesByWorkflowAsync(global::AF.ECT.Shared.GetStatusCodesByWorkflowRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetStatusCodesByWorkflow, null, options, request);
      }
      /// <summary>
      /// Retrieves status codes by workflow and access scope.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetStatusCodesByWorkflowAndAccessScopeResponse GetStatusCodesByWorkflowAndAccessScope(global::AF.ECT.Shared.GetStatusCodesByWorkflowAndAccessScopeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetStatusCodesByWorkflowAndAccessScope(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves status codes by workflow and access scope.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetStatusCodesByWorkflowAndAccessScopeResponse GetStatusCodesByWorkflowAndAccessScope(global::AF.ECT.Shared.GetStatusCodesByWorkflowAndAccessScopeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetStatusCodesByWorkflowAndAccessScope, null, options, request);
      }
      /// <summary>
      /// Retrieves status codes by workflow and access scope.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetStatusCodesByWorkflowAndAccessScopeResponse> GetStatusCodesByWorkflowAndAccessScopeAsync(global::AF.ECT.Shared.GetStatusCodesByWorkflowAndAccessScopeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetStatusCodesByWorkflowAndAccessScopeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves status codes by workflow and access scope.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetStatusCodesByWorkflowAndAccessScopeResponse> GetStatusCodesByWorkflowAndAccessScopeAsync(global::AF.ECT.Shared.GetStatusCodesByWorkflowAndAccessScopeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetStatusCodesByWorkflowAndAccessScope, null, options, request);
      }
      /// <summary>
      /// Retrieves status code scope by status ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetStatusCodeScopeResponse GetStatusCodeScope(global::AF.ECT.Shared.GetStatusCodeScopeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetStatusCodeScope(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves status code scope by status ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetStatusCodeScopeResponse GetStatusCodeScope(global::AF.ECT.Shared.GetStatusCodeScopeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetStatusCodeScope, null, options, request);
      }
      /// <summary>
      /// Retrieves status code scope by status ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetStatusCodeScopeResponse> GetStatusCodeScopeAsync(global::AF.ECT.Shared.GetStatusCodeScopeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetStatusCodeScopeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves status code scope by status ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetStatusCodeScopeResponse> GetStatusCodeScopeAsync(global::AF.ECT.Shared.GetStatusCodeScopeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetStatusCodeScope, null, options, request);
      }
      /// <summary>
      /// Retrieves steps by workflow.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetStepsByWorkflowResponse GetStepsByWorkflow(global::AF.ECT.Shared.GetStepsByWorkflowRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetStepsByWorkflow(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves steps by workflow.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetStepsByWorkflowResponse GetStepsByWorkflow(global::AF.ECT.Shared.GetStepsByWorkflowRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetStepsByWorkflow, null, options, request);
      }
      /// <summary>
      /// Retrieves steps by workflow.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetStepsByWorkflowResponse> GetStepsByWorkflowAsync(global::AF.ECT.Shared.GetStepsByWorkflowRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetStepsByWorkflowAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves steps by workflow.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetStepsByWorkflowResponse> GetStepsByWorkflowAsync(global::AF.ECT.Shared.GetStepsByWorkflowRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetStepsByWorkflow, null, options, request);
      }
      /// <summary>
      /// Retrieves steps by workflow and status, optionally with death status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetStepsByWorkflowAndStatusResponse GetStepsByWorkflowAndStatus(global::AF.ECT.Shared.GetStepsByWorkflowAndStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetStepsByWorkflowAndStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves steps by workflow and status, optionally with death status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetStepsByWorkflowAndStatusResponse GetStepsByWorkflowAndStatus(global::AF.ECT.Shared.GetStepsByWorkflowAndStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetStepsByWorkflowAndStatus, null, options, request);
      }
      /// <summary>
      /// Retrieves steps by workflow and status, optionally with death status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetStepsByWorkflowAndStatusResponse> GetStepsByWorkflowAndStatusAsync(global::AF.ECT.Shared.GetStepsByWorkflowAndStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetStepsByWorkflowAndStatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves steps by workflow and status, optionally with death status.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetStepsByWorkflowAndStatusResponse> GetStepsByWorkflowAndStatusAsync(global::AF.ECT.Shared.GetStepsByWorkflowAndStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetStepsByWorkflowAndStatus, null, options, request);
      }
      /// <summary>
      /// Retrieves viewable workflows by group based on group ID and module.
      /// Caching hint: Viewable workflows by group; cache for 10-20 minutes if permissions change moderately.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetViewableByGroupResponse GetViewableByGroup(global::AF.ECT.Shared.GetViewableByGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetViewableByGroup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves viewable workflows by group based on group ID and module.
      /// Caching hint: Viewable workflows by group; cache for 10-20 minutes if permissions change moderately.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetViewableByGroupResponse GetViewableByGroup(global::AF.ECT.Shared.GetViewableByGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetViewableByGroup, null, options, request);
      }
      /// <summary>
      /// Retrieves viewable workflows by group based on group ID and module.
      /// Caching hint: Viewable workflows by group; cache for 10-20 minutes if permissions change moderately.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetViewableByGroupResponse> GetViewableByGroupAsync(global::AF.ECT.Shared.GetViewableByGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetViewableByGroupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves viewable workflows by group based on group ID and module.
      /// Caching hint: Viewable workflows by group; cache for 10-20 minutes if permissions change moderately.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetViewableByGroupResponse> GetViewableByGroupAsync(global::AF.ECT.Shared.GetViewableByGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetViewableByGroup, null, options, request);
      }
      /// <summary>
      /// Retrieves workflows by component based on component and user ID.
      /// Caching hint: Workflow lists by component; cache for 10-15 minutes if workflows don't change often.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetWorkflowByCompoResponse GetWorkflowByCompo(global::AF.ECT.Shared.GetWorkflowByCompoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkflowByCompo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves workflows by component based on component and user ID.
      /// Caching hint: Workflow lists by component; cache for 10-15 minutes if workflows don't change often.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetWorkflowByCompoResponse GetWorkflowByCompo(global::AF.ECT.Shared.GetWorkflowByCompoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetWorkflowByCompo, null, options, request);
      }
      /// <summary>
      /// Retrieves workflows by component based on component and user ID.
      /// Caching hint: Workflow lists by component; cache for 10-15 minutes if workflows don't change often.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetWorkflowByCompoResponse> GetWorkflowByCompoAsync(global::AF.ECT.Shared.GetWorkflowByCompoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkflowByCompoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves workflows by component based on component and user ID.
      /// Caching hint: Workflow lists by component; cache for 10-15 minutes if workflows don't change often.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetWorkflowByCompoResponse> GetWorkflowByCompoAsync(global::AF.ECT.Shared.GetWorkflowByCompoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetWorkflowByCompo, null, options, request);
      }
      /// <summary>
      /// Retrieves workflows from module by module ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetWorkflowFromModuleResponse GetWorkflowFromModule(global::AF.ECT.Shared.GetWorkflowFromModuleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkflowFromModule(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves workflows from module by module ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetWorkflowFromModuleResponse GetWorkflowFromModule(global::AF.ECT.Shared.GetWorkflowFromModuleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetWorkflowFromModule, null, options, request);
      }
      /// <summary>
      /// Retrieves workflows from module by module ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetWorkflowFromModuleResponse> GetWorkflowFromModuleAsync(global::AF.ECT.Shared.GetWorkflowFromModuleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkflowFromModuleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves workflows from module by module ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetWorkflowFromModuleResponse> GetWorkflowFromModuleAsync(global::AF.ECT.Shared.GetWorkflowFromModuleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetWorkflowFromModule, null, options, request);
      }
      /// <summary>
      /// Retrieves initial status code for a workflow based on component, module, and workflow ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetWorkflowInitialStatusCodeResponse GetWorkflowInitialStatusCode(global::AF.ECT.Shared.GetWorkflowInitialStatusCodeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkflowInitialStatusCode(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves initial status code for a workflow based on component, module, and workflow ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetWorkflowInitialStatusCodeResponse GetWorkflowInitialStatusCode(global::AF.ECT.Shared.GetWorkflowInitialStatusCodeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetWorkflowInitialStatusCode, null, options, request);
      }
      /// <summary>
      /// Retrieves initial status code for a workflow based on component, module, and workflow ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetWorkflowInitialStatusCodeResponse> GetWorkflowInitialStatusCodeAsync(global::AF.ECT.Shared.GetWorkflowInitialStatusCodeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkflowInitialStatusCodeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves initial status code for a workflow based on component, module, and workflow ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetWorkflowInitialStatusCodeResponse> GetWorkflowInitialStatusCodeAsync(global::AF.ECT.Shared.GetWorkflowInitialStatusCodeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetWorkflowInitialStatusCode, null, options, request);
      }
      /// <summary>
      /// Retrieves workflow title based on module ID and sub-case.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetWorkflowTitleResponse GetWorkflowTitle(global::AF.ECT.Shared.GetWorkflowTitleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkflowTitle(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves workflow title based on module ID and sub-case.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetWorkflowTitleResponse GetWorkflowTitle(global::AF.ECT.Shared.GetWorkflowTitleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetWorkflowTitle, null, options, request);
      }
      /// <summary>
      /// Retrieves workflow title based on module ID and sub-case.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetWorkflowTitleResponse> GetWorkflowTitleAsync(global::AF.ECT.Shared.GetWorkflowTitleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkflowTitleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves workflow title based on module ID and sub-case.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetWorkflowTitleResponse> GetWorkflowTitleAsync(global::AF.ECT.Shared.GetWorkflowTitleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetWorkflowTitle, null, options, request);
      }
      /// <summary>
      /// Retrieves workflow title by work status ID based on workflow ID and sub-case.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetWorkflowTitleByWorkStatusIdResponse GetWorkflowTitleByWorkStatusId(global::AF.ECT.Shared.GetWorkflowTitleByWorkStatusIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkflowTitleByWorkStatusId(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves workflow title by work status ID based on workflow ID and sub-case.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetWorkflowTitleByWorkStatusIdResponse GetWorkflowTitleByWorkStatusId(global::AF.ECT.Shared.GetWorkflowTitleByWorkStatusIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetWorkflowTitleByWorkStatusId, null, options, request);
      }
      /// <summary>
      /// Retrieves workflow title by work status ID based on workflow ID and sub-case.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetWorkflowTitleByWorkStatusIdResponse> GetWorkflowTitleByWorkStatusIdAsync(global::AF.ECT.Shared.GetWorkflowTitleByWorkStatusIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkflowTitleByWorkStatusIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves workflow title by work status ID based on workflow ID and sub-case.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetWorkflowTitleByWorkStatusIdResponse> GetWorkflowTitleByWorkStatusIdAsync(global::AF.ECT.Shared.GetWorkflowTitleByWorkStatusIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetWorkflowTitleByWorkStatusId, null, options, request);
      }
      /// <summary>
      /// Inserts a new action with type, step ID, target, and data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.InsertActionResponse InsertAction(global::AF.ECT.Shared.InsertActionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertAction(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Inserts a new action with type, step ID, target, and data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.InsertActionResponse InsertAction(global::AF.ECT.Shared.InsertActionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_InsertAction, null, options, request);
      }
      /// <summary>
      /// Inserts a new action with type, step ID, target, and data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.InsertActionResponse> InsertActionAsync(global::AF.ECT.Shared.InsertActionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertActionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Inserts a new action with type, step ID, target, and data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.InsertActionResponse> InsertActionAsync(global::AF.ECT.Shared.InsertActionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_InsertAction, null, options, request);
      }
      /// <summary>
      /// Inserts an option action with type, WSOID, target, and data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.InsertOptionActionResponse InsertOptionAction(global::AF.ECT.Shared.InsertOptionActionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertOptionAction(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Inserts an option action with type, WSOID, target, and data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.InsertOptionActionResponse InsertOptionAction(global::AF.ECT.Shared.InsertOptionActionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_InsertOptionAction, null, options, request);
      }
      /// <summary>
      /// Inserts an option action with type, WSOID, target, and data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.InsertOptionActionResponse> InsertOptionActionAsync(global::AF.ECT.Shared.InsertOptionActionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertOptionActionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Inserts an option action with type, WSOID, target, and data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.InsertOptionActionResponse> InsertOptionActionAsync(global::AF.ECT.Shared.InsertOptionActionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_InsertOptionAction, null, options, request);
      }
      /// <summary>
      /// Adds a signature as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.SignatureItem> AddSignatureStream(global::AF.ECT.Shared.AddSignatureRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddSignatureStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Adds a signature as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.SignatureItem> AddSignatureStream(global::AF.ECT.Shared.AddSignatureRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_AddSignatureStream, null, options, request);
      }
      /// <summary>
      /// Copies a workflow as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.WorkflowCopyItem> CopyWorkflowStream(global::AF.ECT.Shared.CopyWorkflowRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CopyWorkflowStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Copies a workflow as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.WorkflowCopyItem> CopyWorkflowStream(global::AF.ECT.Shared.CopyWorkflowRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_CopyWorkflowStream, null, options, request);
      }
      /// <summary>
      /// Retrieves actions by step as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.ActionByStepItem> GetActionsByStepStream(global::AF.ECT.Shared.GetActionsByStepRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetActionsByStepStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves actions by step as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.ActionByStepItem> GetActionsByStepStream(global::AF.ECT.Shared.GetActionsByStepRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetActionsByStepStream, null, options, request);
      }
      /// <summary>
      /// Retrieves active cases as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.ActiveCaseItem> GetActiveCasesStream(global::AF.ECT.Shared.GetActiveCasesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetActiveCasesStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves active cases as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.ActiveCaseItem> GetActiveCasesStream(global::AF.ECT.Shared.GetActiveCasesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetActiveCasesStream, null, options, request);
      }
      /// <summary>
      /// Retrieves all findings by reason of as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.FindingByReasonOfItem> GetAllFindingByReasonOfStream(global::AF.ECT.Shared.EmptyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllFindingByReasonOfStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves all findings by reason of as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.FindingByReasonOfItem> GetAllFindingByReasonOfStream(global::AF.ECT.Shared.EmptyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetAllFindingByReasonOfStream, null, options, request);
      }
      /// <summary>
      /// Retrieves all locks as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.LockItem> GetAllLocksStream(global::AF.ECT.Shared.EmptyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllLocksStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves all locks as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.LockItem> GetAllLocksStream(global::AF.ECT.Shared.EmptyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetAllLocksStream, null, options, request);
      }
      /// <summary>
      /// Retrieves cancel reasons as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.CancelReasonItem> GetCancelReasonsStream(global::AF.ECT.Shared.GetCancelReasonsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCancelReasonsStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves cancel reasons as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.CancelReasonItem> GetCancelReasonsStream(global::AF.ECT.Shared.GetCancelReasonsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetCancelReasonsStream, null, options, request);
      }
      /// <summary>
      /// Retrieves creatable by group as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.CreatableByGroupItem> GetCreatableByGroupStream(global::AF.ECT.Shared.GetCreatableByGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCreatableByGroupStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves creatable by group as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.CreatableByGroupItem> GetCreatableByGroupStream(global::AF.ECT.Shared.GetCreatableByGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetCreatableByGroupStream, null, options, request);
      }
      /// <summary>
      /// Retrieves finding by reason of by ID as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.FindingByReasonOfByIdItem> GetFindingByReasonOfByIdStream(global::AF.ECT.Shared.GetFindingByReasonOfByIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFindingByReasonOfByIdStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves finding by reason of by ID as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.FindingByReasonOfByIdItem> GetFindingByReasonOfByIdStream(global::AF.ECT.Shared.GetFindingByReasonOfByIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetFindingByReasonOfByIdStream, null, options, request);
      }
      /// <summary>
      /// Retrieves findings as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.FindingItem> GetFindingsStream(global::AF.ECT.Shared.GetFindingsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFindingsStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves findings as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.FindingItem> GetFindingsStream(global::AF.ECT.Shared.GetFindingsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetFindingsStream, null, options, request);
      }
      /// <summary>
      /// Retrieves module from workflow as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.ModuleFromWorkflowItem> GetModuleFromWorkflowStream(global::AF.ECT.Shared.GetModuleFromWorkflowRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetModuleFromWorkflowStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves module from workflow as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.ModuleFromWorkflowItem> GetModuleFromWorkflowStream(global::AF.ECT.Shared.GetModuleFromWorkflowRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetModuleFromWorkflowStream, null, options, request);
      }
      /// <summary>
      /// Retrieves page access by group as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.PageAccessByGroupItem> GetPageAccessByGroupStream(global::AF.ECT.Shared.GetPageAccessByGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPageAccessByGroupStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves page access by group as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.PageAccessByGroupItem> GetPageAccessByGroupStream(global::AF.ECT.Shared.GetPageAccessByGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetPageAccessByGroupStream, null, options, request);
      }
      /// <summary>
      /// Retrieves page access by workflow view as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.PageAccessByWorkflowViewItem> GetPageAccessByWorkflowViewStream(global::AF.ECT.Shared.GetPageAccessByWorkflowViewRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPageAccessByWorkflowViewStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves page access by workflow view as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.PageAccessByWorkflowViewItem> GetPageAccessByWorkflowViewStream(global::AF.ECT.Shared.GetPageAccessByWorkflowViewRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetPageAccessByWorkflowViewStream, null, options, request);
      }
      /// <summary>
      /// Retrieves pages by workflow ID as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.PageByWorkflowItem> GetPagesByWorkflowIdStream(global::AF.ECT.Shared.GetPagesByWorkflowIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPagesByWorkflowIdStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves pages by workflow ID as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.PageByWorkflowItem> GetPagesByWorkflowIdStream(global::AF.ECT.Shared.GetPagesByWorkflowIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetPagesByWorkflowIdStream, null, options, request);
      }
      /// <summary>
      /// Retrieves permissions as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.PermissionItem> GetPermissionsStream(global::AF.ECT.Shared.GetPermissionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPermissionsStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves permissions as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.PermissionItem> GetPermissionsStream(global::AF.ECT.Shared.GetPermissionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetPermissionsStream, null, options, request);
      }
      /// <summary>
      /// Retrieves permissions by component as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.PermissionByCompoItem> GetPermissionsByCompoStream(global::AF.ECT.Shared.GetPermissionsByCompoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPermissionsByCompoStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves permissions by component as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.PermissionByCompoItem> GetPermissionsByCompoStream(global::AF.ECT.Shared.GetPermissionsByCompoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetPermissionsByCompoStream, null, options, request);
      }
      /// <summary>
      /// Retrieves return reasons as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.ReturnReasonItem> GetReturnReasonsStream(global::AF.ECT.Shared.GetReturnReasonsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetReturnReasonsStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves return reasons as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.ReturnReasonItem> GetReturnReasonsStream(global::AF.ECT.Shared.GetReturnReasonsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetReturnReasonsStream, null, options, request);
      }
      /// <summary>
      /// Retrieves RWoA reasons as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.RwoaReasonItem> GetRwoaReasonsStream(global::AF.ECT.Shared.GetRwoaReasonsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRwoaReasonsStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves RWoA reasons as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.RwoaReasonItem> GetRwoaReasonsStream(global::AF.ECT.Shared.GetRwoaReasonsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetRwoaReasonsStream, null, options, request);
      }
      /// <summary>
      /// Retrieves status codes by component as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.StatusCodeByCompoItem> GetStatusCodesByCompoStream(global::AF.ECT.Shared.GetStatusCodesByCompoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetStatusCodesByCompoStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves status codes by component as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.StatusCodeByCompoItem> GetStatusCodesByCompoStream(global::AF.ECT.Shared.GetStatusCodesByCompoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetStatusCodesByCompoStream, null, options, request);
      }
      /// <summary>
      /// Retrieves status codes by component and module as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.StatusCodeByCompoAndModuleItem> GetStatusCodesByCompoAndModuleStream(global::AF.ECT.Shared.GetStatusCodesByCompoAndModuleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetStatusCodesByCompoAndModuleStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves status codes by component and module as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.StatusCodeByCompoAndModuleItem> GetStatusCodesByCompoAndModuleStream(global::AF.ECT.Shared.GetStatusCodesByCompoAndModuleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetStatusCodesByCompoAndModuleStream, null, options, request);
      }
      /// <summary>
      /// Retrieves status codes by sign code as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.StatusCodeBySignCodeItem> GetStatusCodesBySignCodeStream(global::AF.ECT.Shared.GetStatusCodesBySignCodeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetStatusCodesBySignCodeStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves status codes by sign code as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.StatusCodeBySignCodeItem> GetStatusCodesBySignCodeStream(global::AF.ECT.Shared.GetStatusCodesBySignCodeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetStatusCodesBySignCodeStream, null, options, request);
      }
      /// <summary>
      /// Retrieves status codes by workflow as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.StatusCodeByWorkflowItem> GetStatusCodesByWorkflowStream(global::AF.ECT.Shared.GetStatusCodesByWorkflowRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetStatusCodesByWorkflowStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves status codes by workflow as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.StatusCodeByWorkflowItem> GetStatusCodesByWorkflowStream(global::AF.ECT.Shared.GetStatusCodesByWorkflowRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetStatusCodesByWorkflowStream, null, options, request);
      }
      /// <summary>
      /// Retrieves status codes by workflow and access scope as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.StatusCodeByWorkflowAndAccessScopeItem> GetStatusCodesByWorkflowAndAccessScopeStream(global::AF.ECT.Shared.GetStatusCodesByWorkflowAndAccessScopeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetStatusCodesByWorkflowAndAccessScopeStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves status codes by workflow and access scope as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.StatusCodeByWorkflowAndAccessScopeItem> GetStatusCodesByWorkflowAndAccessScopeStream(global::AF.ECT.Shared.GetStatusCodesByWorkflowAndAccessScopeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetStatusCodesByWorkflowAndAccessScopeStream, null, options, request);
      }
      /// <summary>
      /// Retrieves status code scope as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.StatusCodeScopeItem> GetStatusCodeScopeStream(global::AF.ECT.Shared.GetStatusCodeScopeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetStatusCodeScopeStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves status code scope as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.StatusCodeScopeItem> GetStatusCodeScopeStream(global::AF.ECT.Shared.GetStatusCodeScopeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetStatusCodeScopeStream, null, options, request);
      }
      /// <summary>
      /// Retrieves steps by workflow as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.StepByWorkflowItem> GetStepsByWorkflowStream(global::AF.ECT.Shared.GetStepsByWorkflowRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetStepsByWorkflowStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves steps by workflow as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.StepByWorkflowItem> GetStepsByWorkflowStream(global::AF.ECT.Shared.GetStepsByWorkflowRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetStepsByWorkflowStream, null, options, request);
      }
      /// <summary>
      /// Retrieves steps by workflow and status as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.StepByWorkflowAndStatusItem> GetStepsByWorkflowAndStatusStream(global::AF.ECT.Shared.GetStepsByWorkflowAndStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetStepsByWorkflowAndStatusStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves steps by workflow and status as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.StepByWorkflowAndStatusItem> GetStepsByWorkflowAndStatusStream(global::AF.ECT.Shared.GetStepsByWorkflowAndStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetStepsByWorkflowAndStatusStream, null, options, request);
      }
      /// <summary>
      /// Retrieves viewable by group as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.ViewableByGroupItem> GetViewableByGroupStream(global::AF.ECT.Shared.GetViewableByGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetViewableByGroupStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves viewable by group as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.ViewableByGroupItem> GetViewableByGroupStream(global::AF.ECT.Shared.GetViewableByGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetViewableByGroupStream, null, options, request);
      }
      /// <summary>
      /// Retrieves workflow by component as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.WorkflowByCompoItem> GetWorkflowByCompoStream(global::AF.ECT.Shared.GetWorkflowByCompoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkflowByCompoStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves workflow by component as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.WorkflowByCompoItem> GetWorkflowByCompoStream(global::AF.ECT.Shared.GetWorkflowByCompoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetWorkflowByCompoStream, null, options, request);
      }
      /// <summary>
      /// Retrieves workflow from module as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.WorkflowFromModuleItem> GetWorkflowFromModuleStream(global::AF.ECT.Shared.GetWorkflowFromModuleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkflowFromModuleStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves workflow from module as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.WorkflowFromModuleItem> GetWorkflowFromModuleStream(global::AF.ECT.Shared.GetWorkflowFromModuleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetWorkflowFromModuleStream, null, options, request);
      }
      /// <summary>
      /// Retrieves workflow initial status code as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.WorkflowInitialStatusCodeItem> GetWorkflowInitialStatusCodeStream(global::AF.ECT.Shared.GetWorkflowInitialStatusCodeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkflowInitialStatusCodeStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves workflow initial status code as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.WorkflowInitialStatusCodeItem> GetWorkflowInitialStatusCodeStream(global::AF.ECT.Shared.GetWorkflowInitialStatusCodeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetWorkflowInitialStatusCodeStream, null, options, request);
      }
      /// <summary>
      /// Retrieves workflow title as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.WorkflowTitleItem> GetWorkflowTitleStream(global::AF.ECT.Shared.GetWorkflowTitleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkflowTitleStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves workflow title as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.WorkflowTitleItem> GetWorkflowTitleStream(global::AF.ECT.Shared.GetWorkflowTitleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetWorkflowTitleStream, null, options, request);
      }
      /// <summary>
      /// Retrieves workflow title by work status ID as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.WorkflowTitleByWorkStatusIdItem> GetWorkflowTitleByWorkStatusIdStream(global::AF.ECT.Shared.GetWorkflowTitleByWorkStatusIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkflowTitleByWorkStatusIdStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves workflow title by work status ID as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.WorkflowTitleByWorkStatusIdItem> GetWorkflowTitleByWorkStatusIdStream(global::AF.ECT.Shared.GetWorkflowTitleByWorkStatusIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetWorkflowTitleByWorkStatusIdStream, null, options, request);
      }
      /// <summary>
      /// Inserts an action as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.InsertActionItem> InsertActionStream(global::AF.ECT.Shared.InsertActionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertActionStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Inserts an action as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.InsertActionItem> InsertActionStream(global::AF.ECT.Shared.InsertActionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_InsertActionStream, null, options, request);
      }
      /// <summary>
      /// Inserts an option action as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.InsertOptionActionItem> InsertOptionActionStream(global::AF.ECT.Shared.InsertOptionActionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertOptionActionStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Inserts an option action as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.InsertOptionActionItem> InsertOptionActionStream(global::AF.ECT.Shared.InsertOptionActionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_InsertOptionActionStream, null, options, request);
      }
      /// <summary>
      /// Application Warmup Process Methods
      /// Deletes a log entry by ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.DeleteLogByIdResponse DeleteLogById(global::AF.ECT.Shared.DeleteLogByIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteLogById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Application Warmup Process Methods
      /// Deletes a log entry by ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.DeleteLogByIdResponse DeleteLogById(global::AF.ECT.Shared.DeleteLogByIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteLogById, null, options, request);
      }
      /// <summary>
      /// Application Warmup Process Methods
      /// Deletes a log entry by ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.DeleteLogByIdResponse> DeleteLogByIdAsync(global::AF.ECT.Shared.DeleteLogByIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteLogByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Application Warmup Process Methods
      /// Deletes a log entry by ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.DeleteLogByIdResponse> DeleteLogByIdAsync(global::AF.ECT.Shared.DeleteLogByIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteLogById, null, options, request);
      }
      /// <summary>
      /// Finds the last execution date of a process.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.FindProcessLastExecutionDateResponse FindProcessLastExecutionDate(global::AF.ECT.Shared.FindProcessLastExecutionDateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FindProcessLastExecutionDate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Finds the last execution date of a process.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.FindProcessLastExecutionDateResponse FindProcessLastExecutionDate(global::AF.ECT.Shared.FindProcessLastExecutionDateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FindProcessLastExecutionDate, null, options, request);
      }
      /// <summary>
      /// Finds the last execution date of a process.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.FindProcessLastExecutionDateResponse> FindProcessLastExecutionDateAsync(global::AF.ECT.Shared.FindProcessLastExecutionDateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FindProcessLastExecutionDateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Finds the last execution date of a process.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.FindProcessLastExecutionDateResponse> FindProcessLastExecutionDateAsync(global::AF.ECT.Shared.FindProcessLastExecutionDateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FindProcessLastExecutionDate, null, options, request);
      }
      /// <summary>
      /// Finds the last execution date of a process as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.ProcessLastExecutionDateItem> FindProcessLastExecutionDateStream(global::AF.ECT.Shared.FindProcessLastExecutionDateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FindProcessLastExecutionDateStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Finds the last execution date of a process as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.ProcessLastExecutionDateItem> FindProcessLastExecutionDateStream(global::AF.ECT.Shared.FindProcessLastExecutionDateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_FindProcessLastExecutionDateStream, null, options, request);
      }
      /// <summary>
      /// Retrieves all log entries.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetAllLogsResponse GetAllLogs(global::AF.ECT.Shared.EmptyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllLogs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves all log entries.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetAllLogsResponse GetAllLogs(global::AF.ECT.Shared.EmptyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAllLogs, null, options, request);
      }
      /// <summary>
      /// Retrieves all log entries.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetAllLogsResponse> GetAllLogsAsync(global::AF.ECT.Shared.EmptyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllLogsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves all log entries.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetAllLogsResponse> GetAllLogsAsync(global::AF.ECT.Shared.EmptyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAllLogs, null, options, request);
      }
      /// <summary>
      /// Retrieves all log entries as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.LogItem> GetAllLogsStream(global::AF.ECT.Shared.EmptyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllLogsStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves all log entries as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.LogItem> GetAllLogsStream(global::AF.ECT.Shared.EmptyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetAllLogsStream, null, options, request);
      }
      /// <summary>
      /// Inserts a new log entry with process name, execution date, and message.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.InsertLogResponse InsertLog(global::AF.ECT.Shared.InsertLogRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertLog(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Inserts a new log entry with process name, execution date, and message.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.InsertLogResponse InsertLog(global::AF.ECT.Shared.InsertLogRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_InsertLog, null, options, request);
      }
      /// <summary>
      /// Inserts a new log entry with process name, execution date, and message.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.InsertLogResponse> InsertLogAsync(global::AF.ECT.Shared.InsertLogRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertLogAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Inserts a new log entry with process name, execution date, and message.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.InsertLogResponse> InsertLogAsync(global::AF.ECT.Shared.InsertLogRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_InsertLog, null, options, request);
      }
      /// <summary>
      /// Checks if a process is active.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.IsProcessActiveResponse IsProcessActive(global::AF.ECT.Shared.IsProcessActiveRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IsProcessActive(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Checks if a process is active.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.IsProcessActiveResponse IsProcessActive(global::AF.ECT.Shared.IsProcessActiveRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_IsProcessActive, null, options, request);
      }
      /// <summary>
      /// Checks if a process is active.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.IsProcessActiveResponse> IsProcessActiveAsync(global::AF.ECT.Shared.IsProcessActiveRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IsProcessActiveAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Checks if a process is active.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.IsProcessActiveResponse> IsProcessActiveAsync(global::AF.ECT.Shared.IsProcessActiveRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_IsProcessActive, null, options, request);
      }
      /// <summary>
      /// Checks if a process is active as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.ProcessActiveItem> IsProcessActiveStream(global::AF.ECT.Shared.IsProcessActiveRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IsProcessActiveStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Checks if a process is active as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.ProcessActiveItem> IsProcessActiveStream(global::AF.ECT.Shared.IsProcessActiveRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_IsProcessActiveStream, null, options, request);
      }
      /// <summary>
      /// Workflow Methods
      /// Retrieves a workflow by its ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetWorkflowByIdResponse GetWorkflowById(global::AF.ECT.Shared.GetWorkflowByIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkflowById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Workflow Methods
      /// Retrieves a workflow by its ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetWorkflowByIdResponse GetWorkflowById(global::AF.ECT.Shared.GetWorkflowByIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetWorkflowById, null, options, request);
      }
      /// <summary>
      /// Workflow Methods
      /// Retrieves a workflow by its ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetWorkflowByIdResponse> GetWorkflowByIdAsync(global::AF.ECT.Shared.GetWorkflowByIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkflowByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Workflow Methods
      /// Retrieves a workflow by its ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetWorkflowByIdResponse> GetWorkflowByIdAsync(global::AF.ECT.Shared.GetWorkflowByIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetWorkflowById, null, options, request);
      }
      /// <summary>
      /// Retrieves a workflow by its ID as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.WorkflowByIdItem> GetWorkflowByIdStream(global::AF.ECT.Shared.GetWorkflowByIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkflowByIdStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a workflow by its ID as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.WorkflowByIdItem> GetWorkflowByIdStream(global::AF.ECT.Shared.GetWorkflowByIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetWorkflowByIdStream, null, options, request);
      }
      /// <summary>
      /// Retrieves workflows by reference ID and optionally module.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetWorkflowsByRefIdResponse GetWorkflowsByRefId(global::AF.ECT.Shared.GetWorkflowsByRefIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkflowsByRefId(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves workflows by reference ID and optionally module.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetWorkflowsByRefIdResponse GetWorkflowsByRefId(global::AF.ECT.Shared.GetWorkflowsByRefIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetWorkflowsByRefId, null, options, request);
      }
      /// <summary>
      /// Retrieves workflows by reference ID and optionally module.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetWorkflowsByRefIdResponse> GetWorkflowsByRefIdAsync(global::AF.ECT.Shared.GetWorkflowsByRefIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkflowsByRefIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves workflows by reference ID and optionally module.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetWorkflowsByRefIdResponse> GetWorkflowsByRefIdAsync(global::AF.ECT.Shared.GetWorkflowsByRefIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetWorkflowsByRefId, null, options, request);
      }
      /// <summary>
      /// Retrieves workflows by reference ID as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.WorkflowByRefIdItem> GetWorkflowsByRefIdStream(global::AF.ECT.Shared.GetWorkflowsByRefIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkflowsByRefIdStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves workflows by reference ID as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.WorkflowByRefIdItem> GetWorkflowsByRefIdStream(global::AF.ECT.Shared.GetWorkflowsByRefIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetWorkflowsByRefIdStream, null, options, request);
      }
      /// <summary>
      /// Retrieves workflows by reference ID, module, and workflow type.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetWorkflowsByRefIdAndTypeResponse GetWorkflowsByRefIdAndType(global::AF.ECT.Shared.GetWorkflowsByRefIdAndTypeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkflowsByRefIdAndType(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves workflows by reference ID, module, and workflow type.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetWorkflowsByRefIdAndTypeResponse GetWorkflowsByRefIdAndType(global::AF.ECT.Shared.GetWorkflowsByRefIdAndTypeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetWorkflowsByRefIdAndType, null, options, request);
      }
      /// <summary>
      /// Retrieves workflows by reference ID, module, and workflow type.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetWorkflowsByRefIdAndTypeResponse> GetWorkflowsByRefIdAndTypeAsync(global::AF.ECT.Shared.GetWorkflowsByRefIdAndTypeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkflowsByRefIdAndTypeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves workflows by reference ID, module, and workflow type.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetWorkflowsByRefIdAndTypeResponse> GetWorkflowsByRefIdAndTypeAsync(global::AF.ECT.Shared.GetWorkflowsByRefIdAndTypeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetWorkflowsByRefIdAndType, null, options, request);
      }
      /// <summary>
      /// Retrieves workflows by reference ID and type as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.WorkflowByRefIdAndTypeItem> GetWorkflowsByRefIdAndTypeStream(global::AF.ECT.Shared.GetWorkflowsByRefIdAndTypeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkflowsByRefIdAndTypeStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves workflows by reference ID and type as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.WorkflowByRefIdAndTypeItem> GetWorkflowsByRefIdAndTypeStream(global::AF.ECT.Shared.GetWorkflowsByRefIdAndTypeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetWorkflowsByRefIdAndTypeStream, null, options, request);
      }
      /// <summary>
      /// Retrieves all workflow types.
      /// Caching hint: Workflow types are static reference data; cache for extended periods (1-24 hours).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetWorkflowTypesResponse GetWorkflowTypes(global::AF.ECT.Shared.EmptyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkflowTypes(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves all workflow types.
      /// Caching hint: Workflow types are static reference data; cache for extended periods (1-24 hours).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetWorkflowTypesResponse GetWorkflowTypes(global::AF.ECT.Shared.EmptyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetWorkflowTypes, null, options, request);
      }
      /// <summary>
      /// Retrieves all workflow types.
      /// Caching hint: Workflow types are static reference data; cache for extended periods (1-24 hours).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetWorkflowTypesResponse> GetWorkflowTypesAsync(global::AF.ECT.Shared.EmptyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkflowTypesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves all workflow types.
      /// Caching hint: Workflow types are static reference data; cache for extended periods (1-24 hours).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetWorkflowTypesResponse> GetWorkflowTypesAsync(global::AF.ECT.Shared.EmptyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetWorkflowTypes, null, options, request);
      }
      /// <summary>
      /// Retrieves all workflow types as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.WorkflowTypeItem> GetWorkflowTypesStream(global::AF.ECT.Shared.EmptyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkflowTypesStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves all workflow types as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.WorkflowTypeItem> GetWorkflowTypesStream(global::AF.ECT.Shared.EmptyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetWorkflowTypesStream, null, options, request);
      }
      /// <summary>
      /// Inserts a new workflow with reference ID, module, type, text, and user ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.InsertWorkflowResponse InsertWorkflow(global::AF.ECT.Shared.InsertWorkflowRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertWorkflow(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Inserts a new workflow with reference ID, module, type, text, and user ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.InsertWorkflowResponse InsertWorkflow(global::AF.ECT.Shared.InsertWorkflowRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_InsertWorkflow, null, options, request);
      }
      /// <summary>
      /// Inserts a new workflow with reference ID, module, type, text, and user ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.InsertWorkflowResponse> InsertWorkflowAsync(global::AF.ECT.Shared.InsertWorkflowRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertWorkflowAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Inserts a new workflow with reference ID, module, type, text, and user ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.InsertWorkflowResponse> InsertWorkflowAsync(global::AF.ECT.Shared.InsertWorkflowRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_InsertWorkflow, null, options, request);
      }
      /// <summary>
      /// Updates an existing workflow with new text and user ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.UpdateWorkflowResponse UpdateWorkflow(global::AF.ECT.Shared.UpdateWorkflowRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateWorkflow(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an existing workflow with new text and user ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.UpdateWorkflowResponse UpdateWorkflow(global::AF.ECT.Shared.UpdateWorkflowRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateWorkflow, null, options, request);
      }
      /// <summary>
      /// Updates an existing workflow with new text and user ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.UpdateWorkflowResponse> UpdateWorkflowAsync(global::AF.ECT.Shared.UpdateWorkflowRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateWorkflowAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an existing workflow with new text and user ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.UpdateWorkflowResponse> UpdateWorkflowAsync(global::AF.ECT.Shared.UpdateWorkflowRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateWorkflow, null, options, request);
      }
      /// <summary>
      /// Workstatus Methods
      /// Retrieves a workstatus by its ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetWorkstatusByIdResponse GetWorkstatusById(global::AF.ECT.Shared.GetWorkstatusByIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkstatusById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Workstatus Methods
      /// Retrieves a workstatus by its ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetWorkstatusByIdResponse GetWorkstatusById(global::AF.ECT.Shared.GetWorkstatusByIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetWorkstatusById, null, options, request);
      }
      /// <summary>
      /// Workstatus Methods
      /// Retrieves a workstatus by its ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetWorkstatusByIdResponse> GetWorkstatusByIdAsync(global::AF.ECT.Shared.GetWorkstatusByIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkstatusByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Workstatus Methods
      /// Retrieves a workstatus by its ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetWorkstatusByIdResponse> GetWorkstatusByIdAsync(global::AF.ECT.Shared.GetWorkstatusByIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetWorkstatusById, null, options, request);
      }
      /// <summary>
      /// Retrieves a workstatus by its ID as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.WorkstatusByIdItem> GetWorkstatusByIdStream(global::AF.ECT.Shared.GetWorkstatusByIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkstatusByIdStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a workstatus by its ID as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.WorkstatusByIdItem> GetWorkstatusByIdStream(global::AF.ECT.Shared.GetWorkstatusByIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetWorkstatusByIdStream, null, options, request);
      }
      /// <summary>
      /// Retrieves workstatuses by reference ID and optionally module.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetWorkstatusesByRefIdResponse GetWorkstatusesByRefId(global::AF.ECT.Shared.GetWorkstatusesByRefIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkstatusesByRefId(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves workstatuses by reference ID and optionally module.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetWorkstatusesByRefIdResponse GetWorkstatusesByRefId(global::AF.ECT.Shared.GetWorkstatusesByRefIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetWorkstatusesByRefId, null, options, request);
      }
      /// <summary>
      /// Retrieves workstatuses by reference ID and optionally module.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetWorkstatusesByRefIdResponse> GetWorkstatusesByRefIdAsync(global::AF.ECT.Shared.GetWorkstatusesByRefIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkstatusesByRefIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves workstatuses by reference ID and optionally module.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetWorkstatusesByRefIdResponse> GetWorkstatusesByRefIdAsync(global::AF.ECT.Shared.GetWorkstatusesByRefIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetWorkstatusesByRefId, null, options, request);
      }
      /// <summary>
      /// Retrieves workstatuses by reference ID as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.WorkstatusByRefIdItem> GetWorkstatusesByRefIdStream(global::AF.ECT.Shared.GetWorkstatusesByRefIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkstatusesByRefIdStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves workstatuses by reference ID as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.WorkstatusByRefIdItem> GetWorkstatusesByRefIdStream(global::AF.ECT.Shared.GetWorkstatusesByRefIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetWorkstatusesByRefIdStream, null, options, request);
      }
      /// <summary>
      /// Retrieves workstatuses by reference ID, module, and workstatus type.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetWorkstatusesByRefIdAndTypeResponse GetWorkstatusesByRefIdAndType(global::AF.ECT.Shared.GetWorkstatusesByRefIdAndTypeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkstatusesByRefIdAndType(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves workstatuses by reference ID, module, and workstatus type.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetWorkstatusesByRefIdAndTypeResponse GetWorkstatusesByRefIdAndType(global::AF.ECT.Shared.GetWorkstatusesByRefIdAndTypeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetWorkstatusesByRefIdAndType, null, options, request);
      }
      /// <summary>
      /// Retrieves workstatuses by reference ID, module, and workstatus type.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetWorkstatusesByRefIdAndTypeResponse> GetWorkstatusesByRefIdAndTypeAsync(global::AF.ECT.Shared.GetWorkstatusesByRefIdAndTypeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkstatusesByRefIdAndTypeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves workstatuses by reference ID, module, and workstatus type.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetWorkstatusesByRefIdAndTypeResponse> GetWorkstatusesByRefIdAndTypeAsync(global::AF.ECT.Shared.GetWorkstatusesByRefIdAndTypeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetWorkstatusesByRefIdAndType, null, options, request);
      }
      /// <summary>
      /// Retrieves workstatuses by reference ID and type as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.WorkstatusByRefIdAndTypeItem> GetWorkstatusesByRefIdAndTypeStream(global::AF.ECT.Shared.GetWorkstatusesByRefIdAndTypeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkstatusesByRefIdAndTypeStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves workstatuses by reference ID and type as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.WorkstatusByRefIdAndTypeItem> GetWorkstatusesByRefIdAndTypeStream(global::AF.ECT.Shared.GetWorkstatusesByRefIdAndTypeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetWorkstatusesByRefIdAndTypeStream, null, options, request);
      }
      /// <summary>
      /// Retrieves all workstatus types.
      /// Caching hint: Workstatus types are static reference data; cache for extended periods (1-24 hours).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetWorkstatusTypesResponse GetWorkstatusTypes(global::AF.ECT.Shared.EmptyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkstatusTypes(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves all workstatus types.
      /// Caching hint: Workstatus types are static reference data; cache for extended periods (1-24 hours).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.GetWorkstatusTypesResponse GetWorkstatusTypes(global::AF.ECT.Shared.EmptyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetWorkstatusTypes, null, options, request);
      }
      /// <summary>
      /// Retrieves all workstatus types.
      /// Caching hint: Workstatus types are static reference data; cache for extended periods (1-24 hours).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetWorkstatusTypesResponse> GetWorkstatusTypesAsync(global::AF.ECT.Shared.EmptyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkstatusTypesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves all workstatus types.
      /// Caching hint: Workstatus types are static reference data; cache for extended periods (1-24 hours).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.GetWorkstatusTypesResponse> GetWorkstatusTypesAsync(global::AF.ECT.Shared.EmptyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetWorkstatusTypes, null, options, request);
      }
      /// <summary>
      /// Retrieves all workstatus types as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.WorkstatusTypeItem> GetWorkstatusTypesStream(global::AF.ECT.Shared.EmptyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkstatusTypesStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves all workstatus types as a stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::AF.ECT.Shared.WorkstatusTypeItem> GetWorkstatusTypesStream(global::AF.ECT.Shared.EmptyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetWorkstatusTypesStream, null, options, request);
      }
      /// <summary>
      /// Inserts a new workstatus with reference ID, module, type, text, and user ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.InsertWorkstatusResponse InsertWorkstatus(global::AF.ECT.Shared.InsertWorkstatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertWorkstatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Inserts a new workstatus with reference ID, module, type, text, and user ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.InsertWorkstatusResponse InsertWorkstatus(global::AF.ECT.Shared.InsertWorkstatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_InsertWorkstatus, null, options, request);
      }
      /// <summary>
      /// Inserts a new workstatus with reference ID, module, type, text, and user ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.InsertWorkstatusResponse> InsertWorkstatusAsync(global::AF.ECT.Shared.InsertWorkstatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertWorkstatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Inserts a new workstatus with reference ID, module, type, text, and user ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.InsertWorkstatusResponse> InsertWorkstatusAsync(global::AF.ECT.Shared.InsertWorkstatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_InsertWorkstatus, null, options, request);
      }
      /// <summary>
      /// Updates an existing workstatus with new text and user ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.UpdateWorkstatusResponse UpdateWorkstatus(global::AF.ECT.Shared.UpdateWorkstatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateWorkstatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an existing workstatus with new text and user ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AF.ECT.Shared.UpdateWorkstatusResponse UpdateWorkstatus(global::AF.ECT.Shared.UpdateWorkstatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateWorkstatus, null, options, request);
      }
      /// <summary>
      /// Updates an existing workstatus with new text and user ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.UpdateWorkstatusResponse> UpdateWorkstatusAsync(global::AF.ECT.Shared.UpdateWorkstatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateWorkstatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an existing workstatus with new text and user ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AF.ECT.Shared.UpdateWorkstatusResponse> UpdateWorkstatusAsync(global::AF.ECT.Shared.UpdateWorkstatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateWorkstatus, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override WorkflowServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new WorkflowServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(WorkflowServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetReinvestigationRequests, serviceImpl.GetReinvestigationRequests)
          .AddMethod(__Method_GetReinvestigationRequestsStream, serviceImpl.GetReinvestigationRequestsStream)
          .AddMethod(__Method_GetMailingListForLOD, serviceImpl.GetMailingListForLOD)
          .AddMethod(__Method_GetMailingListForLODStream, serviceImpl.GetMailingListForLODStream)
          .AddMethod(__Method_GetManagedUsers, serviceImpl.GetManagedUsers)
          .AddMethod(__Method_GetManagedUsersStream, serviceImpl.GetManagedUsersStream)
          .AddMethod(__Method_GetMembersUserId, serviceImpl.GetMembersUserId)
          .AddMethod(__Method_GetUserAltTitle, serviceImpl.GetUserAltTitle)
          .AddMethod(__Method_GetUserAltTitleStream, serviceImpl.GetUserAltTitleStream)
          .AddMethod(__Method_GetUserAltTitleByGroupCompo, serviceImpl.GetUserAltTitleByGroupCompo)
          .AddMethod(__Method_GetUserAltTitleByGroupCompoStream, serviceImpl.GetUserAltTitleByGroupCompoStream)
          .AddMethod(__Method_GetUserName, serviceImpl.GetUserName)
          .AddMethod(__Method_GetUserNameStream, serviceImpl.GetUserNameStream)
          .AddMethod(__Method_GetUsersAltTitleByGroup, serviceImpl.GetUsersAltTitleByGroup)
          .AddMethod(__Method_GetUsersAltTitleByGroupStream, serviceImpl.GetUsersAltTitleByGroupStream)
          .AddMethod(__Method_GetUsersOnline, serviceImpl.GetUsersOnline)
          .AddMethod(__Method_GetUsersOnlineStream, serviceImpl.GetUsersOnlineStream)
          .AddMethod(__Method_GetWhoisStream, serviceImpl.GetWhoisStream)
          .AddMethod(__Method_HasHQTechAccountStream, serviceImpl.HasHQTechAccountStream)
          .AddMethod(__Method_IsFinalStatusCodeStream, serviceImpl.IsFinalStatusCodeStream)
          .AddMethod(__Method_UpdateLoginStream, serviceImpl.UpdateLoginStream)
          .AddMethod(__Method_GetWhois, serviceImpl.GetWhois)
          .AddMethod(__Method_HasHQTechAccount, serviceImpl.HasHQTechAccount)
          .AddMethod(__Method_IsFinalStatusCode, serviceImpl.IsFinalStatusCode)
          .AddMethod(__Method_Logout, serviceImpl.Logout)
          .AddMethod(__Method_RegisterUser, serviceImpl.RegisterUser)
          .AddMethod(__Method_RegisterUserRole, serviceImpl.RegisterUserRole)
          .AddMethod(__Method_SearchMemberData, serviceImpl.SearchMemberData)
          .AddMethod(__Method_SearchMemberDataStream, serviceImpl.SearchMemberDataStream)
          .AddMethod(__Method_SearchMemberDataTest, serviceImpl.SearchMemberDataTest)
          .AddMethod(__Method_SearchMemberDataTestStream, serviceImpl.SearchMemberDataTestStream)
          .AddMethod(__Method_UpdateAccountStatus, serviceImpl.UpdateAccountStatus)
          .AddMethod(__Method_UpdateLogin, serviceImpl.UpdateLogin)
          .AddMethod(__Method_UpdateManagedSettings, serviceImpl.UpdateManagedSettings)
          .AddMethod(__Method_UpdateUserAltTitle, serviceImpl.UpdateUserAltTitle)
          .AddMethod(__Method_AddSignature, serviceImpl.AddSignature)
          .AddMethod(__Method_CopyActions, serviceImpl.CopyActions)
          .AddMethod(__Method_CopyRules, serviceImpl.CopyRules)
          .AddMethod(__Method_CopyWorkflow, serviceImpl.CopyWorkflow)
          .AddMethod(__Method_DeleteStatusCode, serviceImpl.DeleteStatusCode)
          .AddMethod(__Method_GetActionsByStep, serviceImpl.GetActionsByStep)
          .AddMethod(__Method_GetActiveCases, serviceImpl.GetActiveCases)
          .AddMethod(__Method_GetAllFindingByReasonOf, serviceImpl.GetAllFindingByReasonOf)
          .AddMethod(__Method_GetAllLocks, serviceImpl.GetAllLocks)
          .AddMethod(__Method_GetCancelReasons, serviceImpl.GetCancelReasons)
          .AddMethod(__Method_GetCreatableByGroup, serviceImpl.GetCreatableByGroup)
          .AddMethod(__Method_GetFindingByReasonOfById, serviceImpl.GetFindingByReasonOfById)
          .AddMethod(__Method_GetFindings, serviceImpl.GetFindings)
          .AddMethod(__Method_GetModuleFromWorkflow, serviceImpl.GetModuleFromWorkflow)
          .AddMethod(__Method_GetPageAccessByGroup, serviceImpl.GetPageAccessByGroup)
          .AddMethod(__Method_GetPageAccessByWorkflowView, serviceImpl.GetPageAccessByWorkflowView)
          .AddMethod(__Method_GetPagesByWorkflowId, serviceImpl.GetPagesByWorkflowId)
          .AddMethod(__Method_GetPermissions, serviceImpl.GetPermissions)
          .AddMethod(__Method_GetPermissionsByCompo, serviceImpl.GetPermissionsByCompo)
          .AddMethod(__Method_GetReturnReasons, serviceImpl.GetReturnReasons)
          .AddMethod(__Method_GetRwoaReasons, serviceImpl.GetRwoaReasons)
          .AddMethod(__Method_GetStatusCodesByCompo, serviceImpl.GetStatusCodesByCompo)
          .AddMethod(__Method_GetStatusCodesByCompoAndModule, serviceImpl.GetStatusCodesByCompoAndModule)
          .AddMethod(__Method_GetStatusCodesBySignCode, serviceImpl.GetStatusCodesBySignCode)
          .AddMethod(__Method_GetStatusCodesByWorkflow, serviceImpl.GetStatusCodesByWorkflow)
          .AddMethod(__Method_GetStatusCodesByWorkflowAndAccessScope, serviceImpl.GetStatusCodesByWorkflowAndAccessScope)
          .AddMethod(__Method_GetStatusCodeScope, serviceImpl.GetStatusCodeScope)
          .AddMethod(__Method_GetStepsByWorkflow, serviceImpl.GetStepsByWorkflow)
          .AddMethod(__Method_GetStepsByWorkflowAndStatus, serviceImpl.GetStepsByWorkflowAndStatus)
          .AddMethod(__Method_GetViewableByGroup, serviceImpl.GetViewableByGroup)
          .AddMethod(__Method_GetWorkflowByCompo, serviceImpl.GetWorkflowByCompo)
          .AddMethod(__Method_GetWorkflowFromModule, serviceImpl.GetWorkflowFromModule)
          .AddMethod(__Method_GetWorkflowInitialStatusCode, serviceImpl.GetWorkflowInitialStatusCode)
          .AddMethod(__Method_GetWorkflowTitle, serviceImpl.GetWorkflowTitle)
          .AddMethod(__Method_GetWorkflowTitleByWorkStatusId, serviceImpl.GetWorkflowTitleByWorkStatusId)
          .AddMethod(__Method_InsertAction, serviceImpl.InsertAction)
          .AddMethod(__Method_InsertOptionAction, serviceImpl.InsertOptionAction)
          .AddMethod(__Method_AddSignatureStream, serviceImpl.AddSignatureStream)
          .AddMethod(__Method_CopyWorkflowStream, serviceImpl.CopyWorkflowStream)
          .AddMethod(__Method_GetActionsByStepStream, serviceImpl.GetActionsByStepStream)
          .AddMethod(__Method_GetActiveCasesStream, serviceImpl.GetActiveCasesStream)
          .AddMethod(__Method_GetAllFindingByReasonOfStream, serviceImpl.GetAllFindingByReasonOfStream)
          .AddMethod(__Method_GetAllLocksStream, serviceImpl.GetAllLocksStream)
          .AddMethod(__Method_GetCancelReasonsStream, serviceImpl.GetCancelReasonsStream)
          .AddMethod(__Method_GetCreatableByGroupStream, serviceImpl.GetCreatableByGroupStream)
          .AddMethod(__Method_GetFindingByReasonOfByIdStream, serviceImpl.GetFindingByReasonOfByIdStream)
          .AddMethod(__Method_GetFindingsStream, serviceImpl.GetFindingsStream)
          .AddMethod(__Method_GetModuleFromWorkflowStream, serviceImpl.GetModuleFromWorkflowStream)
          .AddMethod(__Method_GetPageAccessByGroupStream, serviceImpl.GetPageAccessByGroupStream)
          .AddMethod(__Method_GetPageAccessByWorkflowViewStream, serviceImpl.GetPageAccessByWorkflowViewStream)
          .AddMethod(__Method_GetPagesByWorkflowIdStream, serviceImpl.GetPagesByWorkflowIdStream)
          .AddMethod(__Method_GetPermissionsStream, serviceImpl.GetPermissionsStream)
          .AddMethod(__Method_GetPermissionsByCompoStream, serviceImpl.GetPermissionsByCompoStream)
          .AddMethod(__Method_GetReturnReasonsStream, serviceImpl.GetReturnReasonsStream)
          .AddMethod(__Method_GetRwoaReasonsStream, serviceImpl.GetRwoaReasonsStream)
          .AddMethod(__Method_GetStatusCodesByCompoStream, serviceImpl.GetStatusCodesByCompoStream)
          .AddMethod(__Method_GetStatusCodesByCompoAndModuleStream, serviceImpl.GetStatusCodesByCompoAndModuleStream)
          .AddMethod(__Method_GetStatusCodesBySignCodeStream, serviceImpl.GetStatusCodesBySignCodeStream)
          .AddMethod(__Method_GetStatusCodesByWorkflowStream, serviceImpl.GetStatusCodesByWorkflowStream)
          .AddMethod(__Method_GetStatusCodesByWorkflowAndAccessScopeStream, serviceImpl.GetStatusCodesByWorkflowAndAccessScopeStream)
          .AddMethod(__Method_GetStatusCodeScopeStream, serviceImpl.GetStatusCodeScopeStream)
          .AddMethod(__Method_GetStepsByWorkflowStream, serviceImpl.GetStepsByWorkflowStream)
          .AddMethod(__Method_GetStepsByWorkflowAndStatusStream, serviceImpl.GetStepsByWorkflowAndStatusStream)
          .AddMethod(__Method_GetViewableByGroupStream, serviceImpl.GetViewableByGroupStream)
          .AddMethod(__Method_GetWorkflowByCompoStream, serviceImpl.GetWorkflowByCompoStream)
          .AddMethod(__Method_GetWorkflowFromModuleStream, serviceImpl.GetWorkflowFromModuleStream)
          .AddMethod(__Method_GetWorkflowInitialStatusCodeStream, serviceImpl.GetWorkflowInitialStatusCodeStream)
          .AddMethod(__Method_GetWorkflowTitleStream, serviceImpl.GetWorkflowTitleStream)
          .AddMethod(__Method_GetWorkflowTitleByWorkStatusIdStream, serviceImpl.GetWorkflowTitleByWorkStatusIdStream)
          .AddMethod(__Method_InsertActionStream, serviceImpl.InsertActionStream)
          .AddMethod(__Method_InsertOptionActionStream, serviceImpl.InsertOptionActionStream)
          .AddMethod(__Method_DeleteLogById, serviceImpl.DeleteLogById)
          .AddMethod(__Method_FindProcessLastExecutionDate, serviceImpl.FindProcessLastExecutionDate)
          .AddMethod(__Method_FindProcessLastExecutionDateStream, serviceImpl.FindProcessLastExecutionDateStream)
          .AddMethod(__Method_GetAllLogs, serviceImpl.GetAllLogs)
          .AddMethod(__Method_GetAllLogsStream, serviceImpl.GetAllLogsStream)
          .AddMethod(__Method_InsertLog, serviceImpl.InsertLog)
          .AddMethod(__Method_IsProcessActive, serviceImpl.IsProcessActive)
          .AddMethod(__Method_IsProcessActiveStream, serviceImpl.IsProcessActiveStream)
          .AddMethod(__Method_GetWorkflowById, serviceImpl.GetWorkflowById)
          .AddMethod(__Method_GetWorkflowByIdStream, serviceImpl.GetWorkflowByIdStream)
          .AddMethod(__Method_GetWorkflowsByRefId, serviceImpl.GetWorkflowsByRefId)
          .AddMethod(__Method_GetWorkflowsByRefIdStream, serviceImpl.GetWorkflowsByRefIdStream)
          .AddMethod(__Method_GetWorkflowsByRefIdAndType, serviceImpl.GetWorkflowsByRefIdAndType)
          .AddMethod(__Method_GetWorkflowsByRefIdAndTypeStream, serviceImpl.GetWorkflowsByRefIdAndTypeStream)
          .AddMethod(__Method_GetWorkflowTypes, serviceImpl.GetWorkflowTypes)
          .AddMethod(__Method_GetWorkflowTypesStream, serviceImpl.GetWorkflowTypesStream)
          .AddMethod(__Method_InsertWorkflow, serviceImpl.InsertWorkflow)
          .AddMethod(__Method_UpdateWorkflow, serviceImpl.UpdateWorkflow)
          .AddMethod(__Method_GetWorkstatusById, serviceImpl.GetWorkstatusById)
          .AddMethod(__Method_GetWorkstatusByIdStream, serviceImpl.GetWorkstatusByIdStream)
          .AddMethod(__Method_GetWorkstatusesByRefId, serviceImpl.GetWorkstatusesByRefId)
          .AddMethod(__Method_GetWorkstatusesByRefIdStream, serviceImpl.GetWorkstatusesByRefIdStream)
          .AddMethod(__Method_GetWorkstatusesByRefIdAndType, serviceImpl.GetWorkstatusesByRefIdAndType)
          .AddMethod(__Method_GetWorkstatusesByRefIdAndTypeStream, serviceImpl.GetWorkstatusesByRefIdAndTypeStream)
          .AddMethod(__Method_GetWorkstatusTypes, serviceImpl.GetWorkstatusTypes)
          .AddMethod(__Method_GetWorkstatusTypesStream, serviceImpl.GetWorkstatusTypesStream)
          .AddMethod(__Method_InsertWorkstatus, serviceImpl.InsertWorkstatus)
          .AddMethod(__Method_UpdateWorkstatus, serviceImpl.UpdateWorkstatus).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, WorkflowServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetReinvestigationRequests, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.GetReinvestigationRequestsRequest, global::AF.ECT.Shared.GetReinvestigationRequestsResponse>(serviceImpl.GetReinvestigationRequests));
      serviceBinder.AddMethod(__Method_GetReinvestigationRequestsStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::AF.ECT.Shared.GetReinvestigationRequestsRequest, global::AF.ECT.Shared.ReinvestigationRequestItem>(serviceImpl.GetReinvestigationRequestsStream));
      serviceBinder.AddMethod(__Method_GetMailingListForLOD, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.GetMailingListForLODRequest, global::AF.ECT.Shared.GetMailingListForLODResponse>(serviceImpl.GetMailingListForLOD));
      serviceBinder.AddMethod(__Method_GetMailingListForLODStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::AF.ECT.Shared.GetMailingListForLODRequest, global::AF.ECT.Shared.MailingListItem>(serviceImpl.GetMailingListForLODStream));
      serviceBinder.AddMethod(__Method_GetManagedUsers, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.GetManagedUsersRequest, global::AF.ECT.Shared.GetManagedUsersResponse>(serviceImpl.GetManagedUsers));
      serviceBinder.AddMethod(__Method_GetManagedUsersStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::AF.ECT.Shared.GetManagedUsersRequest, global::AF.ECT.Shared.ManagedUserItem>(serviceImpl.GetManagedUsersStream));
      serviceBinder.AddMethod(__Method_GetMembersUserId, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.GetMembersUserIdRequest, global::AF.ECT.Shared.GetMembersUserIdResponse>(serviceImpl.GetMembersUserId));
      serviceBinder.AddMethod(__Method_GetUserAltTitle, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.GetUserAltTitleRequest, global::AF.ECT.Shared.GetUserAltTitleResponse>(serviceImpl.GetUserAltTitle));
      serviceBinder.AddMethod(__Method_GetUserAltTitleStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::AF.ECT.Shared.GetUserAltTitleRequest, global::AF.ECT.Shared.UserAltTitleItem>(serviceImpl.GetUserAltTitleStream));
      serviceBinder.AddMethod(__Method_GetUserAltTitleByGroupCompo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.GetUserAltTitleByGroupCompoRequest, global::AF.ECT.Shared.GetUserAltTitleByGroupCompoResponse>(serviceImpl.GetUserAltTitleByGroupCompo));
      serviceBinder.AddMethod(__Method_GetUserAltTitleByGroupCompoStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::AF.ECT.Shared.GetUserAltTitleByGroupCompoRequest, global::AF.ECT.Shared.UserAltTitleByGroupCompoItem>(serviceImpl.GetUserAltTitleByGroupCompoStream));
      serviceBinder.AddMethod(__Method_GetUserName, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.GetUserNameRequest, global::AF.ECT.Shared.GetUserNameResponse>(serviceImpl.GetUserName));
      serviceBinder.AddMethod(__Method_GetUserNameStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::AF.ECT.Shared.GetUserNameRequest, global::AF.ECT.Shared.UserNameItem>(serviceImpl.GetUserNameStream));
      serviceBinder.AddMethod(__Method_GetUsersAltTitleByGroup, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.GetUsersAltTitleByGroupRequest, global::AF.ECT.Shared.GetUsersAltTitleByGroupResponse>(serviceImpl.GetUsersAltTitleByGroup));
      serviceBinder.AddMethod(__Method_GetUsersAltTitleByGroupStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::AF.ECT.Shared.GetUsersAltTitleByGroupRequest, global::AF.ECT.Shared.UsersAltTitleByGroupItem>(serviceImpl.GetUsersAltTitleByGroupStream));
      serviceBinder.AddMethod(__Method_GetUsersOnline, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.EmptyRequest, global::AF.ECT.Shared.GetUsersOnlineResponse>(serviceImpl.GetUsersOnline));
      serviceBinder.AddMethod(__Method_GetUsersOnlineStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::AF.ECT.Shared.EmptyRequest, global::AF.ECT.Shared.UserOnlineItem>(serviceImpl.GetUsersOnlineStream));
      serviceBinder.AddMethod(__Method_GetWhoisStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::AF.ECT.Shared.GetWhoisRequest, global::AF.ECT.Shared.WhoisItem>(serviceImpl.GetWhoisStream));
      serviceBinder.AddMethod(__Method_HasHQTechAccountStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::AF.ECT.Shared.HasHQTechAccountRequest, global::AF.ECT.Shared.HQTechAccountItem>(serviceImpl.HasHQTechAccountStream));
      serviceBinder.AddMethod(__Method_IsFinalStatusCodeStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::AF.ECT.Shared.IsFinalStatusCodeRequest, global::AF.ECT.Shared.FinalStatusCodeItem>(serviceImpl.IsFinalStatusCodeStream));
      serviceBinder.AddMethod(__Method_UpdateLoginStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::AF.ECT.Shared.UpdateLoginRequest, global::AF.ECT.Shared.LoginUpdateItem>(serviceImpl.UpdateLoginStream));
      serviceBinder.AddMethod(__Method_GetWhois, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.GetWhoisRequest, global::AF.ECT.Shared.GetWhoisResponse>(serviceImpl.GetWhois));
      serviceBinder.AddMethod(__Method_HasHQTechAccount, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.HasHQTechAccountRequest, global::AF.ECT.Shared.HasHQTechAccountResponse>(serviceImpl.HasHQTechAccount));
      serviceBinder.AddMethod(__Method_IsFinalStatusCode, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.IsFinalStatusCodeRequest, global::AF.ECT.Shared.IsFinalStatusCodeResponse>(serviceImpl.IsFinalStatusCode));
      serviceBinder.AddMethod(__Method_Logout, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.LogoutRequest, global::AF.ECT.Shared.LogoutResponse>(serviceImpl.Logout));
      serviceBinder.AddMethod(__Method_RegisterUser, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.RegisterUserRequest, global::AF.ECT.Shared.RegisterUserResponse>(serviceImpl.RegisterUser));
      serviceBinder.AddMethod(__Method_RegisterUserRole, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.RegisterUserRoleRequest, global::AF.ECT.Shared.RegisterUserRoleResponse>(serviceImpl.RegisterUserRole));
      serviceBinder.AddMethod(__Method_SearchMemberData, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.SearchMemberDataRequest, global::AF.ECT.Shared.SearchMemberDataResponse>(serviceImpl.SearchMemberData));
      serviceBinder.AddMethod(__Method_SearchMemberDataStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::AF.ECT.Shared.SearchMemberDataRequest, global::AF.ECT.Shared.MemberDataItem>(serviceImpl.SearchMemberDataStream));
      serviceBinder.AddMethod(__Method_SearchMemberDataTest, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.SearchMemberDataTestRequest, global::AF.ECT.Shared.SearchMemberDataTestResponse>(serviceImpl.SearchMemberDataTest));
      serviceBinder.AddMethod(__Method_SearchMemberDataTestStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::AF.ECT.Shared.SearchMemberDataTestRequest, global::AF.ECT.Shared.MemberDataTestItem>(serviceImpl.SearchMemberDataTestStream));
      serviceBinder.AddMethod(__Method_UpdateAccountStatus, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.UpdateAccountStatusRequest, global::AF.ECT.Shared.UpdateAccountStatusResponse>(serviceImpl.UpdateAccountStatus));
      serviceBinder.AddMethod(__Method_UpdateLogin, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.UpdateLoginRequest, global::AF.ECT.Shared.UpdateLoginResponse>(serviceImpl.UpdateLogin));
      serviceBinder.AddMethod(__Method_UpdateManagedSettings, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.UpdateManagedSettingsRequest, global::AF.ECT.Shared.UpdateManagedSettingsResponse>(serviceImpl.UpdateManagedSettings));
      serviceBinder.AddMethod(__Method_UpdateUserAltTitle, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.UpdateUserAltTitleRequest, global::AF.ECT.Shared.UpdateUserAltTitleResponse>(serviceImpl.UpdateUserAltTitle));
      serviceBinder.AddMethod(__Method_AddSignature, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.AddSignatureRequest, global::AF.ECT.Shared.AddSignatureResponse>(serviceImpl.AddSignature));
      serviceBinder.AddMethod(__Method_CopyActions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.CopyActionsRequest, global::AF.ECT.Shared.CopyActionsResponse>(serviceImpl.CopyActions));
      serviceBinder.AddMethod(__Method_CopyRules, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.CopyRulesRequest, global::AF.ECT.Shared.CopyRulesResponse>(serviceImpl.CopyRules));
      serviceBinder.AddMethod(__Method_CopyWorkflow, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.CopyWorkflowRequest, global::AF.ECT.Shared.CopyWorkflowResponse>(serviceImpl.CopyWorkflow));
      serviceBinder.AddMethod(__Method_DeleteStatusCode, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.DeleteStatusCodeRequest, global::AF.ECT.Shared.DeleteStatusCodeResponse>(serviceImpl.DeleteStatusCode));
      serviceBinder.AddMethod(__Method_GetActionsByStep, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.GetActionsByStepRequest, global::AF.ECT.Shared.GetActionsByStepResponse>(serviceImpl.GetActionsByStep));
      serviceBinder.AddMethod(__Method_GetActiveCases, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.GetActiveCasesRequest, global::AF.ECT.Shared.GetActiveCasesResponse>(serviceImpl.GetActiveCases));
      serviceBinder.AddMethod(__Method_GetAllFindingByReasonOf, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.EmptyRequest, global::AF.ECT.Shared.GetAllFindingByReasonOfResponse>(serviceImpl.GetAllFindingByReasonOf));
      serviceBinder.AddMethod(__Method_GetAllLocks, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.EmptyRequest, global::AF.ECT.Shared.GetAllLocksResponse>(serviceImpl.GetAllLocks));
      serviceBinder.AddMethod(__Method_GetCancelReasons, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.GetCancelReasonsRequest, global::AF.ECT.Shared.GetCancelReasonsResponse>(serviceImpl.GetCancelReasons));
      serviceBinder.AddMethod(__Method_GetCreatableByGroup, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.GetCreatableByGroupRequest, global::AF.ECT.Shared.GetCreatableByGroupResponse>(serviceImpl.GetCreatableByGroup));
      serviceBinder.AddMethod(__Method_GetFindingByReasonOfById, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.GetFindingByReasonOfByIdRequest, global::AF.ECT.Shared.GetFindingByReasonOfByIdResponse>(serviceImpl.GetFindingByReasonOfById));
      serviceBinder.AddMethod(__Method_GetFindings, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.GetFindingsRequest, global::AF.ECT.Shared.GetFindingsResponse>(serviceImpl.GetFindings));
      serviceBinder.AddMethod(__Method_GetModuleFromWorkflow, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.GetModuleFromWorkflowRequest, global::AF.ECT.Shared.GetModuleFromWorkflowResponse>(serviceImpl.GetModuleFromWorkflow));
      serviceBinder.AddMethod(__Method_GetPageAccessByGroup, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.GetPageAccessByGroupRequest, global::AF.ECT.Shared.GetPageAccessByGroupResponse>(serviceImpl.GetPageAccessByGroup));
      serviceBinder.AddMethod(__Method_GetPageAccessByWorkflowView, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.GetPageAccessByWorkflowViewRequest, global::AF.ECT.Shared.GetPageAccessByWorkflowViewResponse>(serviceImpl.GetPageAccessByWorkflowView));
      serviceBinder.AddMethod(__Method_GetPagesByWorkflowId, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.GetPagesByWorkflowIdRequest, global::AF.ECT.Shared.GetPagesByWorkflowIdResponse>(serviceImpl.GetPagesByWorkflowId));
      serviceBinder.AddMethod(__Method_GetPermissions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.GetPermissionsRequest, global::AF.ECT.Shared.GetPermissionsResponse>(serviceImpl.GetPermissions));
      serviceBinder.AddMethod(__Method_GetPermissionsByCompo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.GetPermissionsByCompoRequest, global::AF.ECT.Shared.GetPermissionsByCompoResponse>(serviceImpl.GetPermissionsByCompo));
      serviceBinder.AddMethod(__Method_GetReturnReasons, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.GetReturnReasonsRequest, global::AF.ECT.Shared.GetReturnReasonsResponse>(serviceImpl.GetReturnReasons));
      serviceBinder.AddMethod(__Method_GetRwoaReasons, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.GetRwoaReasonsRequest, global::AF.ECT.Shared.GetRwoaReasonsResponse>(serviceImpl.GetRwoaReasons));
      serviceBinder.AddMethod(__Method_GetStatusCodesByCompo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.GetStatusCodesByCompoRequest, global::AF.ECT.Shared.GetStatusCodesByCompoResponse>(serviceImpl.GetStatusCodesByCompo));
      serviceBinder.AddMethod(__Method_GetStatusCodesByCompoAndModule, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.GetStatusCodesByCompoAndModuleRequest, global::AF.ECT.Shared.GetStatusCodesByCompoAndModuleResponse>(serviceImpl.GetStatusCodesByCompoAndModule));
      serviceBinder.AddMethod(__Method_GetStatusCodesBySignCode, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.GetStatusCodesBySignCodeRequest, global::AF.ECT.Shared.GetStatusCodesBySignCodeResponse>(serviceImpl.GetStatusCodesBySignCode));
      serviceBinder.AddMethod(__Method_GetStatusCodesByWorkflow, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.GetStatusCodesByWorkflowRequest, global::AF.ECT.Shared.GetStatusCodesByWorkflowResponse>(serviceImpl.GetStatusCodesByWorkflow));
      serviceBinder.AddMethod(__Method_GetStatusCodesByWorkflowAndAccessScope, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.GetStatusCodesByWorkflowAndAccessScopeRequest, global::AF.ECT.Shared.GetStatusCodesByWorkflowAndAccessScopeResponse>(serviceImpl.GetStatusCodesByWorkflowAndAccessScope));
      serviceBinder.AddMethod(__Method_GetStatusCodeScope, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.GetStatusCodeScopeRequest, global::AF.ECT.Shared.GetStatusCodeScopeResponse>(serviceImpl.GetStatusCodeScope));
      serviceBinder.AddMethod(__Method_GetStepsByWorkflow, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.GetStepsByWorkflowRequest, global::AF.ECT.Shared.GetStepsByWorkflowResponse>(serviceImpl.GetStepsByWorkflow));
      serviceBinder.AddMethod(__Method_GetStepsByWorkflowAndStatus, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.GetStepsByWorkflowAndStatusRequest, global::AF.ECT.Shared.GetStepsByWorkflowAndStatusResponse>(serviceImpl.GetStepsByWorkflowAndStatus));
      serviceBinder.AddMethod(__Method_GetViewableByGroup, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.GetViewableByGroupRequest, global::AF.ECT.Shared.GetViewableByGroupResponse>(serviceImpl.GetViewableByGroup));
      serviceBinder.AddMethod(__Method_GetWorkflowByCompo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.GetWorkflowByCompoRequest, global::AF.ECT.Shared.GetWorkflowByCompoResponse>(serviceImpl.GetWorkflowByCompo));
      serviceBinder.AddMethod(__Method_GetWorkflowFromModule, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.GetWorkflowFromModuleRequest, global::AF.ECT.Shared.GetWorkflowFromModuleResponse>(serviceImpl.GetWorkflowFromModule));
      serviceBinder.AddMethod(__Method_GetWorkflowInitialStatusCode, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.GetWorkflowInitialStatusCodeRequest, global::AF.ECT.Shared.GetWorkflowInitialStatusCodeResponse>(serviceImpl.GetWorkflowInitialStatusCode));
      serviceBinder.AddMethod(__Method_GetWorkflowTitle, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.GetWorkflowTitleRequest, global::AF.ECT.Shared.GetWorkflowTitleResponse>(serviceImpl.GetWorkflowTitle));
      serviceBinder.AddMethod(__Method_GetWorkflowTitleByWorkStatusId, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.GetWorkflowTitleByWorkStatusIdRequest, global::AF.ECT.Shared.GetWorkflowTitleByWorkStatusIdResponse>(serviceImpl.GetWorkflowTitleByWorkStatusId));
      serviceBinder.AddMethod(__Method_InsertAction, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.InsertActionRequest, global::AF.ECT.Shared.InsertActionResponse>(serviceImpl.InsertAction));
      serviceBinder.AddMethod(__Method_InsertOptionAction, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.InsertOptionActionRequest, global::AF.ECT.Shared.InsertOptionActionResponse>(serviceImpl.InsertOptionAction));
      serviceBinder.AddMethod(__Method_AddSignatureStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::AF.ECT.Shared.AddSignatureRequest, global::AF.ECT.Shared.SignatureItem>(serviceImpl.AddSignatureStream));
      serviceBinder.AddMethod(__Method_CopyWorkflowStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::AF.ECT.Shared.CopyWorkflowRequest, global::AF.ECT.Shared.WorkflowCopyItem>(serviceImpl.CopyWorkflowStream));
      serviceBinder.AddMethod(__Method_GetActionsByStepStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::AF.ECT.Shared.GetActionsByStepRequest, global::AF.ECT.Shared.ActionByStepItem>(serviceImpl.GetActionsByStepStream));
      serviceBinder.AddMethod(__Method_GetActiveCasesStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::AF.ECT.Shared.GetActiveCasesRequest, global::AF.ECT.Shared.ActiveCaseItem>(serviceImpl.GetActiveCasesStream));
      serviceBinder.AddMethod(__Method_GetAllFindingByReasonOfStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::AF.ECT.Shared.EmptyRequest, global::AF.ECT.Shared.FindingByReasonOfItem>(serviceImpl.GetAllFindingByReasonOfStream));
      serviceBinder.AddMethod(__Method_GetAllLocksStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::AF.ECT.Shared.EmptyRequest, global::AF.ECT.Shared.LockItem>(serviceImpl.GetAllLocksStream));
      serviceBinder.AddMethod(__Method_GetCancelReasonsStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::AF.ECT.Shared.GetCancelReasonsRequest, global::AF.ECT.Shared.CancelReasonItem>(serviceImpl.GetCancelReasonsStream));
      serviceBinder.AddMethod(__Method_GetCreatableByGroupStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::AF.ECT.Shared.GetCreatableByGroupRequest, global::AF.ECT.Shared.CreatableByGroupItem>(serviceImpl.GetCreatableByGroupStream));
      serviceBinder.AddMethod(__Method_GetFindingByReasonOfByIdStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::AF.ECT.Shared.GetFindingByReasonOfByIdRequest, global::AF.ECT.Shared.FindingByReasonOfByIdItem>(serviceImpl.GetFindingByReasonOfByIdStream));
      serviceBinder.AddMethod(__Method_GetFindingsStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::AF.ECT.Shared.GetFindingsRequest, global::AF.ECT.Shared.FindingItem>(serviceImpl.GetFindingsStream));
      serviceBinder.AddMethod(__Method_GetModuleFromWorkflowStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::AF.ECT.Shared.GetModuleFromWorkflowRequest, global::AF.ECT.Shared.ModuleFromWorkflowItem>(serviceImpl.GetModuleFromWorkflowStream));
      serviceBinder.AddMethod(__Method_GetPageAccessByGroupStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::AF.ECT.Shared.GetPageAccessByGroupRequest, global::AF.ECT.Shared.PageAccessByGroupItem>(serviceImpl.GetPageAccessByGroupStream));
      serviceBinder.AddMethod(__Method_GetPageAccessByWorkflowViewStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::AF.ECT.Shared.GetPageAccessByWorkflowViewRequest, global::AF.ECT.Shared.PageAccessByWorkflowViewItem>(serviceImpl.GetPageAccessByWorkflowViewStream));
      serviceBinder.AddMethod(__Method_GetPagesByWorkflowIdStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::AF.ECT.Shared.GetPagesByWorkflowIdRequest, global::AF.ECT.Shared.PageByWorkflowItem>(serviceImpl.GetPagesByWorkflowIdStream));
      serviceBinder.AddMethod(__Method_GetPermissionsStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::AF.ECT.Shared.GetPermissionsRequest, global::AF.ECT.Shared.PermissionItem>(serviceImpl.GetPermissionsStream));
      serviceBinder.AddMethod(__Method_GetPermissionsByCompoStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::AF.ECT.Shared.GetPermissionsByCompoRequest, global::AF.ECT.Shared.PermissionByCompoItem>(serviceImpl.GetPermissionsByCompoStream));
      serviceBinder.AddMethod(__Method_GetReturnReasonsStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::AF.ECT.Shared.GetReturnReasonsRequest, global::AF.ECT.Shared.ReturnReasonItem>(serviceImpl.GetReturnReasonsStream));
      serviceBinder.AddMethod(__Method_GetRwoaReasonsStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::AF.ECT.Shared.GetRwoaReasonsRequest, global::AF.ECT.Shared.RwoaReasonItem>(serviceImpl.GetRwoaReasonsStream));
      serviceBinder.AddMethod(__Method_GetStatusCodesByCompoStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::AF.ECT.Shared.GetStatusCodesByCompoRequest, global::AF.ECT.Shared.StatusCodeByCompoItem>(serviceImpl.GetStatusCodesByCompoStream));
      serviceBinder.AddMethod(__Method_GetStatusCodesByCompoAndModuleStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::AF.ECT.Shared.GetStatusCodesByCompoAndModuleRequest, global::AF.ECT.Shared.StatusCodeByCompoAndModuleItem>(serviceImpl.GetStatusCodesByCompoAndModuleStream));
      serviceBinder.AddMethod(__Method_GetStatusCodesBySignCodeStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::AF.ECT.Shared.GetStatusCodesBySignCodeRequest, global::AF.ECT.Shared.StatusCodeBySignCodeItem>(serviceImpl.GetStatusCodesBySignCodeStream));
      serviceBinder.AddMethod(__Method_GetStatusCodesByWorkflowStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::AF.ECT.Shared.GetStatusCodesByWorkflowRequest, global::AF.ECT.Shared.StatusCodeByWorkflowItem>(serviceImpl.GetStatusCodesByWorkflowStream));
      serviceBinder.AddMethod(__Method_GetStatusCodesByWorkflowAndAccessScopeStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::AF.ECT.Shared.GetStatusCodesByWorkflowAndAccessScopeRequest, global::AF.ECT.Shared.StatusCodeByWorkflowAndAccessScopeItem>(serviceImpl.GetStatusCodesByWorkflowAndAccessScopeStream));
      serviceBinder.AddMethod(__Method_GetStatusCodeScopeStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::AF.ECT.Shared.GetStatusCodeScopeRequest, global::AF.ECT.Shared.StatusCodeScopeItem>(serviceImpl.GetStatusCodeScopeStream));
      serviceBinder.AddMethod(__Method_GetStepsByWorkflowStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::AF.ECT.Shared.GetStepsByWorkflowRequest, global::AF.ECT.Shared.StepByWorkflowItem>(serviceImpl.GetStepsByWorkflowStream));
      serviceBinder.AddMethod(__Method_GetStepsByWorkflowAndStatusStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::AF.ECT.Shared.GetStepsByWorkflowAndStatusRequest, global::AF.ECT.Shared.StepByWorkflowAndStatusItem>(serviceImpl.GetStepsByWorkflowAndStatusStream));
      serviceBinder.AddMethod(__Method_GetViewableByGroupStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::AF.ECT.Shared.GetViewableByGroupRequest, global::AF.ECT.Shared.ViewableByGroupItem>(serviceImpl.GetViewableByGroupStream));
      serviceBinder.AddMethod(__Method_GetWorkflowByCompoStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::AF.ECT.Shared.GetWorkflowByCompoRequest, global::AF.ECT.Shared.WorkflowByCompoItem>(serviceImpl.GetWorkflowByCompoStream));
      serviceBinder.AddMethod(__Method_GetWorkflowFromModuleStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::AF.ECT.Shared.GetWorkflowFromModuleRequest, global::AF.ECT.Shared.WorkflowFromModuleItem>(serviceImpl.GetWorkflowFromModuleStream));
      serviceBinder.AddMethod(__Method_GetWorkflowInitialStatusCodeStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::AF.ECT.Shared.GetWorkflowInitialStatusCodeRequest, global::AF.ECT.Shared.WorkflowInitialStatusCodeItem>(serviceImpl.GetWorkflowInitialStatusCodeStream));
      serviceBinder.AddMethod(__Method_GetWorkflowTitleStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::AF.ECT.Shared.GetWorkflowTitleRequest, global::AF.ECT.Shared.WorkflowTitleItem>(serviceImpl.GetWorkflowTitleStream));
      serviceBinder.AddMethod(__Method_GetWorkflowTitleByWorkStatusIdStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::AF.ECT.Shared.GetWorkflowTitleByWorkStatusIdRequest, global::AF.ECT.Shared.WorkflowTitleByWorkStatusIdItem>(serviceImpl.GetWorkflowTitleByWorkStatusIdStream));
      serviceBinder.AddMethod(__Method_InsertActionStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::AF.ECT.Shared.InsertActionRequest, global::AF.ECT.Shared.InsertActionItem>(serviceImpl.InsertActionStream));
      serviceBinder.AddMethod(__Method_InsertOptionActionStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::AF.ECT.Shared.InsertOptionActionRequest, global::AF.ECT.Shared.InsertOptionActionItem>(serviceImpl.InsertOptionActionStream));
      serviceBinder.AddMethod(__Method_DeleteLogById, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.DeleteLogByIdRequest, global::AF.ECT.Shared.DeleteLogByIdResponse>(serviceImpl.DeleteLogById));
      serviceBinder.AddMethod(__Method_FindProcessLastExecutionDate, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.FindProcessLastExecutionDateRequest, global::AF.ECT.Shared.FindProcessLastExecutionDateResponse>(serviceImpl.FindProcessLastExecutionDate));
      serviceBinder.AddMethod(__Method_FindProcessLastExecutionDateStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::AF.ECT.Shared.FindProcessLastExecutionDateRequest, global::AF.ECT.Shared.ProcessLastExecutionDateItem>(serviceImpl.FindProcessLastExecutionDateStream));
      serviceBinder.AddMethod(__Method_GetAllLogs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.EmptyRequest, global::AF.ECT.Shared.GetAllLogsResponse>(serviceImpl.GetAllLogs));
      serviceBinder.AddMethod(__Method_GetAllLogsStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::AF.ECT.Shared.EmptyRequest, global::AF.ECT.Shared.LogItem>(serviceImpl.GetAllLogsStream));
      serviceBinder.AddMethod(__Method_InsertLog, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.InsertLogRequest, global::AF.ECT.Shared.InsertLogResponse>(serviceImpl.InsertLog));
      serviceBinder.AddMethod(__Method_IsProcessActive, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.IsProcessActiveRequest, global::AF.ECT.Shared.IsProcessActiveResponse>(serviceImpl.IsProcessActive));
      serviceBinder.AddMethod(__Method_IsProcessActiveStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::AF.ECT.Shared.IsProcessActiveRequest, global::AF.ECT.Shared.ProcessActiveItem>(serviceImpl.IsProcessActiveStream));
      serviceBinder.AddMethod(__Method_GetWorkflowById, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.GetWorkflowByIdRequest, global::AF.ECT.Shared.GetWorkflowByIdResponse>(serviceImpl.GetWorkflowById));
      serviceBinder.AddMethod(__Method_GetWorkflowByIdStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::AF.ECT.Shared.GetWorkflowByIdRequest, global::AF.ECT.Shared.WorkflowByIdItem>(serviceImpl.GetWorkflowByIdStream));
      serviceBinder.AddMethod(__Method_GetWorkflowsByRefId, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.GetWorkflowsByRefIdRequest, global::AF.ECT.Shared.GetWorkflowsByRefIdResponse>(serviceImpl.GetWorkflowsByRefId));
      serviceBinder.AddMethod(__Method_GetWorkflowsByRefIdStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::AF.ECT.Shared.GetWorkflowsByRefIdRequest, global::AF.ECT.Shared.WorkflowByRefIdItem>(serviceImpl.GetWorkflowsByRefIdStream));
      serviceBinder.AddMethod(__Method_GetWorkflowsByRefIdAndType, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.GetWorkflowsByRefIdAndTypeRequest, global::AF.ECT.Shared.GetWorkflowsByRefIdAndTypeResponse>(serviceImpl.GetWorkflowsByRefIdAndType));
      serviceBinder.AddMethod(__Method_GetWorkflowsByRefIdAndTypeStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::AF.ECT.Shared.GetWorkflowsByRefIdAndTypeRequest, global::AF.ECT.Shared.WorkflowByRefIdAndTypeItem>(serviceImpl.GetWorkflowsByRefIdAndTypeStream));
      serviceBinder.AddMethod(__Method_GetWorkflowTypes, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.EmptyRequest, global::AF.ECT.Shared.GetWorkflowTypesResponse>(serviceImpl.GetWorkflowTypes));
      serviceBinder.AddMethod(__Method_GetWorkflowTypesStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::AF.ECT.Shared.EmptyRequest, global::AF.ECT.Shared.WorkflowTypeItem>(serviceImpl.GetWorkflowTypesStream));
      serviceBinder.AddMethod(__Method_InsertWorkflow, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.InsertWorkflowRequest, global::AF.ECT.Shared.InsertWorkflowResponse>(serviceImpl.InsertWorkflow));
      serviceBinder.AddMethod(__Method_UpdateWorkflow, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.UpdateWorkflowRequest, global::AF.ECT.Shared.UpdateWorkflowResponse>(serviceImpl.UpdateWorkflow));
      serviceBinder.AddMethod(__Method_GetWorkstatusById, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.GetWorkstatusByIdRequest, global::AF.ECT.Shared.GetWorkstatusByIdResponse>(serviceImpl.GetWorkstatusById));
      serviceBinder.AddMethod(__Method_GetWorkstatusByIdStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::AF.ECT.Shared.GetWorkstatusByIdRequest, global::AF.ECT.Shared.WorkstatusByIdItem>(serviceImpl.GetWorkstatusByIdStream));
      serviceBinder.AddMethod(__Method_GetWorkstatusesByRefId, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.GetWorkstatusesByRefIdRequest, global::AF.ECT.Shared.GetWorkstatusesByRefIdResponse>(serviceImpl.GetWorkstatusesByRefId));
      serviceBinder.AddMethod(__Method_GetWorkstatusesByRefIdStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::AF.ECT.Shared.GetWorkstatusesByRefIdRequest, global::AF.ECT.Shared.WorkstatusByRefIdItem>(serviceImpl.GetWorkstatusesByRefIdStream));
      serviceBinder.AddMethod(__Method_GetWorkstatusesByRefIdAndType, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.GetWorkstatusesByRefIdAndTypeRequest, global::AF.ECT.Shared.GetWorkstatusesByRefIdAndTypeResponse>(serviceImpl.GetWorkstatusesByRefIdAndType));
      serviceBinder.AddMethod(__Method_GetWorkstatusesByRefIdAndTypeStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::AF.ECT.Shared.GetWorkstatusesByRefIdAndTypeRequest, global::AF.ECT.Shared.WorkstatusByRefIdAndTypeItem>(serviceImpl.GetWorkstatusesByRefIdAndTypeStream));
      serviceBinder.AddMethod(__Method_GetWorkstatusTypes, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.EmptyRequest, global::AF.ECT.Shared.GetWorkstatusTypesResponse>(serviceImpl.GetWorkstatusTypes));
      serviceBinder.AddMethod(__Method_GetWorkstatusTypesStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::AF.ECT.Shared.EmptyRequest, global::AF.ECT.Shared.WorkstatusTypeItem>(serviceImpl.GetWorkstatusTypesStream));
      serviceBinder.AddMethod(__Method_InsertWorkstatus, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.InsertWorkstatusRequest, global::AF.ECT.Shared.InsertWorkstatusResponse>(serviceImpl.InsertWorkstatus));
      serviceBinder.AddMethod(__Method_UpdateWorkstatus, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AF.ECT.Shared.UpdateWorkstatusRequest, global::AF.ECT.Shared.UpdateWorkstatusResponse>(serviceImpl.UpdateWorkstatus));
    }

  }
}
#endregion
