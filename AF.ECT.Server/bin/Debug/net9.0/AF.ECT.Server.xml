<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AF.ECT.Server</name>
    </assembly>
    <members>
        <member name="T:AF.ECT.Server.Components.App">
            <summary>
            Code-behind for the App component.
            </summary>
        </member>
        <member name="P:AF.ECT.Server.Components.App.HttpContext">
            <summary>
            Gets or sets the HTTP context for server-side operations.
            </summary>
            <value>The current HTTP context, or null if running on the client.</value>
        </member>
        <member name="P:AF.ECT.Server.Components.App.ThemeService">
            <summary>
            Gets or sets the theme service for managing application themes.
            </summary>
            <value>The theme service instance for theme management.</value>
        </member>
        <member name="M:AF.ECT.Server.Components.App.OnInitialized">
            <summary>
            Initializes the component and applies the user's theme preference.
            </summary>
            <remarks>
            This method checks for a theme cookie and applies it to the application
            when running on the server side. On the client side, this is handled
            by the client-side theme service.
            </remarks>
        </member>
        <member name="T:AF.ECT.Server.Extensions.ServiceCollectionExtensions">
            <summary>
            Extension methods for configuring dependency injection services.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Extensions.ServiceCollectionExtensions.AddApplicationServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Adds all application services to the dependency injection container.
            </summary>
            <param name="services">The service collection to add services to.</param>
            <param name="configuration">The application configuration for connection strings and settings.</param>
            <returns>The service collection with all application services configured.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when services or configuration is null.</exception>
        </member>
        <member name="M:AF.ECT.Server.Extensions.ServiceCollectionExtensions.AddWebComponents(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds web components and related services to the dependency injection container.
            </summary>
            <param name="services">The service collection to add services to.</param>
            <returns>The service collection with web components configured.</returns>
        </member>
        <member name="M:AF.ECT.Server.Extensions.ServiceCollectionExtensions.AddDataAccess(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Adds data access services including database context and repositories.
            </summary>
            <param name="services">The service collection to add services to.</param>
            <param name="configuration">The application configuration containing database connection strings.</param>
            <returns>The service collection with data access services configured.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when configuration is null.</exception>
        </member>
        <member name="M:AF.ECT.Server.Extensions.ServiceCollectionExtensions.AddThemeServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds theme-related services for Radzen components.
            </summary>
            <param name="services">The service collection to add services to.</param>
            <returns>The service collection with theme services configured.</returns>
        </member>
        <member name="M:AF.ECT.Server.Extensions.ServiceCollectionExtensions.AddApplicationCors(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds CORS (Cross-Origin Resource Sharing) configuration to the application.
            </summary>
            <param name="services">The service collection to add services to.</param>
            <returns>The service collection with CORS configured.</returns>
            <remarks>
            This configuration allows any origin, header, and method.
            In production, this should be restricted to specific origins.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Extensions.ServiceCollectionExtensions.AddGrpcServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds gRPC services with JSON transcoding, reflection, and global exception handling.
            </summary>
            <param name="services">The service collection to add services to.</param>
            <returns>The service collection with gRPC services configured.</returns>
        </member>
        <member name="M:AF.ECT.Server.Extensions.ServiceCollectionExtensions.AddHealthChecks(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Adds health check services for monitoring application health.
            </summary>
            <param name="services">The service collection to add services to.</param>
            <param name="configuration">The application configuration containing database connection strings.</param>
            <returns>The service collection with health checks configured.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when configuration is null.</exception>
        </member>
        <member name="M:AF.ECT.Server.Extensions.ServiceCollectionExtensions.AddAntiforgeryServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds antiforgery services to the dependency injection container.
            </summary>
            <param name="services">The service collection to add services to.</param>
            <returns>The service collection with antiforgery configured.</returns>
        </member>
        <member name="M:AF.ECT.Server.Extensions.ServiceCollectionExtensions.AddResilienceServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds resilience services for fault tolerance and recovery.
            </summary>
            <param name="services">The service collection to add services to.</param>
            <returns>The service collection with resilience services configured.</returns>
        </member>
        <member name="M:AF.ECT.Server.Extensions.ServiceCollectionExtensions.AddRateLimitingServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Adds rate limiting services to protect against abuse and ensure fair resource usage.
            </summary>
            <param name="services">The service collection to add services to.</param>
            <param name="configuration">The application configuration containing rate limiting settings.</param>
            <returns>The service collection with rate limiting configured.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when configuration is null.</exception>
        </member>
        <member name="T:AF.ECT.Server.Interceptors.ExceptionInterceptor">
            <summary>
            Interceptor for handling unhandled exceptions in gRPC services globally.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Interceptors.ExceptionInterceptor.#ctor(Microsoft.Extensions.Logging.ILogger{AF.ECT.Server.Interceptors.ExceptionInterceptor})">
            <summary>
            Initializes a new instance of the <see cref="T:AF.ECT.Server.Interceptors.ExceptionInterceptor"/> class.
            </summary>
            <param name="logger">The logger for logging exceptions.</param>
        </member>
        <member name="M:AF.ECT.Server.Interceptors.ExceptionInterceptor.UnaryServerHandler``2(``0,Grpc.Core.ServerCallContext,Grpc.Core.UnaryServerMethod{``0,``1})">
            <summary>
            Handles unary server calls and catches exceptions.
            </summary>
        </member>
        <member name="T:AF.ECT.Server.Models.ALODContext">
            <summary>
            Entity Framework DbContext for the ALOD (Audit Log Operations Database) system.
            </summary>
            <remarks>
            This context provides access to database entities and stored procedures for the
            Radzen Blazor application. It is auto-generated by EF Core Power Tools and
            should not be modified manually.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions{AF.ECT.Server.Models.ALODContext})">
            <summary>
            Initializes a new instance of the ALODContext.
            </summary>
            <param name="options">The options to be used by the DbContext.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when options is null.</exception>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Configures the model for the context.
            </summary>
            <param name="modelBuilder">The builder being used to construct the model for this context.</param>
            <remarks>
            This method is called when the model for a derived context has been initialized,
            but before the model has been locked down and used to initialize the context.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContext.ApplyCoreEntityConfigurations(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Applies configurations for core entities that have been manually configured with detailed settings.
            </summary>
            <param name="modelBuilder">The builder being used to construct the model.</param>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContext.ApplyGeneratedEntityConfigurations(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Applies configurations for all entities generated by the PowerShell script.
            These are template-based configurations that provide basic table mappings.
            </summary>
            <param name="modelBuilder">The builder being used to construct the model.</param>
        </member>
        <member name="P:AF.ECT.Server.Models.ALODContext.Functions">
            <summary>
            Gets or sets the functions interface for executing stored functions.
            </summary>
            <value>The functions interface instance.</value>
        </member>
        <member name="P:AF.ECT.Server.Models.ALODContext.Procedures">
            <summary>
            Gets or sets the procedures interface for executing stored procedures.
            </summary>
            <value>The procedures interface instance.</value>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextFunctions.#ctor(AF.ECT.Server.Models.ALODContext)">
            <summary>
            Initializes a new instance of the <see cref="T:AF.ECT.Server.Models.ALODContextFunctions"/> class.
            </summary>
            <param name="context">The database context instance.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="context"/> is null.</exception>
        </member>
        <member name="T:AF.ECT.Server.Models.ALODContextProcedures">
            <summary>
            Implementation of stored procedure operations for the ALOD context, providing methods to execute various database stored procedures.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_appeal_sp_GetAppealPostCompletionAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves appeal post completion data by appeal ID.
            </summary>
            <param name="appealId">The ID of the appeal.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of appeal post completion results.</returns>
            <remarks>This method executes the stored procedure [dbo].[core_appeal_sp_GetAppealPostCompletion].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_APSA_sp_GetPostCompletionAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves APSA post completion data by appeal ID.
            </summary>
            <param name="appealId">The ID of the appeal.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of APSA post completion results.</returns>
            <remarks>This method executes the stored procedure [dbo].[core_APSA_sp_GetPostCompletion].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.arcnet_GetIAATrainingDataForUsersAsync(System.String,System.String,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves IAT training data for users based on specified criteria.
            </summary>
            <param name="ediPIN">The EDI PIN of the user.</param>
            <param name="lastName">The last name of the user.</param>
            <param name="firstName">The first name of the user.</param>
            <param name="middleNames">The middle names of the user.</param>
            <param name="beginDate">The beginning date for the training data range.</param>
            <param name="endDate">The ending date for the training data range.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of training data results for the specified users.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when required parameters are null.</exception>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.arcnet_GetLastExecutionDateAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves the last execution date for the arcnet process.
            </summary>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of results containing the last execution date.</returns>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.arcnet_importAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Imports data for the arcnet process using the specified log ID.
            </summary>
            <param name="logId">The ID of the log entry associated with the import.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>The number of affected rows.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="logId"/> is null.</exception>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_AssocaitedCases_SaveAssociatedCasesAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.DataTable,System.Data.DataTable,System.Data.DataTable,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Saves associated cases for a reference and workflow.
            </summary>
            <param name="refId">The reference ID.</param>
            <param name="workflowId">The workflow ID.</param>
            <param name="associated_refIds">A data table containing associated reference IDs.</param>
            <param name="associated_workflowIds">A data table containing associated workflow IDs.</param>
            <param name="associated_CaseIds">A data table containing associated case IDs.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>The number of affected rows.</returns>
            <remarks>This method executes the stored procedure [dbo].[core_AssocaitedCases_SaveAssociatedCases].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_AssociatedCases_GetAssociatedCasesAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves associated cases for a reference and workflow.
            </summary>
            <param name="refId">The reference ID.</param>
            <param name="workflowId">The workflow ID.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of associated cases results.</returns>
            <remarks>This method executes the stored procedure [dbo].[core_AssociatedCases_GetAssociatedCases].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_AssociatedCases_GetAssociatedCasesLODAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves associated cases LOD for a reference and workflow.
            </summary>
            <param name="refId">The reference ID.</param>
            <param name="workflowId">The workflow ID.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of associated cases LOD results.</returns>
            <remarks>This method executes the stored procedure [dbo].[core_AssociatedCases_GetAssociatedCasesLOD].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_CaseComments_GetByCaseAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves case comments by case.
            </summary>
            <param name="refid">The reference ID.</param>
            <param name="module">The module identifier.</param>
            <param name="commentType">The comment type.</param>
            <param name="sorted">Whether to sort the results.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of case comments results.</returns>
            <remarks>This method executes the stored procedure [dbo].[core_CaseComments_GetByCase].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_CaseComments_GetByIdAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves case comments by ID.
            </summary>
            <param name="id">The comment ID.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of case comments results.</returns>
            <remarks>This method executes the stored procedure [dbo].[core_CaseComments_GetById].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_CaseComments_SaveOrUpdateCommentAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Saves or updates a case comment.
            </summary>
            <param name="id">The comment ID.</param>
            <param name="refId">The reference ID.</param>
            <param name="module">The module identifier.</param>
            <param name="comment">The comment text.</param>
            <param name="userId">The user ID.</param>
            <param name="createdDate">The creation date.</param>
            <param name="deleted">The deleted flag.</param>
            <param name="commentType">The comment type.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>The number of affected rows.</returns>
            <remarks>This method executes the stored procedure [dbo].[core_CaseComments_SaveOrUpdateComment].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_CaseDialogueComments_GetByCaseAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves case dialogue comments by case.
            </summary>
            <param name="refid">The reference ID.</param>
            <param name="module">The module identifier.</param>
            <param name="commentType">The comment type.</param>
            <param name="sorted">Whether to sort the results.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of case dialogue comments results.</returns>
            <remarks>This method executes the stored procedure [dbo].[core_CaseDialogueComments_GetByCase].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_CaseDialogueComments_GetByIdAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves case dialogue comments by ID.
            </summary>
            <param name="id">The comment ID.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of case dialogue comments results.</returns>
            <remarks>This method executes the stored procedure [dbo].[core_CaseDialogueComments_GetById].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_CaseDialogueComments_SaveOrUpdateCommentAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Saves or updates a case dialogue comment.
            </summary>
            <param name="id">The comment ID.</param>
            <param name="refId">The reference ID.</param>
            <param name="module">The module identifier.</param>
            <param name="comment">The comment text.</param>
            <param name="userId">The user ID.</param>
            <param name="createdDate">The creation date.</param>
            <param name="deleted">The deleted flag.</param>
            <param name="commentType">The comment type.</param>
            <param name="role">The role.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>The number of affected rows.</returns>
            <remarks>This method executes the stored procedure [dbo].[core_CaseDialogueComments_SaveOrUpdateComment].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_CaseType_sp_GetAllAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves all case types.
            </summary>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of all case types.</returns>
            <remarks>This method executes the stored procedure [dbo].[core_CaseType_sp_GetAll].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_CaseType_sp_GetAllSubCaseTypesAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves all sub case types.
            </summary>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of all sub case types.</returns>
            <remarks>This method executes the stored procedure [dbo].[core_CaseType_sp_GetAllSubCaseTypes].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_CaseType_sp_GetByIdAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves a case type by ID.
            </summary>
            <param name="id">The case type ID.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list containing the case type information.</returns>
            <remarks>This method executes the stored procedure [dbo].[core_CaseType_sp_GetById].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_CaseType_sp_GetCaseTypeWorkflowsAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves workflows for a case type.
            </summary>
            <param name="caseTypeId">The case type ID.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of workflows for the specified case type.</returns>
            <remarks>This method executes the stored procedure [dbo].[core_CaseType_sp_GetCaseTypeWorkflows].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_CaseType_sp_GetSubCaseTypesAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves sub case types for a case type.
            </summary>
            <param name="caseTypeId">The case type ID.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of sub case types for the specified case type.</returns>
            <remarks>This method executes the stored procedure [dbo].[core_CaseType_sp_GetSubCaseTypes].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_CaseType_sp_GetWorkflowCaseTypesAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves case types for a workflow.
            </summary>
            <param name="workflowId">The workflow ID.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of case types for the specified workflow.</returns>
            <remarks>This method executes the stored procedure [dbo].[core_CaseType_sp_GetWorkflowCaseTypes].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_CaseType_sp_InsertAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Inserts a new case type.
            </summary>
            <param name="name">The name of the case type.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>The number of affected rows.</returns>
            <remarks>This method executes the stored procedure [dbo].[core_CaseType_sp_Insert].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_CaseType_sp_InsertSubCaseTypeAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Inserts a new sub case type.
            </summary>
            <param name="name">The name of the sub case type.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>The number of affected rows.</returns>
            <remarks>This method executes the stored procedure [dbo].[core_CaseType_sp_InsertSubCaseType].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_CaseType_sp_UpdateAsync(System.Nullable{System.Int32},System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Updates a case type.
            </summary>
            <param name="id">The ID of the case type to update.</param>
            <param name="name">The updated name of the case type.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>The number of affected rows.</returns>
            <remarks>This method executes the stored procedure [dbo].[core_CaseType_sp_Update].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_CaseType_sp_UpdateCaseTypeSubCaseTypeMapsAsync(System.Nullable{System.Int32},System.Data.DataTable,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Updates case type sub case type maps.
            </summary>
            <param name="caseTypeId">The case type ID.</param>
            <param name="subCaseTypeIds">A data table containing sub case type IDs.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>The number of affected rows.</returns>
            <remarks>This method executes the stored procedure [dbo].[core_CaseType_sp_UpdateCaseTypeSubCaseTypeMaps].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_CaseType_sp_UpdateCaseTypeWorkflowMapsAsync(System.Nullable{System.Int32},System.Data.DataTable,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Updates case type workflow maps.
            </summary>
            <param name="caseTypeId">The case type ID.</param>
            <param name="workflowIds">A data table containing workflow IDs.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>The number of affected rows.</returns>
            <remarks>This method executes the stored procedure [dbo].[core_CaseType_sp_UpdateCaseTypeWorkflowMaps].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_CaseType_sp_UpdateSubCaseTypeAsync(System.Nullable{System.Int32},System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Updates a sub case type.
            </summary>
            <param name="id">The ID of the sub case type to update.</param>
            <param name="name">The updated name of the sub case type.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>The number of affected rows.</returns>
            <remarks>This method executes the stored procedure [dbo].[core_CaseType_sp_UpdateSubCaseType].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_CertificationStamp_sp_GetAllAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves all certification stamps.
            </summary>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of all certification stamps.</returns>
            <remarks>This method executes the stored procedure [dbo].[core_CertificationStamp_sp_GetAll].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_CertificationStamp_sp_GetByIdAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves a certification stamp by ID.
            </summary>
            <param name="id">The certification stamp ID.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list containing the certification stamp information.</returns>
            <remarks>This method executes the stored procedure [dbo].[core_CertificationStamp_sp_GetById].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_CertificationStamp_sp_GetCerticationStampWorkflowsAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves workflows for a certification stamp.
            </summary>
            <param name="stampId">The certification stamp ID.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of workflows for the specified certification stamp.</returns>
            <remarks>This method executes the stored procedure [dbo].[core_CertificationStamp_sp_GetCerticationStampWorkflows].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_CertificationStamp_sp_GetParameterFieldDataAsync(System.Nullable{System.Int32},System.Nullable{System.Boolean},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves parameter field data for a certification stamp.
            </summary>
            <param name="refId">The reference ID.</param>
            <param name="selectSecondary">Whether to select secondary data.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of parameter field data for the certification stamp.</returns>
            <remarks>This method executes the stored procedure [dbo].[core_CertificationStamp_sp_GetParameterFieldData].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_CertificationStamp_sp_GetSpecialCaseStampAsync(System.Nullable{System.Int32},System.Nullable{System.Boolean},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves special case stamp for a certification stamp.
            </summary>
            <param name="refId">The reference ID.</param>
            <param name="selectSecondary">Whether to select secondary data.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of special case stamp data for the certification stamp.</returns>
            <remarks>This method executes the stored procedure [dbo].[core_CertificationStamp_sp_GetSpecialCaseStamp].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_CertificationStamp_sp_GetWorkflowCertificationStampsAsync(System.Nullable{System.Int32},System.Nullable{System.Boolean},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves workflow certification stamps.
            </summary>
            <param name="workflowId">The workflow ID.</param>
            <param name="isQualified">Whether the stamps are qualified.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of workflow certification stamps.</returns>
            <remarks>This method executes the stored procedure [dbo].[core_CertificationStamp_sp_GetWorkflowCertificationStamps].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_CertificationStamp_sp_InsertAsync(System.String,System.String,System.Nullable{System.Boolean},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Inserts a new certification stamp.
            </summary>
            <param name="name">The name of the certification stamp.</param>
            <param name="body">The body content of the certification stamp.</param>
            <param name="isQualified">Whether the certification stamp is qualified.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>The number of affected rows.</returns>
            <remarks>This method executes the stored procedure [dbo].[core_CertificationStamp_sp_Insert].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_CertificationStamp_sp_UpdateAsync(System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Boolean},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Updates a certification stamp.
            </summary>
            <param name="id">The ID of the certification stamp to update.</param>
            <param name="name">The updated name of the certification stamp.</param>
            <param name="body">The updated body content of the certification stamp.</param>
            <param name="isQualified">Whether the certification stamp is qualified.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>The number of affected rows.</returns>
            <remarks>This method executes the stored procedure [dbo].[core_CertificationStamp_sp_Update].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_CertificationStamp_sp_UpdateCertificationStampWorkflowMapsAsync(System.Nullable{System.Int32},System.Data.DataTable,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Updates certification stamp workflow maps.
            </summary>
            <param name="stampId">The certification stamp ID.</param>
            <param name="workflowIds">A data table containing workflow IDs.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>The number of affected rows.</returns>
            <remarks>This method executes the stored procedure [dbo].[core_CertificationStamp_sp_UpdateCertificationStampWorkflowMaps].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_ChildCaseComment_GetByCaseAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves child case comments by case.
            </summary>
            <param name="refid">The reference ID.</param>
            <param name="module">The module identifier.</param>
            <param name="commentType">The comment type.</param>
            <param name="commentId">The comment ID.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of child case comment results.</returns>
            <remarks>This method executes the stored procedure [dbo].[core_ChildCaseComment_GetByCase].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_ChildCaseComment_GetByIdAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves a child case comment by ID.
            </summary>
            <param name="id">The comment ID.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of child case comment results.</returns>
            <remarks>This method executes the stored procedure [dbo].[core_ChildCaseComment_GetById].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_ChildCaseComments_SaveOrUpdateCommentAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Saves or updates a child case comment.
            </summary>
            <param name="id">The comment ID.</param>
            <param name="refId">The reference ID.</param>
            <param name="module">The module identifier.</param>
            <param name="comment">The comment text.</param>
            <param name="userId">The user ID.</param>
            <param name="createdDate">The creation date.</param>
            <param name="commentType">The comment type.</param>
            <param name="commentId">The comment ID.</param>
            <param name="role">The user role.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>The number of affected rows.</returns>
            <remarks>This method executes the stored procedure [dbo].[core_ChildCaseComments_SaveOrUpdateComment].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_ChildCaseComments_UpdateCommentAsync(System.Nullable{System.Int32},System.String,System.Nullable{System.DateTime},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Updates a comment for child case comments.
            </summary>
            <param name="id">The ID of the comment to update.</param>
            <param name="comment">The updated comment text.</param>
            <param name="createdDate">The date and time when the comment was created.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>The number of affected rows.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="id"/>, <paramref name="comment"/>, or <paramref name="createdDate"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_ChildCaseComments_UpdateComment].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_CompletedByGroup_sp_GetAllAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves all completed by groups.
            </summary>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of all completed by groups.</returns>
            <remarks>This method executes the stored procedure [dbo].[core_CompletedByGroup_sp_GetAll].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_CompletedByGroup_sp_GetByIdAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves a completed by group by its ID.
            </summary>
            <param name="id">The ID of the completed by group.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list containing the completed by group information.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="id"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_CompletedByGroup_sp_GetById].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_CompletedByGroup_sp_GetCompletedByGroupWorkflowsAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves workflows associated with a completed by group.
            </summary>
            <param name="completedByGroupId">The ID of the completed by group.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of workflows for the specified completed by group.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="completedByGroupId"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_CompletedByGroup_sp_GetCompletedByGroupWorkflows].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_CompletedByGroup_sp_GetWorkflowCompletedByGroupsAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves completed by groups associated with a workflow.
            </summary>
            <param name="workflowId">The ID of the workflow.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of completed by groups for the specified workflow.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="workflowId"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_CompletedByGroup_sp_GetWorkflowCompletedByGroups].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_CompletedByGroup_sp_InsertAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Inserts a new completed by group.
            </summary>
            <param name="name">The name of the completed by group.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>The number of affected rows.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="name"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_CompletedByGroup_sp_Insert].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_CompletedByGroup_sp_UpdateAsync(System.Nullable{System.Int32},System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Updates an existing completed by group.
            </summary>
            <param name="id">The ID of the completed by group to update.</param>
            <param name="name">The updated name of the completed by group.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>The number of affected rows.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="id"/> or <paramref name="name"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_CompletedByGroup_sp_Update].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_CompletedByGroup_sp_UpdateCompletedByGroupWorkflowMapsAsync(System.Nullable{System.Int32},System.Data.DataTable,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Updates the workflow mappings for a completed by group.
            </summary>
            <param name="completedByGroupId">The ID of the completed by group.</param>
            <param name="workflowIds">A data table containing the workflow IDs to map.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>The number of affected rows.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="completedByGroupId"/> or <paramref name="workflowIds"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_CompletedByGroup_sp_UpdateCompletedByGroupWorkflowMaps].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_email_sp_GetAllAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves all email templates based on the component type.
            </summary>
            <param name="compo">The component type identifier.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of all email templates for the specified component.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="compo"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_email_sp_GetAll].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_email_sp_GetEmailByIDAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves an email template by its ID.
            </summary>
            <param name="templateID">The ID of the email template.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list containing the email template information.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="templateID"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_email_sp_GetEmailByID].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_email_sp_GetEmailByNameAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves an email template by its title.
            </summary>
            <param name="title">The title of the email template.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list containing the email template information.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="title"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_email_sp_GetEmailByName].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_email_sp_InsertEmailTemplateAsync(System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Inserts a new email template.
            </summary>
            <param name="compo">The component type identifier.</param>
            <param name="subject">The subject of the email.</param>
            <param name="body">The body content of the email.</param>
            <param name="title">The title of the email template.</param>
            <param name="dataProc">The data processing identifier.</param>
            <param name="status">The status of the email template.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>The number of affected rows.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when required parameters are null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_email_sp_InsertEmailTemplate].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_email_sp_SendWaiverRemindersAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Sends waiver reminder emails.
            </summary>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of results from sending waiver reminders.</returns>
            <remarks>This method executes the stored procedure [dbo].[core_email_sp_SendWaiverReminders].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_email_sp_UpdateEmailByIDAsync(System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Updates an email template by its ID.
            </summary>
            <param name="templateID">The ID of the email template to update.</param>
            <param name="subject">The updated subject of the email.</param>
            <param name="body">The updated body content of the email.</param>
            <param name="title">The updated title of the email template.</param>
            <param name="dataProc">The updated data processing identifier.</param>
            <param name="status">The updated status of the email template.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>The number of affected rows.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="templateID"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_email_sp_UpdateEmailByID].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_GetRoleAbbreAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves role abbreviations based on group names.
            </summary>
            <param name="groups">A comma-separated list of group names.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of role abbreviations.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="groups"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_GetRoleAbbre].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_GetStateAbbreAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves state abbreviations based on state names.
            </summary>
            <param name="states">A comma-separated list of state names.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of state abbreviations.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="states"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_GetStateAbbre].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_group_sp_ClearViewByGroupsAsync(System.Nullable{System.Int16},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Clears the view permissions for groups based on the specified group ID.
            </summary>
            <param name="groupId">The ID of the group for which to clear view permissions.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>The number of affected rows.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="groupId"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_group_sp_ClearViewByGroups].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_group_sp_DeleteAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Deletes a group by its ID.
            </summary>
            <param name="id">The ID of the group to delete.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of results from the delete operation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="id"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_group_sp_Delete].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_group_sp_GetAllAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves all groups based on the component type.
            </summary>
            <param name="compo">The component type to filter groups by.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of all groups matching the specified component type.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="compo"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_group_sp_GetAll].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_group_sp_GetAllWithManagedAsync(System.Nullable{System.Int16},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves all groups with managed information for a specified group ID.
            </summary>
            <param name="groupId">The ID of the group to retrieve managed information for.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of groups with their managed information.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="groupId"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_group_sp_GetAllWithManaged].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_group_sp_GetByCompoAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves groups by component type.
            </summary>
            <param name="compo">The component type to filter groups by.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of groups matching the specified component type.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="compo"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_group_sp_GetByCompo].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_group_sp_GetByCompoAndAdminAsync(System.String,System.Nullable{System.Byte},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves groups by component type and admin group ID.
            </summary>
            <param name="compo">The component type to filter groups by.</param>
            <param name="adminCurrentGroupId">The admin group ID to filter by.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of groups matching the specified component type and admin group ID.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="compo"/> or <paramref name="adminCurrentGroupId"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_group_sp_GetByCompoAndAdmin].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_group_sp_GetByCompoOnlyAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves groups by component type only.
            </summary>
            <param name="compo">The component type to filter groups by.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of groups matching the specified component type.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="compo"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_group_sp_GetByCompoOnly].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_group_sp_GetManagedAsync(System.Nullable{System.Int16},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves managed groups for a specified group ID.
            </summary>
            <param name="groupId">The ID of the group to retrieve managed groups for.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of managed groups for the specified group ID.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="groupId"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_group_sp_GetManaged].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_group_sp_GetManagedDropDownAsync(System.Nullable{System.Int16},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves managed groups for dropdown display for a specified group ID.
            </summary>
            <param name="groupId">The ID of the group to retrieve managed groups for dropdown.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of managed groups formatted for dropdown display.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="groupId"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_group_sp_GetManagedDropDown].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_group_sp_GetViewByAsync(System.Nullable{System.Int16},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves groups that can view the specified group ID.
            </summary>
            <param name="groupId">The ID of the group to retrieve view permissions for.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of groups that have view permissions for the specified group.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="groupId"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_group_sp_GetViewBy].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_group_sp_InsertAsync(System.String,System.String,System.String,System.Nullable{System.Byte},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Byte},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Inserts a new group with the specified parameters.
            </summary>
            <param name="name">The name of the group.</param>
            <param name="abbr">The abbreviation of the group.</param>
            <param name="compo">The component type of the group.</param>
            <param name="accessScope">The access scope of the group.</param>
            <param name="active">Whether the group is active.</param>
            <param name="partialMatch">Whether partial matching is enabled.</param>
            <param name="showInfo">Whether to show information for the group.</param>
            <param name="hipaaRequired">Whether HIPAA compliance is required.</param>
            <param name="canRegister">Whether the group can register.</param>
            <param name="sortOrder">The sort order of the group.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>The number of affected rows.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when required parameters are null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_group_sp_Insert].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_group_sp_lkupComposAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Looks up component types for groups.
            </summary>
            <param name="compo">The component type to look up.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of component types matching the lookup criteria.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="compo"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_group_sp_lkupCompos].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_group_sp_UpdateAsync(System.Nullable{System.Int32},System.String,System.String,System.String,System.Nullable{System.Byte},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Byte},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Updates an existing group with the specified parameters.
            </summary>
            <param name="groupId">The ID of the group to update.</param>
            <param name="name">The new name of the group.</param>
            <param name="abbr">The new abbreviation of the group.</param>
            <param name="compo">The new component type of the group.</param>
            <param name="accessScope">The new access scope of the group.</param>
            <param name="active">Whether the group is active.</param>
            <param name="partialMatch">Whether partial matching is enabled.</param>
            <param name="showInfo">Whether to show information for the group.</param>
            <param name="hipaaRequired">Whether HIPAA compliance is required.</param>
            <param name="canRegister">Whether the group can register.</param>
            <param name="sortOrder">The new sort order of the group.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>The number of affected rows.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when required parameters are null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_group_sp_Update].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_group_sp_UpdateGroupPermissionsAsync(System.Nullable{System.Int16},System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Updates group permissions for a specified group using XML document.
            </summary>
            <param name="groupId">The ID of the group to update permissions for.</param>
            <param name="xmlDocument">The XML document containing the permission settings.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>The number of affected rows.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="groupId"/> or <paramref name="xmlDocument"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_group_sp_UpdateGroupPermissions].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_group_sp_UpdateManagedGroupsAsync(System.Nullable{System.Int16},System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Updates managed groups for a specified group using XML document.
            </summary>
            <param name="groupId">The ID of the group to update managed groups for.</param>
            <param name="xmlDocument">The XML document containing the managed group settings.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>The number of affected rows.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="groupId"/> or <paramref name="xmlDocument"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_group_sp_UpdateManagedGroups].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_group_sp_UpdateViewByGroupsAsync(System.Nullable{System.Int16},System.Nullable{System.Int16},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Updates view permissions between groups (viewer and member groups).
            </summary>
            <param name="viewerId">The ID of the group that will have view permissions.</param>
            <param name="memberId">The ID of the group that will be viewed.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>The number of affected rows.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="viewerId"/> or <paramref name="memberId"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_group_sp_UpdateViewByGroups].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_ICD_sp_Find7thCharactersAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Finds the 7th characters for a specified ICD code.
            </summary>
            <param name="codeId">The ID of the ICD code to find 7th characters for.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of core_ICD_sp_Find7thCharactersResult objects containing the 7th character data.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="codeId"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_ICD_sp_Find7thCharacters].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_ICD_sp_FindCodeAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Finds ICD codes by a search value.
            </summary>
            <param name="value">The search value to find ICD codes for.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of core_ICD_sp_FindCodeResult objects containing the matching ICD codes.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="value"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_ICD_sp_FindCode].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_ICD_sp_FindCodeVersionAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Finds the version information for a specified ICD code.
            </summary>
            <param name="codeId">The ID of the ICD code to find version information for.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of core_ICD_sp_FindCodeVersionResult objects containing the version data.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="codeId"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_ICD_sp_FindCodeVersion].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_ICD_sp_FindNatureOfIncidentValuesAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Finds nature of incident values for a specified ICD code.
            </summary>
            <param name="codeId">The ID of the ICD code to find nature of incident values for.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of core_ICD_sp_FindNatureOfIncidentValuesResult objects containing the nature of incident data.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="codeId"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_ICD_sp_FindNatureOfIncidentValues].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_ICD_sp_GetChildrenAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Gets the child ICD codes for a specified parent code.
            </summary>
            <param name="parentId">The ID of the parent ICD code.</param>
            <param name="version">The version of the ICD codes to retrieve.</param>
            <param name="onlyActive">Whether to return only active codes.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of core_ICD_sp_GetChildrenResult objects containing the child ICD codes.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="parentId"/> or <paramref name="version"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_ICD_sp_GetChildren].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_ICD_sp_InsertNatureOfIncidentMappingAsync(System.Nullable{System.Int32},System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Inserts a nature of incident mapping for a specified ICD code.
            </summary>
            <param name="codeId">The ID of the ICD code to map.</param>
            <param name="nOIValue">The nature of incident value to insert.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>The number of affected rows.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="codeId"/> or <paramref name="nOIValue"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_ICD_sp_InsertNatureOfIncidentMapping].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_ICD_sp_UpdateCodeAsync(System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Updates an ICD code with new values.
            </summary>
            <param name="codeId">The ID of the ICD code to update.</param>
            <param name="newValue">The new value for the ICD code.</param>
            <param name="newText">The new text description for the ICD code.</param>
            <param name="newDisease">Whether the code represents a disease.</param>
            <param name="newActive">Whether the code is active.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>The number of affected rows.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="codeId"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_ICD_sp_UpdateCode].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_KeyVal_sp_DeleteKeyValueByIdAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Deletes a key-value pair by its ID.
            </summary>
            <param name="id">The ID of the key-value pair to delete.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>The number of affected rows.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="id"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_KeyVal_sp_DeleteKeyValueById].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_KeyVal_sp_GetEditableKeyTypesAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Gets all editable key types.
            </summary>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of core_KeyVal_sp_GetEditableKeyTypesResult objects containing the editable key types.</returns>
            <remarks>This method executes the stored procedure [dbo].[core_KeyVal_sp_GetEditableKeyTypes].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_KeyVal_sp_GetHelpKeysAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Gets all help keys.
            </summary>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of core_KeyVal_sp_GetHelpKeysResult objects containing the help keys.</returns>
            <remarks>This method executes the stored procedure [dbo].[core_KeyVal_sp_GetHelpKeys].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_KeyVal_sp_GetKeysUsingKeyTypeAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Gets all keys using a specified key type.
            </summary>
            <param name="keyTypeID">The ID of the key type to filter by.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of core_KeyVal_sp_GetKeysUsingKeyTypeResult objects containing the keys for the specified type.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="keyTypeID"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_KeyVal_sp_GetKeysUsingKeyType].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_KeyVal_sp_GetKeyValuesByKeyDescriptionAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Gets key values by key description.
            </summary>
            <param name="keyDesc">The key description to search for.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of core_KeyVal_sp_GetKeyValuesByKeyDescriptionResult objects containing the matching key values.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="keyDesc"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_KeyVal_sp_GetKeyValuesByKeyDescription].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_KeyVal_sp_GetKeyValuesByKeyIdAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Gets key values by key ID.
            </summary>
            <param name="keyId">The ID of the key to get values for.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of core_KeyVal_sp_GetKeyValuesByKeyIdResult objects containing the key values.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="keyId"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_KeyVal_sp_GetKeyValuesByKeyId].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_KeyVal_sp_InsertKeyValueAsync(System.Nullable{System.Int32},System.String,System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Inserts a new key-value pair.
            </summary>
            <param name="keyId">The ID of the key to associate with the value.</param>
            <param name="valueDescription">The description of the value.</param>
            <param name="value">The value to insert.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>The number of affected rows.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="keyId"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_KeyVal_sp_InsertKeyValue].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_KeyVal_sp_UpdateKeyValueByIdAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Updates a key-value pair by its ID.
            </summary>
            <param name="id">The ID of the key-value pair to update.</param>
            <param name="newKeyId">The new key ID to associate with the value.</param>
            <param name="newValueDescription">The new description for the value.</param>
            <param name="newValue">The new value.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>The number of affected rows.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="id"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_KeyVal_sp_UpdateKeyValueById].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_KeyVale_sp_GetAllKeysAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Gets all keys.
            </summary>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of core_KeyVale_sp_GetAllKeysResult objects containing all keys.</returns>
            <remarks>This method executes the stored procedure [dbo].[core_KeyVale_sp_GetAllKeys].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lod_sp_appealPostProcessingIdAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Gets appeal post-processing information by appeal ID.
            </summary>
            <param name="appeal_id">The ID of the appeal to get post-processing information for.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of core_lod_sp_appealPostProcessingIdResult objects containing the appeal post-processing data.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="appeal_id"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_lod_sp_appealPostProcessingId].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lod_sp_GetAppealCountAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Gets the appeal count for a specified initial LOD ID.
            </summary>
            <param name="initialLODId">The ID of the initial LOD to get appeal count for.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of core_lod_sp_GetAppealCountResult objects containing the appeal count data.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="initialLODId"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetAppealCount].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lod_sp_GetAppealIdAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Gets the appeal ID for a specified LOD and ID type.
            </summary>
            <param name="lodId">The ID of the LOD to get appeal ID for.</param>
            <param name="idType">The type of ID to retrieve.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of core_lod_sp_GetAppealIdResult objects containing the appeal ID data.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="lodId"/> or <paramref name="idType"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetAppealId].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lod_sp_GetAppealRequestsAsync(System.Nullable{System.Int32},System.Nullable{System.Boolean},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Gets appeal requests for a specified user and SARC status.
            </summary>
            <param name="userId">The ID of the user to get appeal requests for.</param>
            <param name="sarc">Whether to filter for SARC appeals.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of core_lod_sp_GetAppealRequestsResult objects containing the appeal requests.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="userId"/> or <paramref name="sarc"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetAppealRequests].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lod_sp_GetCaseCommentsAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Gets case comments for a specified case, module, and comment type.
            </summary>
            <param name="caseID">The ID of the case to get comments for.</param>
            <param name="moduleID">The ID of the module.</param>
            <param name="commentType">The type of comments to retrieve.</param>
            <param name="sortOrder">Whether to sort the comments in ascending order.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of core_lod_sp_GetCaseCommentsResult objects containing the case comments.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="caseID"/>, <paramref name="moduleID"/>, <paramref name="commentType"/>, or <paramref name="sortOrder"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetCaseComments].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lod_sp_GetCompletedAPsAsync(System.Nullable{System.Int32},System.Nullable{System.Boolean},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Gets completed APs (Action Plans) for a specified user and SARC status.
            </summary>
            <param name="userId">The ID of the user to get completed APs for.</param>
            <param name="sarc">Whether to filter for SARC APs.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of core_lod_sp_GetCompletedAPsResult objects containing the completed APs.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="userId"/> or <paramref name="sarc"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetCompletedAPs].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lod_sp_GetCompletedRRsAsync(System.Nullable{System.Int32},System.Nullable{System.Boolean},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Gets completed RRs (Review Requests) for a specified user and SARC status.
            </summary>
            <param name="userId">The ID of the user to get completed RRs for.</param>
            <param name="sarc">Whether to filter for SARC RRs.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of core_lod_sp_GetCompletedRRsResult objects containing the completed RRs.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="userId"/> or <paramref name="sarc"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetCompletedRRs].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lod_sp_GetCompletedSpecialCasesByMemberSSNAsync(System.String,System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Gets completed special cases by member SSN for a specified user.
            </summary>
            <param name="member_ssn">The SSN of the member to get special cases for.</param>
            <param name="userId">The ID of the user making the request.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of core_lod_sp_GetCompletedSpecialCasesByMemberSSNResult objects containing the special cases.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="member_ssn"/> or <paramref name="userId"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetCompletedSpecialCasesByMemberSSN].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lod_sp_GetFromAndDirectionAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Gets the from and direction information for a specified reference ID.
            </summary>
            <param name="refId">The reference ID to get from and direction information for.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of core_lod_sp_GetFromAndDirectionResult objects containing the from and direction data.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="refId"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetFromAndDirection].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lod_sp_GetHasActiveReinvestigationAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Checks if a specified LOD has an active reinvestigation.
            </summary>
            <param name="lodId">The ID of the LOD to check for active reinvestigation.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of core_lod_sp_GetHasActiveReinvestigationResult objects containing the reinvestigation status.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="lodId"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetHasActiveReinvestigation].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lod_sp_GetHasAppealAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Checks if a specified LOD has an appeal.
            </summary>
            <param name="lodId">The ID of the LOD to check for appeal.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of core_lod_sp_GetHasAppealResult objects containing the appeal status.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="lodId"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetHasAppeal].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lod_sp_GetHasAppeal_PostProcessAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Checks if a specified appeal has an appeal post-process.
            </summary>
            <param name="appealId">The ID of the appeal to check for post-process.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of core_lod_sp_GetHasAppeal_PostProcessResult objects containing the post-process status.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="appealId"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetHasAppeal_PostProcess].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lod_sp_GetHasReinvestigationLodAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Checks if a specified LOD has a reinvestigation LOD.
            </summary>
            <param name="lodId">The ID of the LOD to check for reinvestigation LOD.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of core_lod_sp_GetHasReinvestigationLodResult objects containing the reinvestigation LOD status.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="lodId"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetHasReinvestigationLod].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lod_sp_GetIsReinvestigationLodAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Checks if a specified LOD is a reinvestigation LOD.
            </summary>
            <param name="lodId">The ID of the LOD to check if it's a reinvestigation LOD.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of core_lod_sp_GetIsReinvestigationLodResult objects containing the reinvestigation status.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="lodId"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetIsReinvestigationLod].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lod_sp_GetLODListByMemberSSNAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Gets LOD list by member SSN with specified search type and user.
            </summary>
            <param name="memberSSN">The SSN of the member to get LOD list for.</param>
            <param name="searchType">The type of search to perform.</param>
            <param name="userId">The ID of the user making the request.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of core_lod_sp_GetLODListByMemberSSNResult objects containing the LOD list.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="memberSSN"/>, <paramref name="searchType"/>, or <paramref name="userId"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetLODListByMemberSSN].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lod_sp_GetLODPostCompletionAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Gets LOD post-completion information for a specified LOD ID.
            </summary>
            <param name="lodId">The ID of the LOD to get post-completion information for.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of core_lod_sp_GetLODPostCompletionResult objects containing the post-completion data.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="lodId"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetLODPostCompletion].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lod_sp_GetPALDataByMemberSSNAsync(System.String,System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Gets PAL (Personnel Action Letter) data by member SSN and last name.
            </summary>
            <param name="member_ssn">The SSN of the member to get PAL data for.</param>
            <param name="member_lastname">The last name of the member.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of core_lod_sp_GetPALDataByMemberSSNResult objects containing the PAL data.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="member_ssn"/> or <paramref name="member_lastname"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetPALDataByMemberSSN].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lod_sp_GetPendingCountAsync(System.Nullable{System.Int32},System.Nullable{System.Boolean},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Gets the pending count for a specified user and SARC status.
            </summary>
            <param name="userId">The ID of the user to get pending count for.</param>
            <param name="sarc">Whether to filter for SARC items.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of core_lod_sp_GetPendingCountResult objects containing the pending count.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="userId"/> or <paramref name="sarc"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetPendingCount].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lod_sp_GetPendingCount_LODV3Async(System.Nullable{System.Int32},System.Nullable{System.Boolean},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Gets the pending count for LOD V3 for a specified user and SARC status.
            </summary>
            <param name="userId">The ID of the user to get pending count for.</param>
            <param name="sarc">Whether to filter for SARC items.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of core_lod_sp_GetPendingCount_LODV3Result objects containing the pending count for LOD V3.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="userId"/> or <paramref name="sarc"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetPendingCount_LODV3].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lod_sp_GetPendingIOCountAsync(System.Nullable{System.Int32},System.Nullable{System.Boolean},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Gets the pending IO count for a specified user and SARC status.
            </summary>
            <param name="userId">The ID of the user to get pending IO count for.</param>
            <param name="sarc">Whether to filter for SARC items.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of core_lod_sp_GetPendingIOCountResult objects containing the pending IO count.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="userId"/> or <paramref name="sarc"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetPendingIOCount].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lod_sp_GetPSCDSpecialCaseNotHoldingAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Gets PSCD special case not holding for a specified module and user.
            </summary>
            <param name="moduleId">The ID of the module to get special cases for.</param>
            <param name="userId">The ID of the user making the request.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of core_lod_sp_GetPSCDSpecialCaseNotHoldingResult objects containing the special cases.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="moduleId"/> or <paramref name="userId"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetPSCDSpecialCaseNotHolding].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lod_sp_GetReinvestigationLodFindingsAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Gets reinvestigation LOD findings for a specified initial LOD ID.
            </summary>
            <param name="initialLodId">The ID of the initial LOD to get reinvestigation findings for.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of core_lod_sp_GetReinvestigationLodFindingsResult objects containing the reinvestigation findings.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="initialLodId"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetReinvestigationLodFindings].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lod_sp_GetReinvestigationRequestIdAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Gets the reinvestigation request ID for a specified LOD and ID type.
            </summary>
            <param name="lodId">The ID of the LOD to get reinvestigation request ID for.</param>
            <param name="idType">The type of ID to retrieve.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of core_lod_sp_GetReinvestigationRequestIdResult objects containing the reinvestigation request ID.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="lodId"/> or <paramref name="idType"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetReinvestigationRequestId].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lod_sp_GetReinvestigationRequestsAsync(System.Nullable{System.Int32},System.Nullable{System.Boolean},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Gets reinvestigation requests for a specified user and SARC status.
            </summary>
            <param name="userId">The ID of the user to get reinvestigation requests for.</param>
            <param name="sarc">Whether to filter for SARC reinvestigations.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of core_lod_sp_GetReinvestigationRequestsResult objects containing the reinvestigation requests.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="userId"/> or <paramref name="sarc"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetReinvestigationRequests].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lod_sp_GetReinvestigationRequestsCountAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Gets the count of reinvestigation requests for a specified initial LOD ID.
            </summary>
            <param name="initialLODId">The ID of the initial LOD to get reinvestigation request count for.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of core_lod_sp_GetReinvestigationRequestsCountResult objects containing the reinvestigation request count.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="initialLODId"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetReinvestigationRequestsCount].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lod_sp_GetReinvestigationsCountAsync(System.Nullable{System.Int32},System.Nullable{System.Boolean},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Gets the count of reinvestigations for a specified user and SARC status.
            </summary>
            <param name="userId">The ID of the user to get reinvestigations count for.</param>
            <param name="sarc">Whether to filter for SARC reinvestigations.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of core_lod_sp_GetReinvestigationsCountResult objects containing the reinvestigations count.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="userId"/> or <paramref name="sarc"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetReinvestigationsCount].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lod_sp_GetSpecialCaseDispositionAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Gets special case disposition for a specified module and user.
            </summary>
            <param name="moduleId">The ID of the module to get special case disposition for.</param>
            <param name="userId">The ID of the user making the request.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of core_lod_sp_GetSpecialCaseDispositionResult objects containing the special case disposition.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="moduleId"/> or <paramref name="userId"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetSpecialCaseDisposition].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lod_sp_GetSpecialCaseHoldingAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Gets special case holding for a specified module and user.
            </summary>
            <param name="moduleId">The ID of the module to get special case holding for.</param>
            <param name="userId">The ID of the user making the request.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of core_lod_sp_GetSpecialCaseHoldingResult objects containing the special case holding.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="moduleId"/> or <paramref name="userId"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetSpecialCaseHolding].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lod_sp_GetSpecialCaseNoDispositionAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Gets special case no disposition for a specified module and user.
            </summary>
            <param name="moduleId">The ID of the module to get special case no disposition for.</param>
            <param name="userId">The ID of the user making the request.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of core_lod_sp_GetSpecialCaseNoDispositionResult objects containing the special case no disposition.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="moduleId"/> or <paramref name="userId"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetSpecialCaseNoDisposition].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lod_sp_GetSpecialCaseNotHoldingAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Gets special case not holding for a specified module and user.
            </summary>
            <param name="moduleId">The ID of the module to get special case not holding for.</param>
            <param name="userId">The ID of the user making the request.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of core_lod_sp_GetSpecialCaseNotHoldingResult objects containing the special case not holding.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="moduleId"/> or <paramref name="userId"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetSpecialCaseNotHolding].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lod_sp_GetSpecialCaseNotHoldingCountAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Gets the count of special case not holding for a specified module and user.
            </summary>
            <param name="moduleId">The ID of the module to get special case not holding count for.</param>
            <param name="userId">The ID of the user making the request.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of core_lod_sp_GetSpecialCaseNotHoldingCountResult objects containing the special case not holding count.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="moduleId"/> or <paramref name="userId"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetSpecialCaseNotHoldingCount].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lod_sp_GetSpecialCasesAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Gets special cases for a specified user.
            </summary>
            <param name="userId">The ID of the user to get special cases for.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of core_lod_sp_GetSpecialCasesResult objects containing the special cases.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="userId"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetSpecialCases].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lod_sp_GetSpecialCasesAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.String,System.String,System.String,System.String,System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Gets special cases with paging, sorting, and filtering capabilities.
            </summary>
            <param name="userId">The ID of the user making the request.</param>
            <param name="pageNumber">The page number to retrieve (1-based).</param>
            <param name="pageSize">The number of rows per page.</param>
            <param name="totalCount">Output parameter containing the total number of rows matching the filters.</param>
            <param name="sortColumn">The column to sort by (e.g., 'sc_id', 'Receive_Date', 'Member_Name').</param>
            <param name="sortDirection">The sort direction ('ASC' or 'DESC').</param>
            <param name="statusFilter">Filter by status description (partial match).</param>
            <param name="moduleFilter">Filter by module name (partial match).</param>
            <param name="daysFilter">Filter by days (e.g., '&lt;30', '&gt;10', '=5').</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of core_lod_sp_GetSpecialCasesResult objects containing the special cases.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="userId"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetSpecialCases_Paging_Full].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lod_sp_GetSpecialCasesByMemberSSNAsync(System.String,System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Gets special cases by member SSN for a specified user.
            </summary>
            <param name="member_ssn">The SSN of the member to get special cases for.</param>
            <param name="userId">The ID of the user making the request.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of core_lod_sp_GetSpecialCasesByMemberSSNResult objects containing the special cases.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="member_ssn"/> or <paramref name="userId"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetSpecialCasesByMemberSSN].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lod_sp_GetSpecialCasesByModuleCountAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Gets the count of special cases by module for a specified user and module.
            </summary>
            <param name="userId">The ID of the user to get special cases count for.</param>
            <param name="moduleId">The ID of the module to get special cases count for.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of core_lod_sp_GetSpecialCasesByModuleCountResult objects containing the special cases count by module.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="userId"/> or <paramref name="moduleId"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetSpecialCasesByModuleCount].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lod_sp_GetSpecialCasesByModuleIdAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Gets special cases by module ID for a specified user and module.
            </summary>
            <param name="userId">The ID of the user to get special cases for.</param>
            <param name="moduleId">The ID of the module to get special cases for.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of core_lod_sp_GetSpecialCasesByModuleIdResult objects containing the special cases by module ID.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="userId"/> or <paramref name="moduleId"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetSpecialCasesByModuleId].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lod_sp_GetSpecialCasesCountAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Gets the count of special cases for a specified user.
            </summary>
            <param name="userId">The ID of the user to get special cases count for.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of core_lod_sp_GetSpecialCasesCountResult objects containing the special cases count.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="userId"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetSpecialCasesCount].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lod_sp_GetSpecialCases_PagingAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Gets special cases with paging support.
            </summary>
            <param name="userId">The user ID for role resolution and access control.</param>
            <param name="pageNumber">Page number (1-based).</param>
            <param name="pageSize">Rows per page.</param>
            <param name="totalCount">Output parameter containing total count of rows.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of core_lod_sp_GetSpecialCases_PagingResult objects.</returns>
            <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetSpecialCases_Paging].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lod_sp_GetSpecialCases_Paging_FullAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.String,System.String,System.String,System.String,System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Gets special cases with full paging, sorting, and filtering support.
            </summary>
            <param name="userId">The user ID for role resolution and access control.</param>
            <param name="pageNumber">Page number (1-based).</param>
            <param name="pageSize">Rows per page.</param>
            <param name="totalCount">Output parameter containing total count of rows.</param>
            <param name="sortColumn">Column to sort by.</param>
            <param name="sortDirection">Sort direction (ASC or DESC).</param>
            <param name="statusFilter">Filter by status description.</param>
            <param name="moduleFilter">Filter by module name.</param>
            <param name="daysFilter">Filter by days (e.g., '&lt;30', '&gt;10').</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of core_lod_sp_GetSpecialCases_Paging_FullResult objects.</returns>
            <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetSpecialCases_Paging_Full].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lod_sp_GetWorkflowAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Gets the workflow for a specified LOD ID.
            </summary>
            <param name="lODid">The ID of the LOD to get workflow for.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of core_lod_sp_GetWorkflowResult objects containing the workflow data.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="lODid"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetWorkflow].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lod_sp_GetWSIDAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Gets the WSID for a specified ID.
            </summary>
            <param name="iD">The ID to get WSID for.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of core_lod_sp_GetWSIDResult objects containing the WSID data.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="iD"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetWSID].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lod_sp_GetWWDListByMemberSSNAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Gets WWD list by member SSN with specified search type and user.
            </summary>
            <param name="memberSSN">The SSN of the member to get WWD list for.</param>
            <param name="searchType">The type of search to perform.</param>
            <param name="userId">The ID of the user making the request.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of core_lod_sp_GetWWDListByMemberSSNResult objects containing the WWD list.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="memberSSN"/>, <paramref name="searchType"/>, or <paramref name="userId"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetWWDListByMemberSSN].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lod_sp_SetLODPostCompletionAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Sets LOD post-completion for a specified LOD ID.
            </summary>
            <param name="lodId">The ID of the LOD to set post-completion for.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>The number of affected rows.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="lodId"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_lod_sp_SetLODPostCompletion].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lod_sp_UpdateAppealPostCompletionAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.Nullable{System.DateOnly},System.String,System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Updates appeal post-completion with detailed information.
            </summary>
            <param name="appealId">The ID of the appeal to update.</param>
            <param name="lodId">The ID of the LOD associated with the appeal.</param>
            <param name="appealStreet">The street address for the appeal.</param>
            <param name="appealCity">The city for the appeal.</param>
            <param name="appealState">The state for the appeal.</param>
            <param name="appealZip">The ZIP code for the appeal.</param>
            <param name="appealCountry">The country for the appeal.</param>
            <param name="memberNotificationDate">The date when the member was notified.</param>
            <param name="helpExtensionNumber">The help extension number.</param>
            <param name="email">The email address.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>The number of affected rows.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="appealId"/> or <paramref name="lodId"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_lod_sp_UpdateAppealPostCompletion].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lod_sp_UpdateLODPostCompletionAsync(System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.DateTime},System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Updates LOD post-completion with detailed information.
            </summary>
            <param name="lodId">The ID of the LOD to update post-completion for.</param>
            <param name="helpExtensionNumber">The help extension number.</param>
            <param name="appealStreet">The street address for the appeal.</param>
            <param name="appealCity">The city for the appeal.</param>
            <param name="appealState">The state for the appeal.</param>
            <param name="appealZip">The ZIP code for the appeal.</param>
            <param name="appealCountry">The country for the appeal.</param>
            <param name="nokFirstName">The first name of the next of kin.</param>
            <param name="nokLastName">The last name of the next of kin.</param>
            <param name="nokMiddleName">The middle name of the next of kin.</param>
            <param name="notificationDate">The date when notification was sent.</param>
            <param name="email">The email address.</param>
            <param name="chkAddress">Whether to check the address.</param>
            <param name="chkEmail">Whether to check the email.</param>
            <param name="chkPhone">Whether to check the phone.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>The number of affected rows.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="lodId"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_lod_sp_UpdateLODPostCompletion].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_log_sp_GetChangeSetByLogIdAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves change set data for a specific log entry by log ID.
            </summary>
            <param name="logId">The unique identifier of the log entry to retrieve change set data for.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list of change set records associated with the specified log ID.</returns>
            <remarks>
            This method executes the [dbo].[core_log_sp_GetChangeSetByLogId] stored procedure to retrieve detailed change set information for auditing and tracking purposes.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_log_sp_GetChangeSetByUserIdAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves change set data for a specific user by user ID.
            </summary>
            <param name="userId">The unique identifier of the user to retrieve change set data for.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list of change set records associated with the specified user.</returns>
            <remarks>
            This method executes the [dbo].[core_log_sp_GetChangeSetByUserId] stored procedure to retrieve user-specific change set information for auditing purposes.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_log_sp_GetChangeSetDetailsAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves detailed change set information for multiple log entries by their IDs.
            </summary>
            <param name="logIds">A comma-separated string of log IDs to retrieve change set details for.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list of detailed change set records for the specified log IDs.</returns>
            <remarks>
            This method executes the [dbo].[core_log_sp_GetChangeSetDetails] stored procedure to retrieve comprehensive change set details for multiple log entries, useful for batch auditing operations.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_log_sp_GetChangeSetsByRefIdAsync(System.Nullable{System.Int32},System.Nullable{System.Byte},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves change sets for a specific reference ID and module.
            </summary>
            <param name="refId">The reference ID to retrieve change sets for.</param>
            <param name="module">The module identifier to filter change sets by.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list of change set records for the specified reference ID and module.</returns>
            <remarks>
            This method executes the [dbo].[core_log_sp_GetChangeSetsByRefId] stored procedure to retrieve change sets associated with a specific reference entity and module for targeted auditing.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_log_sp_GetErrorByIdAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves error information by error ID.
            </summary>
            <param name="iD">The unique identifier of the error to retrieve.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list containing the error record for the specified ID.</returns>
            <remarks>
            This method executes the [dbo].[core_log_sp_GetErrorById] stored procedure to retrieve detailed error information for debugging and error tracking purposes.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_log_sp_GetErrorsAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves all error records from the system.
            </summary>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list of all error records in the system.</returns>
            <remarks>
            This method executes the [dbo].[core_log_sp_GetErrors] stored procedure to retrieve all error records for system-wide error monitoring and analysis.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_log_sp_GetLastChangeAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves the last change record for a specific user.
            </summary>
            <param name="userId">The unique identifier of the user to retrieve the last change for.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list containing the most recent change record for the specified user.</returns>
            <remarks>
            This method executes the [dbo].[core_log_sp_GetLastChange] stored procedure to retrieve the most recent change activity for a user, useful for tracking recent user actions.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_log_sp_InsertChangeSetAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Inserts a new change set record into the logging system.
            </summary>
            <param name="changerows">The change data to be inserted as a text string.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>The number of rows affected by the insert operation.</returns>
            <remarks>
            This method executes the [dbo].[core_log_sp_InsertChangeSet] stored procedure to record change set information for auditing and change tracking purposes.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_log_sp_LogPageGenerationTimeAsync(System.Nullable{System.DateTime},System.String,System.String,System.String,System.String,System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Logs page generation time metrics for performance monitoring.
            </summary>
            <param name="action_date">The date and time when the page generation occurred.</param>
            <param name="measuredTime">The measured time taken to generate the page.</param>
            <param name="currentPage">The name or URL of the current page being generated.</param>
            <param name="referringPage">The referring page that led to the current page.</param>
            <param name="username">The username of the user accessing the page.</param>
            <param name="role">The role of the user accessing the page.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list containing the logged page generation metrics.</returns>
            <remarks>
            This method executes the [dbo].[core_log_sp_LogPageGenerationTime] stored procedure to record page performance metrics for monitoring and optimization purposes.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_log_sp_RecordActionAsync(System.Nullable{System.Byte},System.Nullable{System.Byte},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Nullable{System.Int32}},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Records an action performed by a user in the system.
            </summary>
            <param name="moduleId">The identifier of the module where the action occurred.</param>
            <param name="actionId">The identifier of the specific action performed.</param>
            <param name="userId">The unique identifier of the user who performed the action.</param>
            <param name="referenceId">The reference ID of the entity the action was performed on.</param>
            <param name="notes">Additional notes or comments about the action.</param>
            <param name="status">The current status before the action.</param>
            <param name="newStatus">The new status after the action.</param>
            <param name="address">The IP address or location from which the action was performed.</param>
            <param name="logId">Output parameter that returns the generated log ID for the recorded action.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list containing the recorded action details.</returns>
            <remarks>
            This method executes the [dbo].[core_log_sp_RecordAction] stored procedure to log user actions for comprehensive audit trails and system monitoring.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_log_sp_RecordEmailAsync(System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Records an email sent by the system for audit purposes.
            </summary>
            <param name="userId">The unique identifier of the user who initiated the email.</param>
            <param name="eTo">The primary recipient email address.</param>
            <param name="eCC">The CC recipient email addresses.</param>
            <param name="eBCC">The BCC recipient email addresses.</param>
            <param name="subject">The subject line of the email.</param>
            <param name="body">The body content of the email.</param>
            <param name="failed">Failure information if the email failed to send.</param>
            <param name="templateId">The identifier of the email template used.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list containing the recorded email details.</returns>
            <remarks>
            This method executes the [dbo].[core_log_sp_RecordEmail] stored procedure to log email communications for compliance and audit purposes.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_log_sp_RecordErrorAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Records an error that occurred in the system for debugging and monitoring.
            </summary>
            <param name="userName">The username of the user who encountered the error.</param>
            <param name="page">The page or location where the error occurred.</param>
            <param name="version">The application version when the error occurred.</param>
            <param name="browser">The browser information of the user.</param>
            <param name="message">The error message describing what went wrong.</param>
            <param name="stacktrace">The stack trace information for debugging.</param>
            <param name="caller">The method or function that triggered the error.</param>
            <param name="address">The IP address or location from which the error originated.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>The number of rows affected by the error logging operation.</returns>
            <remarks>
            This method executes the [dbo].[core_log_sp_RecordError] stored procedure to capture detailed error information for system diagnostics and troubleshooting.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookups_GetAllModulesAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves all available modules in the system.
            </summary>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list of all modules available in the system.</returns>
            <remarks>
            This method executes the [dbo].[core_lookups_GetAllModules] stored procedure to retrieve the complete list of system modules for configuration and navigation purposes.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookUps_sp_ComponentAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves component lookup data for system configuration.
            </summary>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list of component lookup values.</returns>
            <remarks>
            This method executes the [dbo].[core_lookUps_sp_Component] stored procedure to retrieve component reference data used throughout the system.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookUps_sp_DutyStatusesAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves duty status lookup data for personnel management.
            </summary>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list of duty status lookup values.</returns>
            <remarks>
            This method executes the [dbo].[core_lookUps_sp_DutyStatuses] stored procedure to retrieve duty status reference data for personnel and assignment tracking.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookUps_sp_FromLocationAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves from location lookup data for incident reporting.
            </summary>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list of from location lookup values.</returns>
            <remarks>
            This method executes the [dbo].[core_lookUps_sp_FromLocation] stored procedure to retrieve location reference data for incident and case reporting.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookUps_sp_Get_SCSubTypeIdByWorkflowTitleAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves SC subtype ID by workflow title for special case management.
            </summary>
            <param name="workflowTitle">The workflow title to find the SC subtype for.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list containing the SC subtype information for the specified workflow title.</returns>
            <remarks>
            This method executes the [dbo].[core_lookUps_sp_Get_SCSubTypeIdByWorkflowTitle] stored procedure to retrieve special case subtype information based on workflow title for case routing and processing.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookUps_sp_Get_SCSubTypesByWorkflowIdAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves SC subtypes by workflow ID for special case management.
            </summary>
            <param name="workflowId">The workflow ID to retrieve SC subtypes for.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list of SC subtypes associated with the specified workflow.</returns>
            <remarks>
            This method executes the [dbo].[core_lookUps_sp_Get_SCSubTypesByWorkflowId] stored procedure to retrieve special case subtype options for a specific workflow.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookUps_sp_GetAllDAWGRecommendationsAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves all DAWG recommendations for case disposition.
            </summary>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list of all DAWG recommendation options.</returns>
            <remarks>
            This method executes the [dbo].[core_lookUps_sp_GetAllDAWGRecommendations] stored procedure to retrieve DAWG (likely Defense Advisory Working Group) recommendation reference data for case disposition.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookUps_sp_GetAllFollowUpIntervalsAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves all follow-up interval options for case management.
            </summary>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list of all follow-up interval options.</returns>
            <remarks>
            This method executes the [dbo].[core_lookUps_sp_GetAllFollowUpIntervals] stored procedure to retrieve follow-up interval reference data for case management and scheduling.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookUps_sp_GetAllMissedWorkDaysAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves all missed work days options for case reporting.
            </summary>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list of all missed work days options.</returns>
            <remarks>
            This method executes the [dbo].[core_lookUps_sp_GetAllMissedWorkDays] stored procedure to retrieve missed work days reference data for incident and absence reporting.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookups_sp_GetAllRMUsAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves all RMUs (Resource Management Units) in the system.
            </summary>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list of all RMU records.</returns>
            <remarks>
            This method executes the [dbo].[core_lookups_sp_GetAllRMUs] stored procedure to retrieve all Resource Management Unit reference data for organizational management.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookUps_sp_GetAllSpecialistsRequiredForManagementAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves all specialists required for management oversight.
            </summary>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list of all specialists required for management.</returns>
            <remarks>
            This method executes the [dbo].[core_lookUps_sp_GetAllSpecialistsRequiredForManagement] stored procedure to retrieve specialist requirement reference data for management and oversight purposes.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookUps_sp_GetAllSuddenIncapaciationRisksAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves all sudden incapacitation risk options.
            </summary>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list of all sudden incapacitation risk options.</returns>
            <remarks>
            This method executes the [dbo].[core_lookUps_sp_GetAllSuddenIncapaciationRisks] stored procedure to retrieve sudden incapacitation risk reference data for medical and safety assessments.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookUps_sp_GetAllYearsSatisfactoryServiceAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves all years of satisfactory service options.
            </summary>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list of all years of satisfactory service options.</returns>
            <remarks>
            This method executes the [dbo].[core_lookUps_sp_GetAllYearsSatisfactoryService] stored procedure to retrieve years of satisfactory service reference data for personnel evaluations.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookups_sp_GetAMRODispositionAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves AMRO disposition options.
            </summary>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list of AMRO disposition options.</returns>
            <remarks>
            This method executes the [dbo].[core_lookups_sp_GetAMRODisposition] stored procedure to retrieve AMRO (likely Aeromedical Review Officer) disposition reference data for medical case management.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookups_sp_GetAvailabilityCodeAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves availability code options.
            </summary>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list of availability code options.</returns>
            <remarks>
            This method executes the [dbo].[core_lookups_sp_GetAvailabilityCode] stored procedure to retrieve availability code reference data for personnel status tracking.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookUps_sp_GetCancelReasonDescriptionByIdAsync(System.Nullable{System.Byte},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves cancel reason description by reason ID.
            </summary>
            <param name="reasonId">The unique identifier of the cancel reason.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list containing the cancel reason description for the specified ID.</returns>
            <remarks>
            This method executes the [dbo].[core_lookUps_sp_GetCancelReasonDescriptionById] stored procedure to retrieve detailed cancel reason information for case management.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookups_sp_GetCancelReasonsAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves all cancel reason options.
            </summary>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list of all cancel reason options.</returns>
            <remarks>
            This method executes the [dbo].[core_lookups_sp_GetCancelReasons] stored procedure to retrieve all cancel reason reference data for case cancellation management.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookups_sp_GetDataTypeByIdAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves a specific data type by its identifier.
            </summary>
            <param name="id">The unique identifier of the data type to retrieve.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>The data type information for the specified identifier.</returns>
            <remarks>
            This method executes the [dbo].[core_lookups_sp_GetDataTypeById] stored procedure to retrieve specific data type reference data by ID.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookups_sp_GetDataTypesAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves all data types.
            </summary>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list of all data types.</returns>
            <remarks>
            This method executes the [dbo].[core_lookups_sp_GetDataTypes] stored procedure to retrieve all data type reference data for system configuration.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookups_sp_GetDispositionByIdAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves a specific disposition by its identifier.
            </summary>
            <param name="id">The unique identifier of the disposition to retrieve.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>The disposition information for the specified identifier.</returns>
            <remarks>
            This method executes the [dbo].[core_lookups_sp_GetDispositionById] stored procedure to retrieve specific disposition reference data by ID.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookups_sp_GetDispositionsAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves all dispositions.
            </summary>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list of all dispositions.</returns>
            <remarks>
            This method executes the [dbo].[core_lookups_sp_GetDispositions] stored procedure to retrieve all disposition reference data for case management.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookups_sp_GetDispositionWorkflowsAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves workflow information for a specific disposition.
            </summary>
            <param name="dispositionId">The disposition identifier to filter workflows by.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list of workflow information for the specified disposition.</returns>
            <remarks>
            This method executes the [dbo].[core_lookups_sp_GetDispositionWorkflows] stored procedure to retrieve workflow data associated with a specific disposition.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookUps_sp_GetForm348SnapshotAsync(System.Nullable{System.DateTime},System.Nullable{System.DateTime},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves Form 348 snapshot data within a specified date range.
            </summary>
            <param name="beginDate">The beginning date for the snapshot period.</param>
            <param name="endDate">The ending date for the snapshot period.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list of Form 348 snapshot records for the specified date range.</returns>
            <remarks>
            This method executes the [dbo].[core_lookUps_sp_GetForm348Snapshot] stored procedure to retrieve Form 348 snapshot data for reporting and analysis purposes.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookUps_sp_GetGradeAbbreviationByTypeAndCodeAsync(System.String,System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves grade abbreviation information by type and code.
            </summary>
            <param name="abbreviationTypeName">The type name of the abbreviation to retrieve.</param>
            <param name="gradeCode">The grade code to filter abbreviations by.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>The grade abbreviation information for the specified type and code.</returns>
            <remarks>
            This method executes the [dbo].[core_lookUps_sp_GetGradeAbbreviationByTypeAndCode] stored procedure to retrieve grade abbreviation data filtered by type and code.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookups_sp_GetGradesAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves all grade information.
            </summary>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list of all grade records.</returns>
            <remarks>
            This method executes the [dbo].[core_lookups_sp_GetGrades] stored procedure to retrieve all grade reference data for personnel management.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookups_sp_GetIRILOStatusAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves all IRILO status options.
            </summary>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list of all IRILO status options.</returns>
            <remarks>
            This method executes the [dbo].[core_lookups_sp_GetIRILOStatus] stored procedure to retrieve all IRILO status reference data for case management.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookups_sp_GetIRILOTypeICDCodeIDsAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves ICD code IDs for a specific diagnosis type.
            </summary>
            <param name="diagnosisType">The diagnosis type to filter ICD codes by.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list of ICD code IDs for the specified diagnosis type.</returns>
            <remarks>
            This method executes the [dbo].[core_lookups_sp_GetIRILOTypeICDCodeIDs] stored procedure to retrieve ICD code identifiers for medical diagnosis categorization.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookUps_sp_GetMAJCOMAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves MAJCOM information with optional filtering.
            </summary>
            <param name="id">Optional identifier to filter specific MAJCOM.</param>
            <param name="filter">Optional filter value for MAJCOM records.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list of MAJCOM information based on the provided filters.</returns>
            <remarks>
            This method executes the [dbo].[core_lookUps_sp_GetMAJCOM] stored procedure to retrieve MAJCOM reference data with optional filtering capabilities.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookups_sp_GetMemberComponentsByWorkflowAsync(System.Nullable{System.Byte},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves member components associated with a specific workflow.
            </summary>
            <param name="workflowId">The workflow identifier to filter member components by.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list of member components for the specified workflow.</returns>
            <remarks>
            This method executes the [dbo].[core_lookups_sp_GetMemberComponentsByWorkflow] stored procedure to retrieve member component data filtered by workflow for case processing.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookUps_sp_GetMemberPSCDCategoryAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves all member PSCD category options.
            </summary>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list of all member PSCD category options.</returns>
            <remarks>
            This method executes the [dbo].[core_lookUps_sp_GetMemberPSCDCategory] stored procedure to retrieve all member PSCD category reference data for personnel management.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookUps_sp_GetMemberPSCDStatusAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves all member PSCD status options.
            </summary>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list of all member PSCD status options.</returns>
            <remarks>
            This method executes the [dbo].[core_lookUps_sp_GetMemberPSCDStatus] stored procedure to retrieve all member PSCD status reference data for personnel management.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookUps_sp_GetPasCodeChainTypeAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves all PAS code chain type options.
            </summary>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list of all PAS code chain type options.</returns>
            <remarks>
            This method executes the [dbo].[core_lookUps_sp_GetPasCodeChainType] stored procedure to retrieve all PAS code chain type reference data for system configuration.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookUps_sp_GetPEPPCaseTypesAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves all PEPP case types.
            </summary>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list of all PEPP case types.</returns>
            <remarks>
            This method executes the [dbo].[core_lookUps_sp_GetPEPPCaseTypes] stored procedure to retrieve all PEPP case type reference data for case classification.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookUps_sp_GetPEPPDispositionsAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves PEPP dispositions with optional filtering.
            </summary>
            <param name="id">Optional identifier to filter specific PEPP disposition.</param>
            <param name="filter">Optional filter value for PEPP dispositions.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list of PEPP dispositions based on the provided filters.</returns>
            <remarks>
            This method executes the [dbo].[core_lookUps_sp_GetPEPPDispositions] stored procedure to retrieve PEPP disposition reference data with optional filtering capabilities.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookUps_sp_GetPEPPRatingsAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves PEPP ratings with optional filtering.
            </summary>
            <param name="id">Optional identifier to filter specific PEPP rating.</param>
            <param name="filter">Optional filter value for PEPP ratings.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list of PEPP ratings based on the provided filters.</returns>
            <remarks>
            This method executes the [dbo].[core_lookUps_sp_GetPEPPRatings] stored procedure to retrieve PEPP rating reference data with optional filtering capabilities.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookUps_sp_GetPEPPTypesAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves PEPP types with optional filtering.
            </summary>
            <param name="id">Optional identifier to filter specific PEPP type.</param>
            <param name="filter">Optional filter value for PEPP types.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list of PEPP types based on the provided filters.</returns>
            <remarks>
            This method executes the [dbo].[core_lookUps_sp_GetPEPPTypes] stored procedure to retrieve PEPP type reference data with optional filtering capabilities.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookups_sp_GetRMUByIdAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves RMU information by identifier.
            </summary>
            <param name="id">The unique identifier of the RMU to retrieve.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>The RMU information for the specified identifier.</returns>
            <remarks>
            This method executes the [dbo].[core_lookups_sp_GetRMUById] stored procedure to retrieve specific RMU reference data by ID.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookups_sp_GetWorkflowDispositionsAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves disposition information for a specific workflow.
            </summary>
            <param name="workflowId">The workflow identifier to filter dispositions by.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list of disposition information for the specified workflow.</returns>
            <remarks>
            This method executes the [dbo].[core_lookups_sp_GetWorkflowDispositions] stored procedure to retrieve disposition data associated with a specific workflow.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookUps_sp_InfoSourcesAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves all information source options.
            </summary>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list of all information source options.</returns>
            <remarks>
            This method executes the [dbo].[core_lookUps_sp_InfoSources] stored procedure to retrieve all information source reference data for case documentation.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookups_sp_Insert_MAJCOMAsync(System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Inserts a new MAJCOM record.
            </summary>
            <param name="id">The identifier for the new MAJCOM.</param>
            <param name="majcomName">The name of the MAJCOM.</param>
            <param name="active">Flag indicating whether the MAJCOM is active.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>The result of the insert operation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="id"/> or <paramref name="majcomName"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_lookups_sp_Insert_MAJCOM].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookups_sp_Insert_PEPPDispositionAsync(System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Inserts a new PEPP disposition record.
            </summary>
            <param name="id">The identifier for the new PEPP disposition.</param>
            <param name="dispositionName">The name of the PEPP disposition.</param>
            <param name="active">Flag indicating whether the disposition is active.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>The result of the insert operation.</returns>
            <remarks>
            This method executes the [dbo].[core_lookups_sp_Insert_PEPPDisposition] stored procedure to add a new PEPP disposition to the reference data.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookups_sp_Insert_PEPPRatingAsync(System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Inserts a new PEPP rating record.
            </summary>
            <param name="id">The identifier for the new PEPP rating.</param>
            <param name="ratingName">The name of the PEPP rating.</param>
            <param name="active">Flag indicating whether the rating is active.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>The result of the insert operation.</returns>
            <remarks>
            This method executes the [dbo].[core_lookups_sp_Insert_PEPPRating] stored procedure to add a new PEPP rating to the reference data.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookups_sp_Insert_PEPPTypeAsync(System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Inserts a new PEPP type record.
            </summary>
            <param name="id">The identifier for the new PEPP type.</param>
            <param name="typeName">The name of the PEPP type.</param>
            <param name="active">Flag indicating whether the type is active.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>The result of the insert operation.</returns>
            <remarks>
            This method executes the [dbo].[core_lookups_sp_Insert_PEPPType] stored procedure to add a new PEPP type to the reference data.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookups_sp_Insert_RMUAsync(System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Inserts a new RMU record.
            </summary>
            <param name="id">The identifier for the new RMU.</param>
            <param name="rmuName">The name of the RMU.</param>
            <param name="rmuPAS">The PAS code for the RMU.</param>
            <param name="collocated">Flag indicating whether the RMU is collocated.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>The result of the insert operation.</returns>
            <remarks>
            This method executes the [dbo].[core_lookups_sp_Insert_RMU] stored procedure to add a new RMU to the reference data with specified name, PAS code, and collocation status.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookUps_sp_InsertCategoryAsync(System.String,System.String,System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Inserts a new category record.
            </summary>
            <param name="description">The description of the category.</param>
            <param name="type">The type of the category.</param>
            <param name="sort_order">The sort order for the category.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>The result of the insert operation.</returns>
            <remarks>
            This method executes the [dbo].[core_lookUps_sp_InsertCategory] stored procedure to add a new category to the reference data with specified description, type, and sort order.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookUps_sp_InsertComponentAsync(System.String,System.String,System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Inserts a new component record.
            </summary>
            <param name="description">The description of the component.</param>
            <param name="type">The type of the component.</param>
            <param name="sort_order">The sort order for the component.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>The result of the insert operation.</returns>
            <remarks>
            This method executes the [dbo].[core_lookUps_sp_InsertComponent] stored procedure to add a new component to the reference data with specified description, type, and sort order.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookups_sp_InsertDispositionAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Inserts a new disposition record.
            </summary>
            <param name="newDispositionName">The name of the new disposition to insert.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>The result of the insert operation.</returns>
            <remarks>
            This method executes the [dbo].[core_lookups_sp_InsertDisposition] stored procedure to add a new disposition to the reference data.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookUps_sp_InsertDutyStatusAsync(System.String,System.String,System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Inserts a new duty status record.
            </summary>
            <param name="description">The description of the duty status.</param>
            <param name="type">The type of the duty status.</param>
            <param name="sort_order">The sort order for the duty status.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>The result of the insert operation.</returns>
            <remarks>
            This method executes the [dbo].[core_lookUps_sp_InsertDutyStatus] stored procedure to add a new duty status to the reference data with specified description, type, and sort order.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookUps_sp_InsertFacilityAsync(System.String,System.String,System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Inserts a new facility record.
            </summary>
            <param name="description">The description of the facility.</param>
            <param name="type">The type of the facility.</param>
            <param name="sort_order">The sort order for the facility.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>The result of the insert operation.</returns>
            <remarks>
            This method executes the [dbo].[core_lookUps_sp_InsertFacility] stored procedure to add a new facility to the reference data with specified description, type, and sort order.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookUps_sp_InsertFromLocationAsync(System.String,System.String,System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Inserts a new from location record.
            </summary>
            <param name="description">The description of the from location.</param>
            <param name="type">The type of the from location.</param>
            <param name="sort_order">The sort order for the from location.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>The result of the insert operation.</returns>
            <remarks>
            This method executes the [dbo].[core_lookUps_sp_InsertFromLocation] stored procedure to add a new from location to the reference data with specified description, type, and sort order.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookUps_sp_InsertInfluenceAsync(System.String,System.String,System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Inserts a new influence record.
            </summary>
            <param name="description">The description of the influence.</param>
            <param name="type">The type of the influence.</param>
            <param name="sort_order">The sort order for the influence.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>The result of the insert operation.</returns>
            <remarks>
            This method executes the [dbo].[core_lookUps_sp_InsertInfluence] stored procedure to add a new influence to the reference data with specified description, type, and sort order.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookUps_sp_InsertInfoSourceAsync(System.String,System.String,System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Inserts a new information source record.
            </summary>
            <param name="description">The description of the information source.</param>
            <param name="type">The type of the information source.</param>
            <param name="sort_order">The sort order for the information source.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>The result of the insert operation.</returns>
            <remarks>
            This method executes the [dbo].[core_lookUps_sp_InsertInfoSource] stored procedure to add a new information source to the reference data with specified description, type, and sort order.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookUps_sp_InsertOccurrenceAsync(System.String,System.String,System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Inserts a new occurrence record.
            </summary>
            <param name="description">The description of the occurrence.</param>
            <param name="type">The type of the occurrence.</param>
            <param name="sort_order">The sort order for the occurrence.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>The result of the insert operation.</returns>
            <remarks>
            This method executes the [dbo].[core_lookUps_sp_InsertOccurrence] stored procedure to add a new occurrence to the reference data with specified description, type, and sort order.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookUps_sp_InsertProximateAsync(System.String,System.String,System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Inserts a new proximate cause record.
            </summary>
            <param name="description">The description of the proximate cause.</param>
            <param name="type">The type of the proximate cause.</param>
            <param name="sort_order">The sort order for the proximate cause.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>The result of the insert operation.</returns>
            <remarks>
            This method executes the [dbo].[core_lookUps_sp_InsertProximate] stored procedure to add a new proximate cause to the reference data with specified description, type, and sort order.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookUps_sp_InsertStatusAsync(System.String,System.String,System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Inserts a new status record.
            </summary>
            <param name="description">The description of the status.</param>
            <param name="type">The type of the status.</param>
            <param name="sort_order">The sort order for the status.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>The result of the insert operation.</returns>
            <remarks>
            This method executes the [dbo].[core_lookUps_sp_InsertStatus] stored procedure to add a new status to the reference data with specified description, type, and sort order.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookUps_sp_MedGroupNamesAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves all medical group names.
            </summary>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list of all medical group names.</returns>
            <remarks>
            This method executes the [dbo].[core_lookUps_sp_MedGroupNames] stored procedure to retrieve all medical group name reference data for healthcare management.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookUps_sp_MedicalFacilityAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves all medical facility options.
            </summary>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list of all medical facility options.</returns>
            <remarks>
            This method executes the [dbo].[core_lookUps_sp_MedicalFacility] stored procedure to retrieve all medical facility reference data for healthcare management.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookUps_sp_MemberCategoryAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves all member category options.
            </summary>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list of all member category options.</returns>
            <remarks>
            This method executes the [dbo].[core_lookUps_sp_MemberCategory] stored procedure to retrieve all member category reference data for personnel management.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookUps_sp_MemberInfluenceAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves all member influence options.
            </summary>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list of all member influence options.</returns>
            <remarks>
            This method executes the [dbo].[core_lookUps_sp_MemberInfluence] stored procedure to retrieve all member influence reference data for case analysis.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookUps_sp_OccurrencesAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves all occurrence options.
            </summary>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list of all occurrence options.</returns>
            <remarks>
            This method executes the [dbo].[core_lookUps_sp_Occurrences] stored procedure to retrieve all occurrence reference data for case management.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookUps_sp_ProcessAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves all process options.
            </summary>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list of all process options.</returns>
            <remarks>
            This method executes the [dbo].[core_lookUps_sp_Process] stored procedure to retrieve all process reference data for workflow management.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookUps_sp_ProximateCauseAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves all proximate cause options.
            </summary>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list of all proximate cause options.</returns>
            <remarks>
            This method executes the [dbo].[core_lookUps_sp_ProximateCause] stored procedure to retrieve all proximate cause reference data for case analysis.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_LookUps_sp_RMUAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves all RMU options.
            </summary>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list of all RMU options.</returns>
            <remarks>
            This method executes the [dbo].[core_LookUps_sp_RMU] stored procedure to retrieve all RMU reference data for organizational management.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookUps_sp_RMUNamesAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves all RMU names.
            </summary>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list of all RMU names.</returns>
            <remarks>
            This method executes the [dbo].[core_lookUps_sp_RMUNames] stored procedure to retrieve all RMU name reference data for organizational management.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookUps_sp_SpecCaseRWOAAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves special case RWOA data for a specific workflow and reference ID.
            </summary>
            <param name="workflow">The workflow identifier to filter by.</param>
            <param name="refID">The reference identifier to filter by.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list of special case RWOA records for the specified workflow and reference ID.</returns>
            <remarks>
            This method executes the [dbo].[core_lookUps_sp_SpecCaseRWOA] stored procedure to retrieve special case RWOA data filtered by workflow and reference identifier.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookups_sp_UpdateCancelReasonsAsync(System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Updates an existing cancel reasons record.
            </summary>
            <param name="cancelReasonsId">The identifier of the cancel reasons record to update.</param>
            <param name="newCancelReasonsDescription">The new description for the cancel reasons.</param>
            <param name="newCancelReasonsDisplayOrder">The new display order for the cancel reasons.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>The result of the update operation.</returns>
            <remarks>
            This method executes the [dbo].[core_lookups_sp_UpdateCancelReasons] stored procedure to modify an existing cancel reasons record with new description and display order.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookUps_sp_UpdateCategoryAsync(System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Updates an existing category record.
            </summary>
            <param name="id">The identifier of the category to update.</param>
            <param name="description">The new description for the category.</param>
            <param name="type">The new type for the category.</param>
            <param name="sort_order">The new sort order for the category.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>The result of the update operation.</returns>
            <remarks>
            This method executes the [dbo].[core_lookUps_sp_UpdateCategory] stored procedure to modify an existing category record with new description, type, and sort order.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookUps_sp_UpdateComponentAsync(System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Updates an existing component record.
            </summary>
            <param name="id">The identifier of the component to update.</param>
            <param name="description">The new description for the component.</param>
            <param name="type">The new type for the component.</param>
            <param name="sort_order">The new sort order for the component.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>The result of the update operation.</returns>
            <remarks>
            This method executes the [dbo].[core_lookUps_sp_UpdateComponent] stored procedure to modify an existing component record with new description, type, and sort order.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookups_sp_UpdateDispositionAsync(System.Nullable{System.Int32},System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Updates an existing disposition record.
            </summary>
            <param name="dispositionId">The identifier of the disposition to update.</param>
            <param name="newDispositionName">The new name for the disposition.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>The result of the update operation.</returns>
            <remarks>
            This method executes the [dbo].[core_lookups_sp_UpdateDisposition] stored procedure to modify an existing disposition record with a new name.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookUps_sp_UpdateDutyStatusAsync(System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Updates an existing duty status record.
            </summary>
            <param name="id">The identifier of the duty status to update.</param>
            <param name="description">The new description for the duty status.</param>
            <param name="type">The new type for the duty status.</param>
            <param name="sort_order">The new sort order for the duty status.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>The result of the update operation.</returns>
            <remarks>
            This method executes the [dbo].[core_lookUps_sp_UpdateDutyStatus] stored procedure to modify an existing duty status record with new description, type, and sort order.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookUps_sp_UpdateFacilityAsync(System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Updates an existing facility record.
            </summary>
            <param name="id">The identifier of the facility to update.</param>
            <param name="description">The new description for the facility.</param>
            <param name="type">The new type for the facility.</param>
            <param name="sort_order">The new sort order for the facility.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>The result of the update operation.</returns>
            <remarks>
            This method executes the [dbo].[core_lookUps_sp_UpdateFacility] stored procedure to modify an existing facility record with new description, type, and sort order.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookUps_sp_UpdateFromLocationAsync(System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Updates an existing from location record.
            </summary>
            <param name="id">The identifier of the from location to update.</param>
            <param name="description">The new description for the from location.</param>
            <param name="type">The new type for the from location.</param>
            <param name="sort_order">The new sort order for the from location.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>The result of the update operation.</returns>
            <remarks>
            This method executes the [dbo].[core_lookUps_sp_UpdateFromLocation] stored procedure to modify an existing from location record with new description, type, and sort order.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookUps_sp_UpdateInfluenceAsync(System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Updates an existing influence record.
            </summary>
            <param name="id">The identifier of the influence to update.</param>
            <param name="description">The new description for the influence.</param>
            <param name="type">The new type for the influence.</param>
            <param name="sort_order">The new sort order for the influence.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>The result of the update operation.</returns>
            <remarks>
            This method executes the [dbo].[core_lookUps_sp_UpdateInfluence] stored procedure to modify an existing influence record with new description, type, and sort order.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookUps_sp_UpdateInfoSourceAsync(System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Updates an existing info source record.
            </summary>
            <param name="id">The identifier of the info source to update.</param>
            <param name="description">The new description for the info source.</param>
            <param name="type">The new type for the info source.</param>
            <param name="sort_order">The new sort order for the info source.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>The result of the update operation.</returns>
            <remarks>
            This method executes the [dbo].[core_lookUps_sp_UpdateInfoSource] stored procedure to modify an existing info source record with new description, type, and sort order.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookUps_sp_UpdateProximateAsync(System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Updates an existing proximate cause record.
            </summary>
            <param name="id">The identifier of the proximate cause to update.</param>
            <param name="description">The new description for the proximate cause.</param>
            <param name="type">The new type for the proximate cause.</param>
            <param name="sort_order">The new sort order for the proximate cause.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>The result of the update operation.</returns>
            <remarks>
            This method executes the [dbo].[core_lookUps_sp_UpdateProximate] stored procedure to modify an existing proximate cause record with new description, type, and sort order.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookUps_sp_UpdateStatusAsync(System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Updates an existing status record.
            </summary>
            <param name="id">The identifier of the status to update.</param>
            <param name="description">The new description for the status.</param>
            <param name="type">The new type for the status.</param>
            <param name="sort_order">The new sort order for the status.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>The result of the update operation.</returns>
            <remarks>
            This method executes the [dbo].[core_lookUps_sp_UpdateStatus] stored procedure to modify an existing status record with new description, type, and sort order.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookups_sp_UpdateWorkflowDispositionMapsAsync(System.Nullable{System.Int32},System.Data.DataTable,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Updates workflow disposition mappings for a specific disposition.
            </summary>
            <param name="dispositionId">The identifier of the disposition to update mappings for.</param>
            <param name="workflowIds">A table-valued parameter containing the workflow IDs to map to the disposition.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>The result of the update operation.</returns>
            <remarks>
            This method executes the [dbo].[core_lookups_sp_UpdateWorkflowDispositionMaps] stored procedure to update the workflow mappings for a specific disposition using a table-valued parameter.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_memo_sp_copy_memos_to_memos2Async(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Copies memo records from memos table to memos2 table.
            </summary>
            <param name="requestId">The request identifier for the memo copy operation.</param>
            <param name="userId">The user identifier performing the copy operation.</param>
            <param name="newModuleId">The new module identifier for the copied memos.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>The result of the copy operation.</returns>
            <remarks>
            This method executes the [dbo].[core_memo_sp_copy_memos_to_memos2] stored procedure to copy memo records from the main memos table to the memos2 table with updated module assignment.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_memo_sp_copy_memos2_to_memosAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Copies memo records from memos2 table back to memos table.
            </summary>
            <param name="requestId">The request identifier for the memo copy operation.</param>
            <param name="userId">The user identifier performing the copy operation.</param>
            <param name="newModuleId">The new module identifier for the copied memos.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>The result of the copy operation.</returns>
            <remarks>
            This method executes the [dbo].[core_memo_sp_copy_memos2_to_memos] stored procedure to copy memo records from the memos2 table back to the main memos table with updated module assignment.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_memo_sp_copy_memos2_to_memos2Async(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Copies memo records within the memos2 table.
            </summary>
            <param name="originalRefId">The original reference identifier for the memo copy operation.</param>
            <param name="newRefId">The new reference identifier for the copied memo.</param>
            <param name="moduleId">The module identifier for the memo copy operation.</param>
            <param name="userId">The user identifier performing the copy operation.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>The result of the copy operation.</returns>
            <remarks>
            This method executes the [dbo].[core_memo_sp_copy_memos2_to_memos2] stored procedure to copy memo records within the memos2 table with updated reference and module assignments.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_memo_sp_GetDataSourcesAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves all available data sources for memo operations.
            </summary>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list of data sources available for memo operations.</returns>
            <remarks>
            This method executes the [dbo].[core_memo_sp_GetDataSources] stored procedure to retrieve all data sources that can be used in memo operations.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_memo_sp_GetKeyValuesAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves key values for a specific key identifier.
            </summary>
            <param name="keyId">The identifier of the key to retrieve values for.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list of key values associated with the specified key identifier.</returns>
            <remarks>
            This method executes the [dbo].[core_memo_sp_GetKeyValues] stored procedure to retrieve all values associated with a specific memo key.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_memo_sp_GetMemoKeysAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves all available memo keys.
            </summary>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list of all available memo keys.</returns>
            <remarks>
            This method executes the [dbo].[core_memo_sp_GetMemoKeys] stored procedure to retrieve all memo keys that can be used in memo operations.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_memo_sp_GetUserGroupsByTemplateIdAsync(System.Nullable{System.Byte},System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves user groups associated with a specific memo template.
            </summary>
            <param name="templateId">The identifier of the memo template.</param>
            <param name="compo">The component identifier for filtering user groups.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list of user groups associated with the specified memo template.</returns>
            <remarks>
            This method executes the [dbo].[core_memo_sp_GetUserGroupsByTemplateId] stored procedure to retrieve user groups that have access to a specific memo template.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_memo_sp_SignMemoAsync(System.Nullable{System.Int32},System.Nullable{System.Byte},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Signs a memo with a specific template and user.
            </summary>
            <param name="refId">The reference identifier of the memo to sign.</param>
            <param name="templateId">The identifier of the template used for signing.</param>
            <param name="userId">The identifier of the user performing the signing.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list of results from the memo signing operation.</returns>
            <remarks>
            This method executes the [dbo].[core_memo_sp_SignMemo] stored procedure to sign a memo using a specific template and record the signing user.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_memo_sp_UpdateGroupsAsync(System.Nullable{System.Byte},System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Updates user groups for a specific memo template.
            </summary>
            <param name="templateId">The identifier of the memo template to update.</param>
            <param name="xmlDocument">The XML document containing the updated group information.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>The result of the update operation.</returns>
            <remarks>
            This method executes the [dbo].[core_memo_sp_UpdateGroups] stored procedure to update the user groups associated with a specific memo template using XML data.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_memo_sp_UpdateKeyValueAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Updates a key value in the memo system.
            </summary>
            <param name="keyId">The identifier of the key to update.</param>
            <param name="valueId">The identifier of the value to update.</param>
            <param name="newValueDescription">The new description for the value.</param>
            <param name="newValue">The new value content.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>The result of the update operation.</returns>
            <remarks>
            This method executes the [dbo].[core_memo_sp_UpdateKeyValue] stored procedure to update an existing key-value pair in the memo system with new description and value.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_messages_sp_DeleteMessageAsync(System.Nullable{System.Int16},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Deletes a message by its ID.
            </summary>
            <param name="messageId">The ID of the message to delete.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>The result of the delete operation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="messageId"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_messages_sp_DeleteMessage].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_messages_sp_GetAllMessagesAsync(System.String,System.Nullable{System.Boolean},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Gets all messages for a specific component and admin status.
            </summary>
            <param name="compo">The component to get messages for.</param>
            <param name="isAdmin">Whether to get admin messages.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of core_messages_sp_GetAllMessagesResult objects containing the messages.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="compo"/> or <paramref name="isAdmin"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_messages_sp_GetAllMessages].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_messages_sp_GetMessagesAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Gets messages for a specific user and group with popup option.
            </summary>
            <param name="userID">The ID of the user to get messages for.</param>
            <param name="groupID">The ID of the group to get messages for.</param>
            <param name="popup">Whether to get popup messages.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of core_messages_sp_GetMessagesResult objects containing the messages.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="userID"/>, <paramref name="groupID"/>, or <paramref name="popup"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_messages_sp_GetMessages].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_messages_sp_GetMessagesDetailsAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Gets details for a specific message.
            </summary>
            <param name="messageID">The ID of the message to get details for.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of core_messages_sp_GetMessagesDetailsResult objects containing the message details.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="messageID"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_messages_sp_GetMessagesDetails].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_messages_sp_GetMessagesGroupsAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int16},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Gets groups associated with a specific message.
            </summary>
            <param name="messageID">The ID of the message to get groups for.</param>
            <param name="compo">The component identifier.</param>
            <param name="groupId">The group ID to filter by.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of core_messages_sp_GetMessagesGroupsResult objects containing the message groups.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="messageID"/>, <paramref name="compo"/>, or <paramref name="groupId"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[core_messages_sp_GetMessagesGroups].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_permissions_sp_GetAllAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves all permissions from the system.
            </summary>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list of all permissions in the system.</returns>
            <remarks>
            This method executes the [dbo].[core_permissions_sp_GetAll] stored procedure to retrieve all permissions available in the system.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_permissions_sp_GetAllPendingRequestsAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves all pending permission requests for a specific user.
            </summary>
            <param name="userId">The identifier of the user to retrieve pending requests for.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list of pending permission requests for the specified user.</returns>
            <remarks>
            This method executes the [dbo].[core_permissions_sp_GetAllPendingRequests] stored procedure to retrieve all pending permission requests that require approval for the specified user.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_permissions_sp_GetByGroupAsync(System.Nullable{System.Int16},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves permissions for a specific user group.
            </summary>
            <param name="groupId">The identifier of the user group to retrieve permissions for.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list of permissions associated with the specified user group.</returns>
            <remarks>
            This method executes the [dbo].[core_permissions_sp_GetByGroup] stored procedure to retrieve all permissions assigned to a specific user group.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_permissions_sp_GetByUserIdAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves permissions for a specific user by their identifier.
            </summary>
            <param name="userId">The identifier of the user to retrieve permissions for.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list of permissions assigned to the specified user.</returns>
            <remarks>
            This method executes the [dbo].[core_permissions_sp_GetByUserId] stored procedure to retrieve all permissions directly assigned to a specific user.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_permissions_sp_GetByUserNameAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves permissions for a specific user by their username.
            </summary>
            <param name="userName">The username of the user to retrieve permissions for.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list of permissions assigned to the specified user.</returns>
            <remarks>
            This method executes the [dbo].[core_permissions_sp_GetByUserName] stored procedure to retrieve all permissions assigned to a user by their username.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_permissions_sp_GetDocGroupIdByPermIdAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves the document group identifier associated with a specific permission.
            </summary>
            <param name="permId">The identifier of the permission to retrieve the document group for.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list containing the document group identifier associated with the permission.</returns>
            <remarks>
            This method executes the [dbo].[core_permissions_sp_GetDocGroupIdByPermId] stored procedure to retrieve the document group that is linked to a specific permission.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_permissions_sp_GetGroupPermissionsAsync(System.Nullable{System.Int16},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves all group permissions for a specific user group.
            </summary>
            <param name="groupId">The identifier of the user group to retrieve permissions for.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list of all permissions associated with the specified user group.</returns>
            <remarks>
            This method executes the [dbo].[core_permissions_sp_GetGroupPermissions] stored procedure to retrieve all permissions that are assigned to a specific user group.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_permissions_sp_GetUserAssignableAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves all user-assignable permissions.
            </summary>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list of all permissions that can be assigned to users.</returns>
            <remarks>
            This method executes the [dbo].[core_permissions_sp_GetUserAssignable] stored procedure to retrieve all permissions that are available for assignment to users.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_permissions_sp_GetUserPermsAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves all permissions for a specific user.
            </summary>
            <param name="userId">The identifier of the user to retrieve permissions for.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list of all permissions assigned to the specified user.</returns>
            <remarks>
            This method executes the [dbo].[core_permissions_sp_GetUserPerms] stored procedure to retrieve all permissions that are assigned to a specific user, including both direct and group-based permissions.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_permissions_sp_GrantUserPermissionAsync(System.Nullable{System.Int32},System.Nullable{System.Int16},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Grants a specific permission to a user.
            </summary>
            <param name="userId">The identifier of the user to grant the permission to.</param>
            <param name="permId">The identifier of the permission to grant.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>The result of the permission grant operation.</returns>
            <remarks>
            This method executes the [dbo].[core_permissions_sp_GrantUserPermission] stored procedure to assign a specific permission directly to a user.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_permissions_sp_InsertAsync(System.String,System.String,System.Nullable{System.Boolean},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Inserts a new permission into the system.
            </summary>
            <param name="name">The name of the new permission.</param>
            <param name="description">The description of the new permission.</param>
            <param name="exclude">Whether the permission should be excluded from certain operations.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>The result of the permission insertion operation.</returns>
            <remarks>
            This method executes the [dbo].[core_permissions_sp_Insert] stored procedure to create a new permission in the system with the specified name, description, and exclusion status.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_permissions_sp_InsertDocGroupAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Inserts a document group association for a permission.
            </summary>
            <param name="permId">The identifier of the permission to associate with the document group.</param>
            <param name="docGroupId">The identifier of the document group to associate with the permission.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>The result of the document group insertion operation.</returns>
            <remarks>
            This method executes the [dbo].[core_permissions_sp_InsertDocGroup] stored procedure to create an association between a permission and a document group.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_permissions_sp_insertRequestAsync(System.Nullable{System.Int32},System.Nullable{System.Int16},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Inserts a permission request for a user.
            </summary>
            <param name="userId">The identifier of the user requesting the permission.</param>
            <param name="permId">The identifier of the permission being requested.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>The result of the permission request insertion operation.</returns>
            <remarks>
            This method executes the [dbo].[core_permissions_sp_insertRequest] stored procedure to create a permission request that requires approval from an administrator.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_permissions_sp_searchUsersAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Searches for users associated with a specific permission.
            </summary>
            <param name="permissionId">The identifier of the permission to search users for.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>A list of users who have the specified permission.</returns>
            <remarks>
            This method executes the [dbo].[core_permissions_sp_searchUsers] stored procedure to find all users who are assigned a specific permission.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_permissions_sp_UpdateAsync(System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Boolean},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Updates an existing permission in the system.
            </summary>
            <param name="permId">The identifier of the permission to update.</param>
            <param name="name">The new name for the permission.</param>
            <param name="description">The new description for the permission.</param>
            <param name="exclude">The new exclusion status for the permission.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>The result of the permission update operation.</returns>
            <remarks>
            This method executes the [dbo].[core_permissions_sp_Update] stored procedure to modify an existing permission with new name, description, and exclusion status.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_permissions_sp_UpdateDocGroupAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Updates the document group association for a permission.
            </summary>
            <param name="oldPermId">The old permission identifier.</param>
            <param name="oldDocGroupId">The old document group identifier.</param>
            <param name="newPermId">The new permission identifier.</param>
            <param name="newDocGroupId">The new document group identifier.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>The result of the document group update operation.</returns>
            <remarks>
            This method executes the [dbo].[core_permissions_sp_UpdateDocGroup] stored procedure to update the association between a permission and a document group by replacing the old association with a new one.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_permissions_sp_updatePermissionRequestsAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Updates permission requests using XML data.
            </summary>
            <param name="xmlDocument">The XML document containing the permission request updates.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>The result of the permission request update operation.</returns>
            <remarks>
            This method executes the [dbo].[core_permissions_sp_updatePermissionRequests] stored procedure to update multiple permission requests using XML data for bulk operations.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_permissions_sp_UpdateUserPermissionsAsync(System.Nullable{System.Int16},System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Updates user permissions using XML data.
            </summary>
            <param name="userId">The identifier of the user whose permissions are being updated.</param>
            <param name="xmlDocument">The XML document containing the permission updates.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>The result of the user permission update operation.</returns>
            <remarks>
            This method executes the [dbo].[core_permissions_sp_UpdateUserPermissions] stored procedure to update all permissions for a specific user using XML data for bulk operations.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_permissions_sp_UserHasPermissionAsync(System.Nullable{System.Int32},System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Nullable{System.Boolean}},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Checks if a user has a specific permission.
            </summary>
            <param name="userId">The identifier of the user to check permissions for.</param>
            <param name="permName">The name of the permission to check.</param>
            <param name="hasPerm">Output parameter that returns whether the user has the permission.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
            <returns>The result of the permission check operation.</returns>
            <remarks>
            This method executes the [dbo].[core_permissions_sp_UserHasPermission] stored procedure to verify if a user has been granted a specific permission by name.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_SignatureMetaData_sp_GetByUserGroupAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves signature metadata by user group for a specific reference, workflow, and group.
            </summary>
            <param name="refId">The reference identifier for the signature metadata.</param>
            <param name="workflowId">The workflow identifier.</param>
            <param name="groupId">The group identifier.</param>
            <param name="returnValue">Output parameter for the stored procedure return value.</param>
            <param name="cancellationToken">Cancellation token for async operation.</param>
            <returns>A list of core_SignatureMetaData_sp_GetByUserGroupResult objects.</returns>
            <remarks>Executes [dbo].[core_SignatureMetaData_sp_GetByUserGroup] stored procedure.</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_SignatureMetaData_sp_GetByWorkStatusAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves signature metadata by work status for a specific reference, workflow, and work status.
            </summary>
            <param name="refId">The reference identifier for the signature metadata.</param>
            <param name="workflowId">The workflow identifier.</param>
            <param name="workStatus">The work status identifier.</param>
            <param name="returnValue">Output parameter for the stored procedure return value.</param>
            <param name="cancellationToken">Cancellation token for async operation.</param>
            <returns>A list of core_SignatureMetaData_sp_GetByWorkStatusResult objects.</returns>
            <remarks>Executes [dbo].[core_SignatureMetaData_sp_GetByWorkStatus] stored procedure.</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_sp_GetIRILOAssociableSpecialCasesAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves IRILO associable special cases for a given member SSN.
            </summary>
            <param name="member_ssn">The member's SSN identifier.</param>
            <param name="returnValue">Output parameter for the stored procedure return value.</param>
            <param name="cancellationToken">Cancellation token for async operation.</param>
            <returns>A list of core_sp_GetIRILOAssociableSpecialCasesResult objects.</returns>
            <remarks>Executes [dbo].[core_sp_GetIRILOAssociableSpecialCases] stored procedure.</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_sp_GetRWAssociableSpecialCasesForPSCDAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves RW associable special cases for PSCD based on member SSN.
            </summary>
            <param name="member_ssn">The member's SSN identifier (12 characters).</param>
            <param name="returnValue">Output parameter for the stored procedure return value.</param>
            <param name="cancellationToken">Cancellation token for async operation.</param>
            <returns>A list of core_sp_GetRWAssociableSpecialCasesForPSCDResult objects.</returns>
            <remarks>Executes [dbo].[core_sp_GetRWAssociableSpecialCasesForPSCD] stored procedure.</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_tracking_sp_GetByReferenceIdAsync(System.Nullable{System.Byte},System.Nullable{System.Int32},System.Nullable{System.Boolean},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves tracking information by reference ID with optional filtering.
            </summary>
            <param name="moduleId">The module identifier (tinyint).</param>
            <param name="referenceId">The reference identifier.</param>
            <param name="showAll">Flag to show all tracking records or filter by current user.</param>
            <param name="returnValue">Output parameter for the stored procedure return value.</param>
            <param name="cancellationToken">Cancellation token for async operation.</param>
            <returns>A list of core_tracking_sp_GetByReferenceIdResult objects.</returns>
            <remarks>Executes [dbo].[core_tracking_sp_GetByReferenceId] stored procedure.</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_tracking_sp_GetByUserIdAsync(System.Nullable{System.Int32},System.Nullable{System.Boolean},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves tracking information by user ID with optional filtering.
            </summary>
            <param name="userId">The user identifier.</param>
            <param name="showAll">Flag to show all tracking records or filter by current user.</param>
            <param name="returnValue">Output parameter for the stored procedure return value.</param>
            <param name="cancellationToken">Cancellation token for async operation.</param>
            <returns>A list of core_tracking_sp_GetByUserIdResult objects.</returns>
            <remarks>Executes [dbo].[core_tracking_sp_GetByUserId] stored procedure.</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_user_sp_Belongs_To_AttachAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Checks if a user belongs to an attach unit.
            </summary>
            <param name="userId">The user identifier.</param>
            <param name="attachUnit">The attach unit identifier.</param>
            <param name="returnValue">Output parameter for the stored procedure return value.</param>
            <param name="cancellationToken">Cancellation token for async operation.</param>
            <returns>A list of core_user_sp_Belongs_To_AttachResult objects.</returns>
            <remarks>Executes [dbo].[core_user_sp_Belongs_To_Attach] stored procedure.</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_user_sp_SearchMamberDataAsync(System.String,System.String,System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Searches member data by SSN, name, and unit.
            </summary>
            <param name="ssn">Member SSN (partial match supported).</param>
            <param name="name">Member name (partial match supported).</param>
            <param name="srchUnit">Unit ID to search within.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of core_user_sp_SearchMamberDataResult objects containing member information.</returns>
            <remarks>This method executes the stored procedure [dbo].[core_user_sp_SearchMamberData].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_user_sp_SearchMamberData_TestAsync(System.String,System.String,System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Searches member data by SSN, name, and unit (test version).
            </summary>
            <param name="ssn">Member SSN (partial match supported).</param>
            <param name="name">Member name (partial match supported).</param>
            <param name="srchUnit">Unit ID to search within.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of core_user_sp_SearchMamberData_TestResult objects containing member information.</returns>
            <remarks>This method executes the stored procedure [dbo].[core_user_sp_SearchMamberData_Test].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_witness_UpdateAsync(System.Nullable{System.Int32},System.String,System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Updates witness information for a given witness ID.
            </summary>
            <param name="id">The witness identifier.</param>
            <param name="name">The witness name (50 characters max).</param>
            <param name="address">The witness address (50 characters max).</param>
            <param name="returnValue">Output parameter for the stored procedure return value.</param>
            <param name="cancellationToken">Cancellation token for async operation.</param>
            <returns>The number of affected rows.</returns>
            <remarks>Executes [dbo].[core_witness_Update] stored procedure.</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.cmdStruct_sp_GetAllSubUnitsForUnitAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves all sub-units for a specified unit based on the report view.
            </summary>
            <param name="unitId">The ID of the unit.</param>
            <param name="rptView">The report view type.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of sub-units for the specified unit.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="unitId"/> or <paramref name="rptView"/> is null.</exception>
            <remarks>This method executes the stored procedure [dbo].[cmdStruct_sp_GetAllSubUnitsForUnit].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.cmdStruct_sp_GetImmediateChildrenForUnitAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves the immediate children for a specified unit based on the report view.
            </summary>
            <param name="unitId">The ID of the unit.</param>
            <param name="rptView">The report view type.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of immediate children for the specified unit.</returns>
            <remarks>This method executes the stored procedure [dbo].[cmdStruct_sp_GetImmediateChildrenForUnit].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.cmdStruct_sp_GetNumberedAirForcesForPHAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves the numbered air forces for PH.
            </summary>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of numbered air forces for PH.</returns>
            <remarks>This method executes the stored procedure [dbo].[cmdStruct_sp_GetNumberedAirForcesForPH].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.cmdStruct_sp_GetUnitIdAsync(System.String,System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves the unit ID based on the unit name and PAS code.
            </summary>
            <param name="unitName">The name of the unit.</param>
            <param name="pasCode">The PAS code of the unit.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list containing the unit ID information.</returns>
            <remarks>This method executes the stored procedure [dbo].[cmdStruct_sp_GetUnitId].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.cmdStruct_sp_GetUnitPasCodeAsync(System.Nullable{System.Int32},System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves the PAS code for a unit based on the unit ID or unit name.
            </summary>
            <param name="unitId">The ID of the unit.</param>
            <param name="unitName">The name of the unit.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list containing the PAS code information.</returns>
            <remarks>This method executes the stored procedure [dbo].[cmdStruct_sp_GetUnitPasCode].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.cmdStruct_sp_RebuildAllTreesAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Rebuilds all trees in the command structure.
            </summary>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of results from rebuilding all trees.</returns>
            <remarks>This method executes the stored procedure [dbo].[cmdStruct_sp_RebuildAllTrees].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.cmdStruct_sp_RebuildAllTrees_SingleAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Rebuilds all trees for a single command structure ID.
            </summary>
            <param name="cs_id">The command structure ID.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of results from rebuilding all trees for the single ID.</returns>
            <remarks>This method executes the stored procedure [dbo].[cmdStruct_sp_RebuildAllTrees_Single].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.cmdStruct_sp_RebuildTreeAsync(System.Nullable{System.Byte},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Rebuilds the tree for a specified view type.
            </summary>
            <param name="viewType">The view type for which to rebuild the tree.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of results from rebuilding the tree.</returns>
            <remarks>This method executes the stored procedure [dbo].[cmdStruct_sp_RebuildTree].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.cmdStruct_sp_RebuildTree_SingleAsync(System.Nullable{System.Int32},System.Nullable{System.Byte},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Rebuilds the tree for a single command structure ID and view type.
            </summary>
            <param name="cs_id">The command structure ID for which to rebuild the tree.</param>
            <param name="viewType">The view type for which to rebuild the tree.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of results from rebuilding the tree for the single command structure.</returns>
            <remarks>This method executes the stored procedure [dbo].[cmdStruct_sp_RebuildTree_Single].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.cmdStruct_sp_UpdateAffectedAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Updates affected items for a command structure and user.
            </summary>
            <param name="cs_id">The command structure ID.</param>
            <param name="userId">The user ID.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of results from updating affected items.</returns>
            <remarks>This method executes the stored procedure [dbo].[cmdStruct_sp_UpdateAffected].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.cmdStructChain_sp_GetChaninByPascodeAsync(System.String,System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves command structure chain by user PAS code.
            </summary>
            <param name="userPasCode">The user PAS code.</param>
            <param name="viewType">The view type.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of command structure chain results by PAS code.</returns>
            <remarks>This method executes the stored procedure [dbo].[cmdStructChain_sp_GetChaninByPascode].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.cmdStructChain_sp_GetChaninByUnitAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves command structure chain by unit ID.
            </summary>
            <param name="cs_id">The command structure ID.</param>
            <param name="viewType">The view type.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of command structure chain results by unit.</returns>
            <remarks>This method executes the stored procedure [dbo].[cmdStructChain_sp_GetChaninByUnit].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.cmdStructChain_sp_GetChaninByUserIdAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves command structure chain by user ID.
            </summary>
            <param name="userId">The user ID.</param>
            <param name="viewType">The view type.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of command structure chain results by user ID.</returns>
            <remarks>This method executes the stored procedure [dbo].[cmdStructChain_sp_GetChaninByUserId].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.ApplicationWarmupProcess_sp_DeleteLogByIdAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Deletes a log entry by its ID from the Application Warmup Process logs.
            </summary>
            <param name="logId">The ID of the log entry to delete.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>The number of affected rows.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="logId"/> is null.</exception>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.ApplicationWarmupProcess_sp_FindProcessLastExecutionDateAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Finds the last execution date for a specified process in the Application Warmup Process.
            </summary>
            <param name="processName">The name of the process to query.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of results containing the last execution date information.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="processName"/> is null.</exception>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.ApplicationWarmupProcess_sp_GetAllLogsAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves all logs from the Application Warmup Process.
            </summary>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of all log entries.</returns>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.ApplicationWarmupProcess_sp_InsertLogAsync(System.String,System.Nullable{System.DateTime},System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Inserts a new log entry into the Application Warmup Process logs.
            </summary>
            <param name="processName">The name of the process.</param>
            <param name="executionDate">The date and time of execution.</param>
            <param name="message">The log message.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>The number of affected rows.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="processName"/>, <paramref name="executionDate"/>, or <paramref name="message"/> is null.</exception>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.ApplicationWarmupProcess_sp_IsProcessActiveAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Checks if a specified process is active in the Application Warmup Process.
            </summary>
            <param name="processName">The name of the process to check.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of results indicating if the process is active.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="processName"/> is null.</exception>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.#ctor(AF.ECT.Server.Models.ALODContext)">
            <summary>
            Initializes a new instance of the <see cref="T:AF.ECT.Server.Models.ALODContextProcedures"/> class.
            </summary>
            <param name="context">The database context instance.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="context"/> is null.</exception>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_actions_sp_DeleteOptionActionAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Deletes an option action by its ID.
            </summary>
            <param name="wsaid">The ID of the option action to delete.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>The number of affected rows.</returns>
            <remarks>This method executes the stored procedure [dbo].[core_actions_sp_DeleteOptionAction].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.PH_Field_sp_GetAllAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves all PH field records from the database.
            </summary>
            <param name="returnValue">Output parameter that returns the stored procedure execution status.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation.</param>
            <returns>A list of PH_Field_sp_GetAllResult objects containing all field records.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation is cancelled via the cancellation token.</exception>
            <remarks>
            Executes the stored procedure [dbo].[PH_Field_sp_GetAll] to retrieve all field records.
            The return value indicates the success or failure of the operation.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.PH_Field_sp_GetByIdAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves a specific PH field record by its ID.
            </summary>
            <param name="id">The unique identifier of the field record to retrieve.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution status.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation.</param>
            <returns>A list of PH_Field_sp_GetByIdResult objects containing the specified field record.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation is cancelled via the cancellation token.</exception>
            <remarks>
            Executes the stored procedure [dbo].[PH_Field_sp_GetById] with the specified ID parameter.
            Returns an empty list if no record is found with the given ID.
            The return value indicates the success or failure of the operation.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.PH_Field_sp_InsertAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Inserts a new PH field record into the database.
            </summary>
            <param name="name">The name of the field to insert (maximum 200 characters).</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution status.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation.</param>
            <returns>The number of rows affected by the insert operation.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation is cancelled via the cancellation token.</exception>
            <remarks>
            Executes the stored procedure [dbo].[PH_Field_sp_Insert] to create a new field record.
            The name parameter is required and must not exceed 200 characters.
            The return value indicates the success or failure of the operation.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.PH_Field_sp_UpdateAsync(System.Nullable{System.Int32},System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Updates an existing PH field record in the database.
            </summary>
            <param name="id">The unique identifier of the field record to update.</param>
            <param name="name">The new name for the field (maximum 200 characters).</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution status.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation.</param>
            <returns>The number of rows affected by the update operation.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation is cancelled via the cancellation token.</exception>
            <remarks>
            Executes the stored procedure [dbo].[PH_Field_sp_Update] to modify an existing field record.
            Both id and name parameters are required. The name must not exceed 200 characters.
            The return value indicates the success or failure of the operation.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.PH_FieldType_sp_GetAllAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves all PH field type records from the database.
            </summary>
            <param name="returnValue">Output parameter that returns the stored procedure execution status.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation.</param>
            <returns>A list of PH_FieldType_sp_GetAllResult objects containing all field type records.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation is cancelled via the cancellation token.</exception>
            <remarks>
            Executes the stored procedure [dbo].[PH_FieldType_sp_GetAll] to retrieve all field type records.
            The return value indicates the success or failure of the operation.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.PH_FieldType_sp_GetByIdAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves a specific PH field type record by its ID.
            </summary>
            <param name="id">The unique identifier of the field type record to retrieve.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution status.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation.</param>
            <returns>A list of PH_FieldType_sp_GetByIdResult objects containing the specified field type record.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation is cancelled via the cancellation token.</exception>
            <remarks>
            Executes the stored procedure [dbo].[PH_FieldType_sp_GetById] with the specified ID parameter.
            Returns an empty list if no record is found with the given ID.
            The return value indicates the success or failure of the operation.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.PH_FieldType_sp_InsertAsync(System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Inserts a new PH field type record into the database.
            </summary>
            <param name="name">The name of the field type (maximum 200 characters).</param>
            <param name="dataTypeId">The ID of the associated data type.</param>
            <param name="datasource">The datasource configuration for the field type (maximum 200 characters).</param>
            <param name="placeholder">The placeholder text for the field type (maximum 50 characters).</param>
            <param name="color">The color configuration for the field type (maximum 100 characters).</param>
            <param name="length">The maximum length constraint for the field type.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution status.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation.</param>
            <returns>The number of rows affected by the insert operation.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation is cancelled via the cancellation token.</exception>
            <remarks>
            Executes the stored procedure [dbo].[PH_FieldType_sp_Insert] to create a new field type record.
            The name parameter is required and must not exceed 200 characters.
            Other parameters are optional but provide additional configuration for the field type.
            The return value indicates the success or failure of the operation.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.PH_FieldType_sp_UpdateAsync(System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Updates an existing PH field type record in the database.
            </summary>
            <param name="id">The unique identifier of the field type record to update.</param>
            <param name="name">The new name for the field type (maximum 200 characters).</param>
            <param name="dataTypeId">The new data type ID for the field type.</param>
            <param name="datasource">The new datasource configuration (maximum 200 characters).</param>
            <param name="placeholder">The new placeholder text (maximum 50 characters).</param>
            <param name="color">The new color configuration (maximum 100 characters).</param>
            <param name="length">The new maximum length constraint.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution status.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation.</param>
            <returns>The number of rows affected by the update operation.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation is cancelled via the cancellation token.</exception>
            <remarks>
            Executes the stored procedure [dbo].[PH_FieldType_sp_Update] to modify an existing field type record.
            The id parameter is required to identify the record to update.
            All other parameters are optional and will update their respective fields if provided.
            The return value indicates the success or failure of the operation.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.PH_FormField_sp_DeleteAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Deletes a PH form field record from the database.
            </summary>
            <param name="sectionId">The ID of the section containing the field.</param>
            <param name="fieldId">The ID of the field to delete.</param>
            <param name="fieldTypeId">The ID of the field type to delete.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution status.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation.</param>
            <returns>The number of rows affected by the delete operation.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation is cancelled via the cancellation token.</exception>
            <remarks>
            Executes the stored procedure [dbo].[PH_FormField_sp_Delete] to remove a form field record.
            All three ID parameters (sectionId, fieldId, fieldTypeId) are required to uniquely identify the record to delete.
            The return value indicates the success or failure of the operation.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.PH_FormField_sp_GetAllAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves all PH form field records from the database.
            </summary>
            <param name="returnValue">Output parameter that returns the stored procedure execution status.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation.</param>
            <returns>A list of PH_FormField_sp_GetAllResult objects containing all form field records.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation is cancelled via the cancellation token.</exception>
            <remarks>
            Executes the stored procedure [dbo].[PH_FormField_sp_GetAll] to retrieve all form field records.
            This method returns comprehensive information about all form fields across all sections.
            The return value indicates the success or failure of the operation.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.PH_FormField_sp_GetByIdsAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves specific PH form field records by section, field, and field type IDs.
            </summary>
            <param name="sectionId">The ID of the section to filter by.</param>
            <param name="fieldId">The ID of the field to filter by.</param>
            <param name="fieldTypeId">The ID of the field type to filter by.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution status.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation.</param>
            <returns>A list of PH_FormField_sp_GetByIdsResult objects matching the specified criteria.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation is cancelled via the cancellation token.</exception>
            <remarks>
            Executes the stored procedure [dbo].[PH_FormField_sp_GetByIds] with the specified filter parameters.
            Use this method to retrieve form field records that match specific section, field, and field type combinations.
            Returns an empty list if no records match the specified criteria.
            The return value indicates the success or failure of the operation.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.PH_FormField_sp_GetFieldTypesAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves field types associated with a specific section and field combination.
            </summary>
            <param name="sectionId">The ID of the section to query.</param>
            <param name="fieldId">The ID of the field to query.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution status.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation.</param>
            <returns>A list of PH_FormField_sp_GetFieldTypesResult objects containing field type information.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation is cancelled via the cancellation token.</exception>
            <remarks>
            Executes the stored procedure [dbo].[PH_FormField_sp_GetFieldTypes] to retrieve field types for a specific section and field.
            This method is useful for understanding what field types are available for a particular field within a section.
            Returns an empty list if no field types are found for the specified section and field combination.
            The return value indicates the success or failure of the operation.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.PH_FormField_sp_InsertAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Inserts a new PH form field record into the database.
            </summary>
            <param name="sectionId">The ID of the section where the field will be added.</param>
            <param name="fieldId">The ID of the field to be added.</param>
            <param name="fieldTypeId">The ID of the field type for the field.</param>
            <param name="fieldDisplayOrder">The display order for the field within the section.</param>
            <param name="fieldTypeDisplayOrder">The display order for the field type within the field.</param>
            <param name="toolTip">The tooltip text for the field (maximum 200 characters).</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution status.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation.</param>
            <returns>The number of rows affected by the insert operation.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation is cancelled via the cancellation token.</exception>
            <remarks>
            Executes the stored procedure [dbo].[PH_FormField_sp_Insert] to create a new form field record.
            The sectionId, fieldId, and fieldTypeId parameters are required to establish the relationship.
            Display order parameters control the visual arrangement of fields and field types.
            The tooltip parameter provides additional help text for users (limited to 200 characters).
            The return value indicates the success or failure of the operation.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.PH_FormField_sp_UpdateAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Updates an existing PH form field record in the database.
            </summary>
            <param name="oldSectionId">The current section ID of the record to update.</param>
            <param name="oldFieldId">The current field ID of the record to update.</param>
            <param name="oldFieldTypeId">The current field type ID of the record to update.</param>
            <param name="newSectionId">The new section ID for the record.</param>
            <param name="newFieldId">The new field ID for the record.</param>
            <param name="newFieldTypeId">The new field type ID for the record.</param>
            <param name="oldFieldDisplayOrder">The current field display order.</param>
            <param name="oldFieldTypeDisplayOrder">The current field type display order.</param>
            <param name="newFieldDisplayOrder">The new field display order.</param>
            <param name="newFieldTypeDisplayOrder">The new field type display order.</param>
            <param name="oldToolTip">The current tooltip text.</param>
            <param name="newToolTip">The new tooltip text (maximum 200 characters).</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution status.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation.</param>
            <returns>The number of rows affected by the update operation.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation is cancelled via the cancellation token.</exception>
            <remarks>
            Executes the stored procedure [dbo].[PH_FormField_sp_Update] to modify an existing form field record.
            The old parameters identify the existing record, while the new parameters specify the updated values.
            This method allows comprehensive updates to all aspects of a form field including its relationships and display properties.
            The tooltip parameter is limited to 200 characters.
            The return value indicates the success or failure of the operation.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.PH_FormField_sp_UpdateFieldDisplayOrdersAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Byte},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Updates the display order of fields within a section.
            </summary>
            <param name="sectionId">The ID of the section containing the fields.</param>
            <param name="fieldId">The ID of the field whose display order is being updated.</param>
            <param name="oldOrder">The current display order value.</param>
            <param name="newOrder">The new display order value.</param>
            <param name="filter">Filter parameter to control the scope of the update operation.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution status.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation.</param>
            <returns>The number of rows affected by the update operation.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation is cancelled via the cancellation token.</exception>
            <remarks>
            Executes the stored procedure [dbo].[PH_FormField_sp_UpdateFieldDisplayOrders] to reorder fields within a section.
            This method is used to change the visual arrangement of fields by updating their display order values.
            The filter parameter can be used to limit the scope of the reordering operation.
            The return value indicates the success or failure of the operation.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.PH_FormField_sp_UpdateFieldTypeDisplayOrdersAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Byte},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Updates the display order of field types within a specific field and section.
            </summary>
            <param name="sectionId">The ID of the section containing the field.</param>
            <param name="fieldId">The ID of the field containing the field types.</param>
            <param name="fieldTypeId">The ID of the field type whose display order is being updated.</param>
            <param name="oldOrder">The current display order value of the field type.</param>
            <param name="newOrder">The new display order value for the field type.</param>
            <param name="filter">Filter parameter to control the scope of the update operation.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution status.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation.</param>
            <returns>The number of rows affected by the update operation.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation is cancelled via the cancellation token.</exception>
            <remarks>
            Executes the stored procedure [dbo].[PH_FormField_sp_UpdateFieldTypeDisplayOrders] to reorder field types within a field.
            This method allows fine-grained control over the display order of different field types associated with a specific field.
            The filter parameter can be used to limit the scope of the reordering operation.
            The return value indicates the success or failure of the operation.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.PH_FormValue_sp_DeleteAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Deletes PH form value records from the database based on reference, section, field, and field type IDs.
            </summary>
            <param name="refId">The reference ID associated with the form values to delete.</param>
            <param name="sectionId">The section ID of the form values to delete.</param>
            <param name="fieldId">The field ID of the form values to delete.</param>
            <param name="fieldTypeId">The field type ID of the form values to delete.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution status.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation.</param>
            <returns>A list of PH_FormValue_sp_DeleteResult objects containing information about deleted records.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation is cancelled via the cancellation token.</exception>
            <remarks>
            Executes the stored procedure [dbo].[PH_FormValue_sp_Delete] to remove form value records.
            All four ID parameters (refId, sectionId, fieldId, fieldTypeId) are used to identify the specific records to delete.
            This method returns information about the records that were deleted.
            The return value indicates the success or failure of the operation.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.PH_FormValue_sp_GetByRefIdAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves PH form value records by reference ID.
            </summary>
            <param name="refId">The reference ID to filter form values by.</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution status.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation.</param>
            <returns>A list of PH_FormValue_sp_GetByRefIdResult objects containing form values for the specified reference.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation is cancelled via the cancellation token.</exception>
            <remarks>
            Executes the stored procedure [dbo].[PH_FormValue_sp_GetByRefId] to retrieve all form values associated with a specific reference ID.
            This method is useful for retrieving all the form data entered for a particular reference or case.
            Returns an empty list if no form values are found for the specified reference ID.
            The return value indicates the success or failure of the operation.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.PH_FormValue_sp_InsertAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Inserts a new PH form value record into the database.
            </summary>
            <param name="refId">The reference ID to associate with the form value.</param>
            <param name="sectionId">The section ID where the form value belongs.</param>
            <param name="fieldId">The field ID for which the value is being entered.</param>
            <param name="fieldTypeId">The field type ID defining the data type of the value.</param>
            <param name="value">The actual value to store (maximum 1000 characters).</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution status.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation.</param>
            <returns>A list of PH_FormValue_sp_InsertResult objects containing information about the inserted record.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation is cancelled via the cancellation token.</exception>
            <remarks>
            Executes the stored procedure [dbo].[PH_FormValue_sp_Insert] to create a new form value record.
            All parameters except returnValue and cancellationToken are required to establish the complete relationship and store the value.
            The value parameter is limited to 1000 characters to accommodate various data types and content.
            This method returns information about the record that was inserted.
            The return value indicates the success or failure of the operation.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.PH_FormValue_sp_UpdateAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Updates an existing PH form value record in the database.
            </summary>
            <param name="refId">The reference ID of the form value to update.</param>
            <param name="sectionId">The section ID of the form value to update.</param>
            <param name="fieldId">The field ID of the form value to update.</param>
            <param name="fieldTypeId">The field type ID of the form value to update.</param>
            <param name="newValue">The new value to store (maximum 1000 characters).</param>
            <param name="returnValue">Output parameter that returns the stored procedure execution status.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation.</param>
            <returns>A list of PH_FormValue_sp_UpdateResult objects containing information about the updated record.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation is cancelled via the cancellation token.</exception>
            <remarks>
            Executes the stored procedure [dbo].[PH_FormValue_sp_Update] to modify an existing form value record.
            The first four parameters (refId, sectionId, fieldId, fieldTypeId) identify the existing record to update.
            The newValue parameter specifies the updated content, limited to 1000 characters.
            This method returns information about the record that was updated.
            The return value indicates the success or failure of the operation.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.workflow_sp_GetCurrentUsersAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Gets current users for a workflow reference.
            </summary>
            <param name="refId">The reference ID (LOD ID).</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of workflow_sp_GetCurrentUsersResult objects containing user information.</returns>
            <remarks>This method executes the stored procedure [dbo].[workflow_sp_GetCurrentUsers].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.workflow_sp_GetCurrentUsers_ForRRAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Gets current users for a Request for Reconsideration workflow reference.
            </summary>
            <param name="refId">The reference ID (RR request ID).</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of workflow_sp_GetCurrentUsers_ForRRResult objects containing user information.</returns>
            <remarks>This method executes the stored procedure [dbo].[workflow_sp_GetCurrentUsers_ForRR].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.workflow_sp_GetCurrentUsers_ForSCAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Gets current users for a Special Case workflow reference.
            </summary>
            <param name="refId">The reference ID (SC ID).</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of workflow_sp_GetCurrentUsers_ForSCResult objects containing user information.</returns>
            <remarks>This method executes the stored procedure [dbo].[workflow_sp_GetCurrentUsers_ForSC].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_workflow_sp_GetWorkflowByIdAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_workflow_sp_GetWorkflowById stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_workflow_sp_GetWorkflowsByRefIdAsync(System.Nullable{System.Int32},System.Nullable{System.Byte},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_workflow_sp_GetWorkflowsByRefId stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_workflow_sp_GetWorkflowsByRefIdAndTypeAsync(System.Nullable{System.Int32},System.Nullable{System.Byte},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_workflow_sp_GetWorkflowsByRefIdAndType stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_workflow_sp_GetWorkflowTypesAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_workflow_sp_GetWorkflowTypes stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_workflow_sp_InsertWorkflowAsync(System.Nullable{System.Int32},System.Nullable{System.Byte},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_workflow_sp_InsertWorkflow stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_workflow_sp_UpdateWorkflowAsync(System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_workflow_sp_UpdateWorkflow stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.workflow_sp_GetWorkflowByIdAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the workflow_sp_GetWorkflowById stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.workflow_sp_GetWorkflowsByRefIdAsync(System.Nullable{System.Int32},System.Nullable{System.Byte},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the workflow_sp_GetWorkflowsByRefId stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.workflow_sp_GetWorkflowsByRefIdAndTypeAsync(System.Nullable{System.Int32},System.Nullable{System.Byte},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the workflow_sp_GetWorkflowsByRefIdAndType stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.workflow_sp_GetWorkflowTypesAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the workflow_sp_GetWorkflowTypes stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.workflow_sp_InsertWorkflowAsync(System.Nullable{System.Int32},System.Nullable{System.Byte},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the workflow_sp_InsertWorkflow stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.workflow_sp_UpdateWorkflowAsync(System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the workflow_sp_UpdateWorkflow stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.workstatus_sp_GetWorkstatusByIdAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the workstatus_sp_GetWorkstatusById stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.workstatus_sp_GetWorkstatusesByRefIdAsync(System.Nullable{System.Int32},System.Nullable{System.Byte},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the workstatus_sp_GetWorkstatusesByRefId stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.workstatus_sp_GetWorkstatusesByRefIdAndTypeAsync(System.Nullable{System.Int32},System.Nullable{System.Byte},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the workstatus_sp_GetWorkstatusesByRefIdAndType stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.workstatus_sp_GetWorkstatusTypesAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the workstatus_sp_GetWorkstatusTypes stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.workstatus_sp_InsertWorkstatusAsync(System.Nullable{System.Int32},System.Nullable{System.Byte},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the workstatus_sp_InsertWorkstatus stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.workstatus_sp_UpdateWorkstatusAsync(System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the workstatus_sp_UpdateWorkstatus stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lod_sp_GetSpecialCasesAsync(System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves special cases.
            </summary>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of special cases results.</returns>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_CaseDialogueComments_UpdateCommentAsync(System.Nullable{System.Int32},System.String,System.Nullable{System.DateTime},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_CaseDialogueComments_UpdateComment stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_email_sp_InsertAsync(System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_email_sp_Insert stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookups_sp_GetMemberComponentsByWorkflowAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lookups_sp_GetMemberComponentsByWorkflow stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookUps_sp_GetPEPPDispositionsAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lookUps_sp_GetPEPPDispositions stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookUps_sp_GetPEPPRatingsAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lookUps_sp_GetPEPPRatings stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookUps_sp_GetPEPPTypesAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lookUps_sp_GetPEPPTypes stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookups_sp_Insert_MAJCOMAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lookups_sp_Insert_MAJCOM stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookups_sp_Insert_PEPPDispositionAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lookups_sp_Insert_PEPPDisposition stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookups_sp_Insert_PEPPRatingAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lookups_sp_Insert_PEPPRating stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookups_sp_Insert_PEPPTypeAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lookups_sp_Insert_PEPPType stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookups_sp_Insert_RMUAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lookups_sp_Insert_RMU stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookUps_sp_InsertCategoryAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lookUps_sp_InsertCategory stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookUps_sp_InsertComponentAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lookUps_sp_InsertComponent stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookUps_sp_InsertDutyStatusAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lookUps_sp_InsertDutyStatus stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookUps_sp_InsertFacilityAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lookUps_sp_InsertFacility stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookUps_sp_InsertFromLocationAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lookUps_sp_InsertFromLocation stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookUps_sp_InsertInfluenceAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lookUps_sp_InsertInfluence stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookUps_sp_InsertInfoSourceAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lookUps_sp_InsertInfoSource stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookUps_sp_InsertOccurrenceAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lookUps_sp_InsertOccurrence stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookUps_sp_InsertProximateAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lookUps_sp_InsertProximate stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_lookUps_sp_InsertStatusAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lookUps_sp_InsertStatus stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_messages_sp_GetAllAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_messages_sp_GetAll stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_messages_sp_GetByIdAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_messages_sp_GetById stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_messages_sp_GetByTypeAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_messages_sp_GetByType stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_messages_sp_InsertAsync(System.String,System.String,System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_messages_sp_Insert stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_messages_sp_UpdateAsync(System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_messages_sp_Update stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_pageTitles_sp_GetAllAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_pageTitles_sp_GetAll stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_pageTitles_sp_GetByIdAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_pageTitles_sp_GetById stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_pageTitles_sp_InsertAsync(System.String,System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_pageTitles_sp_Insert stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_pageTitles_sp_UpdateAsync(System.Nullable{System.Int32},System.String,System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_pageTitles_sp_Update stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_pascode_sp_GetAllAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_pascode_sp_GetAll stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_pascode_sp_GetByIdAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_pascode_sp_GetById stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_pascode_sp_InsertAsync(System.String,System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_pascode_sp_Insert stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_pascode_sp_UpdateAsync(System.Nullable{System.Int32},System.String,System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_pascode_sp_Update stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_Permission_GetByWorkflowAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_Permission_GetByWorkflow stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_permissions_sp_GetByIdAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_permissions_sp_GetById stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_permissions_sp_GetByWorkflowAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_permissions_sp_GetByWorkflow stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_permissions_sp_InsertAsync(System.String,System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_permissions_sp_Insert stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_permissions_sp_UpdateAsync(System.Nullable{System.Int32},System.String,System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_permissions_sp_Update stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_role_sp_GetAllAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_role_sp_GetAll stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_role_sp_GetByIdAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_role_sp_GetById stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_role_sp_GetByWorkflowAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_role_sp_GetByWorkflow stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_role_sp_InsertAsync(System.String,System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_role_sp_Insert stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_role_sp_UpdateAsync(System.Nullable{System.Int32},System.String,System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_role_sp_Update stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_rule_sp_GetAllAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_rule_sp_GetAll stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_rule_sp_GetByIdAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_rule_sp_GetById stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_rule_sp_GetByWorkflowAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_rule_sp_GetByWorkflow stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_rule_sp_InsertAsync(System.String,System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_rule_sp_Insert stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_rule_sp_UpdateAsync(System.Nullable{System.Int32},System.String,System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_rule_sp_Update stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_rules_sp_GetAllAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_rules_sp_GetAll stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_rules_sp_GetByIdAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_rules_sp_GetById stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_rules_sp_GetByWorkflowAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_rules_sp_GetByWorkflow stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_rules_sp_InsertAsync(System.String,System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_rules_sp_Insert stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_rules_sp_UpdateAsync(System.Nullable{System.Int32},System.String,System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_rules_sp_Update stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_rwoa_GetRecentAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_rwoa_GetRecent stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_sarc_sp_GetAllAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_sarc_sp_GetAll stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_sarc_sp_GetByIdAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_sarc_sp_GetById stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_sarc_sp_GetByWorkflowAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_sarc_sp_GetByWorkflow stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_sarc_sp_InsertAsync(System.String,System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_sarc_sp_Insert stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_sarc_sp_UpdateAsync(System.Nullable{System.Int32},System.String,System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_sarc_sp_Update stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_sc_sp_GetRWAssociableSpecialCasesAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_sc_sp_GetRWAssociableSpecialCases stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_Signature_sp_GetAllAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_Signature_sp_GetAll stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_Signature_sp_GetByIdAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_Signature_sp_GetById stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_Signature_sp_GetByWorkflowAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_Signature_sp_GetByWorkflow stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_Signature_sp_InsertAsync(System.String,System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_Signature_sp_Insert stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_Signature_sp_UpdateAsync(System.Nullable{System.Int32},System.String,System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_Signature_sp_Update stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_SignatureMetaData_sp_GetAllAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_SignatureMetaData_sp_GetAll stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_SignatureMetaData_sp_GetByIdAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_SignatureMetaData_sp_GetById stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_SignatureMetaData_sp_GetByWorkflowAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_SignatureMetaData_sp_GetByWorkflow stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_SignatureMetaData_sp_InsertAsync(System.String,System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_SignatureMetaData_sp_Insert stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_SignatureMetaData_sp_UpdateAsync(System.Nullable{System.Int32},System.String,System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_SignatureMetaData_sp_Update stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.core_sp_GetIRILOAssociableSpecialCasesAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_sp_GetIRILOAssociableSpecialCases stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.form348_sp_PostCompletionSearch_TEMPAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Searches for post-completion cases with various filter criteria.
            </summary>
            <param name="userId">The user ID performing the search.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of form348_sp_PostCompletionSearch_TEMPResult objects containing case information.</returns>
            <remarks>This method executes the stored procedure [dbo].[form348_sp_PostCompletionSearch_TEMP].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.imp_ImportSigDatesAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Imports signature dates from legacy system.
            </summary>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>The number of rows affected.</returns>
            <remarks>This method executes the stored procedure [dbo].[imp_ImportSigDates].</remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.ALODContextProcedures.tmp_report_sp_GetDispositionAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Gets disposition report data.
            </summary>
            <param name="cs_id">Command structure ID.</param>
            <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of tmp_report_sp_GetDispositionResult objects containing disposition information.</returns>
            <remarks>This method executes the stored procedure [dbo].[tmp_report_sp_GetDisposition].</remarks>
        </member>
        <member name="T:AF.ECT.Server.Models.Extensions.DbContextExtensions">
            <summary>
            Extension methods for DbContext to support raw SQL queries and stored procedures.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Extensions.DbContextExtensions.SqlQueryAsync``1(Microsoft.EntityFrameworkCore.DbContext,System.String,System.Object[],System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Executes a raw SQL query asynchronously and returns the results.
            </summary>
            <typeparam name="T">The type of objects to return from the query.</typeparam>
            <param name="db">The database context to execute the query against.</param>
            <param name="sql">The raw SQL query to execute.</param>
            <param name="parameters">The parameters to pass to the SQL query.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of query results or null.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when db or sql is null.</exception>
        </member>
        <member name="M:AF.ECT.Server.Models.Extensions.DbContextExtensions.SqlQueryToListAsync``1(Microsoft.EntityFrameworkCore.DbContext,System.String,System.Object[],System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Executes a raw SQL query asynchronously and returns the results as a list.
            </summary>
            <typeparam name="T">The type of objects to return from the query.</typeparam>
            <param name="db">The database context to execute the query against.</param>
            <param name="sql">The raw SQL query to execute.</param>
            <param name="parameters">The parameters to pass to the SQL query.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of query results.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when db or sql is null.</exception>
        </member>
        <member name="M:AF.ECT.Server.Models.Extensions.DbContextExtensions.ConvertParametersForProvider(Microsoft.EntityFrameworkCore.DbContext,System.Object[])">
            <summary>
            Converts SQL parameters to be compatible with the current database provider.
            </summary>
            <param name="db">The database context.</param>
            <param name="parameters">The original parameters.</param>
            <returns>Parameters converted for the current database provider.</returns>
        </member>
        <member name="M:AF.ECT.Server.Models.Extensions.DbContextExtensions.ConvertToSqliteParameters(System.Object[])">
            <summary>
            Converts SqlParameter objects to SqliteParameter objects for SQLite compatibility.
            Uses reflection to avoid compile-time dependencies on SQLite assemblies.
            </summary>
            <param name="parameters">The original parameters.</param>
            <returns>Parameters converted to SqliteParameter using reflection.</returns>
        </member>
        <member name="M:AF.ECT.Server.Models.Extensions.DbContextExtensions.CopyProperty(System.Object,System.Object,System.String)">
            <summary>
            Copies a property value from source to target using reflection.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Extensions.DbContextExtensions.ConvertSqlDbTypeToSqliteType(System.Object,System.Type)">
            <summary>
            Converts SqlDbType enum value to SqliteType enum value using reflection.
            </summary>
        </member>
        <member name="T:AF.ECT.Server.Models.Extensions.OutputParameter`1">
            <summary>
            Represents an output parameter for stored procedure calls.
            </summary>
            <typeparam name="TValue">The type of the output parameter value.</typeparam>
        </member>
        <member name="P:AF.ECT.Server.Models.Extensions.OutputParameter`1.Value">
            <summary>
            Gets the value of the output parameter.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when attempting to get the value before it has been set.</exception>
        </member>
        <member name="M:AF.ECT.Server.Models.Extensions.OutputParameter`1.SetValue(System.Object)">
            <summary>
            Sets the value of the output parameter.
            </summary>
            <param name="value">The value to set for the output parameter.</param>
        </member>
        <member name="T:AF.ECT.Server.Models.Interfaces.IALODContextProcedures">
            <summary>
            Defines stored procedure operations for the ALOD database context.
            </summary>
            <remarks>
            This interface provides access to database stored procedures and functions.
            It is auto-generated by EF Core Power Tools and should not be modified manually.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.ApplicationWarmupProcess_sp_DeleteLogByIdAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the ApplicationWarmupProcess_sp_DeleteLogById stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.ApplicationWarmupProcess_sp_FindProcessLastExecutionDateAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the ApplicationWarmupProcess_sp_FindProcessLastExecutionDate stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.ApplicationWarmupProcess_sp_GetAllLogsAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the ApplicationWarmupProcess_sp_GetAllLogs stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.ApplicationWarmupProcess_sp_InsertLogAsync(System.String,System.Nullable{System.DateTime},System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the ApplicationWarmupProcess_sp_InsertLog stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.ApplicationWarmupProcess_sp_IsProcessActiveAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the ApplicationWarmupProcess_sp_IsProcessActive stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_actions_sp_DeleteOptionActionAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_actions_sp_DeleteOptionAction stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_appeal_sp_GetAppealPostCompletionAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_appeal_sp_GetAppealPostCompletion stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_APSA_sp_GetPostCompletionAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_APSA_sp_GetPostCompletion stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_user_sp_GetMailingListForLODAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_user_sp_GetMailingListForLOD stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_user_sp_GetMailingListByUserAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_user_sp_GetMailingListByUser stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_user_sp_GetManagedUsersAsync(System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_user_sp_GetManagedUsers stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_user_sp_SearchMamberDataAsync(System.String,System.String,System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_user_sp_SearchMamberData stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_user_sp_SearchMamberData_TestAsync(System.String,System.String,System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_user_sp_SearchMamberData_Test stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_user_sp_GetMembersUserIdAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_user_sp_GetMembersUserId stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_user_sp_GetUserAltTitleAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_user_sp_GetUserAltTitle stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_user_sp_GetUserAltTitleByGroupCompoAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_user_sp_GetUserAltTitleByGroupCompo stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_user_sp_GetUserNameAsync(System.String,System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_user_sp_GetUserName stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_user_sp_GetUsersAltTitleByGroupAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_user_sp_GetUsersAltTitleByGroup stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_user_sp_GetUsersOnlineAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_user_sp_GetUsersOnline stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_user_sp_GetWhoisAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_user_sp_GetWhois stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_user_sp_HasHQTechAccountAsync(System.Nullable{System.Int32},System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_user_sp_HasHQTechAccount stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_user_sp_IsFinalStatusCodeAsync(System.Nullable{System.Byte},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_user_sp_IsFinalStatusCode stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_user_sp_LogoutAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_user_sp_Logout stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_user_sp_RegisterUserAsync(System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Byte},System.Nullable{System.DateTime},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_user_sp_RegisterUser stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_user_sp_RegisterUserRoleAsync(System.Nullable{System.Int32},System.Nullable{System.Int16},System.Nullable{System.Byte},AF.ECT.Server.Models.Extensions.OutputParameter{System.Nullable{System.Int32}},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_user_sp_RegisterUserRole stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_user_sp_SearchMemberDataAsync(System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_user_sp_SearchMemberData stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_user_sp_SearchMemberData_TestAsync(System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_user_sp_SearchMemberData_Test stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_user_sp_UdpateAccountStatusAsync(System.Nullable{System.Int32},System.Nullable{System.Byte},System.Nullable{System.DateTime},System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_user_sp_UdpateAccountStatus stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_user_sp_UpdateLoginAsync(System.Nullable{System.Int32},System.String,System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_user_sp_UpdateLogin stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_user_sp_UpdateManagedSettingsAsync(System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.Byte},System.String,System.Nullable{System.Boolean},System.Nullable{System.DateTime},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_user_sp_UpdateManagedSettings stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_user_sp_UpdateUserAltTitleAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_user_sp_UpdateUserAltTitle stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_workflow_sp_AddSignatureAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Byte},System.Nullable{System.Byte},System.Nullable{System.Byte},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_workflow_sp_AddSignature stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_workflow_sp_CopyActionsAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_workflow_sp_CopyActions stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_workflow_sp_CopyRulesAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_workflow_sp_CopyRules stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_workflow_sp_CopyWorkflowAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_workflow_sp_CopyWorkflow stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_workflow_sp_DeleteStatusCodeAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_workflow_sp_DeleteStatusCode stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_workflow_sp_GetActionsByStepAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_workflow_sp_GetActionsByStep stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_workflow_sp_GetActiveCasesAsync(System.Nullable{System.Int32},System.Nullable{System.Int16},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_workflow_sp_GetActiveCases stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_workflow_sp_GetAllFindingByReasonOfAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_workflow_sp_GetAllFindingByReasonOf stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_workflow_sp_GetAllLocksAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_workflow_sp_GetAllLocks stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_workflow_sp_GetCancelReasonsAsync(System.Nullable{System.Byte},System.Nullable{System.Boolean},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_workflow_sp_GetCancelReasons stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_workflow_sp_GetCreatableByGroupAsync(System.String,System.Nullable{System.Byte},System.Nullable{System.Byte},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_workflow_sp_GetCreatableByGroup stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_workflow_sp_GetFindingByReasonOfByIdAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_workflow_sp_GetFindingByReasonOfById stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_workflow_sp_GetFindingsAsync(System.Nullable{System.Byte},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_workflow_sp_GetFindings stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_workflow_sp_GetModuleFromWorkflowAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_workflow_sp_GetModuleFromWorkflow stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_workflow_sp_GetPageAccessByGroupAsync(System.Nullable{System.Byte},System.Nullable{System.Int32},System.Nullable{System.Byte},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_workflow_sp_GetPageAccessByGroup stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_workflow_sp_GetPageAccessByWorkflowViewAsync(System.String,System.Nullable{System.Byte},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_workflow_sp_GetPageAccessByWorkflowView stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_workflow_sp_GetPagesByWorkflowIdAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_workflow_sp_GetPagesByWorkflowId stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_Workflow_sp_GetPermissionsAsync(System.Nullable{System.Byte},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_Workflow_sp_GetPermissions stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_Workflow_sp_GetPermissionsByCompoAsync(System.Nullable{System.Byte},System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_Workflow_sp_GetPermissionsByCompo stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_workflow_sp_GetReturnReasonsAsync(System.Nullable{System.Byte},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_workflow_sp_GetReturnReasons stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_workflow_sp_GetRwoaReasonsAsync(System.Nullable{System.Byte},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_workflow_sp_GetRwoaReasons stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_workflow_sp_GetStatusCodesByCompoAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_workflow_sp_GetStatusCodesByCompo stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_workflow_sp_GetStatusCodesByCompoAndModuleAsync(System.String,System.Nullable{System.Byte},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_workflow_sp_GetStatusCodesByCompoAndModule stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_workflow_sp_GetStatusCodesBySignCodeAsync(System.Nullable{System.Int16},System.Nullable{System.Byte},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_workflow_sp_GetStatusCodesBySignCode stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_workflow_sp_GetStatusCodesByWorkflowAsync(System.Nullable{System.Byte},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_workflow_sp_GetStatusCodesByWorkflow stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_workflow_sp_GetStatusCodesByWorkflowAndAccessScopeAsync(System.Nullable{System.Byte},System.Nullable{System.Byte},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_workflow_sp_GetStatusCodesByWorkflowAndAccessScope stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_workflow_sp_GetStatusCodeScopeAsync(System.Nullable{System.Byte},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_workflow_sp_GetStatusCodeScope stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_workflow_sp_GetStepsByWorkflowAsync(System.Nullable{System.Byte},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_workflow_sp_GetStepsByWorkflow stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_workflow_sp_GetStepsByWorkflowAndStatusAsync(System.Nullable{System.Byte},System.Nullable{System.Byte},System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_workflow_sp_GetStepsByWorkflowAndStatus stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_workflow_sp_GetViewableByGroupAsync(System.Nullable{System.Byte},System.Nullable{System.Byte},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_workflow_sp_GetViewableByGroup stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_workflow_sp_GetWorkflowByCompoAsync(System.String,System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_workflow_sp_GetWorkflowByCompo stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_workflow_sp_GetWorkflowFromModuleAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_workflow_sp_GetWorkflowFromModule stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_workflow_sp_GetWorkflowInitialStatusCodeAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_workflow_sp_GetWorkflowInitialStatusCode stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_workflow_sp_GetWorkflowTitleAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_workflow_sp_GetWorkflowTitle stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_workflow_sp_GetWorkflowTitleByWorkStatusIdAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_workflow_sp_GetWorkflowTitleByWorkStatusId stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_workflow_sp_InsertActionAsync(System.Nullable{System.Byte},System.Nullable{System.Int16},System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_workflow_sp_InsertAction stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_workflow_sp_InsertOptionActionAsync(System.Nullable{System.Byte},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_workflow_sp_InsertOptionAction stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_workflow_sp_GetWorkflowByIdAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_workflow_sp_GetWorkflowById stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_workflow_sp_GetWorkflowsByRefIdAsync(System.Nullable{System.Int32},System.Nullable{System.Byte},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_workflow_sp_GetWorkflowsByRefId stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_workflow_sp_GetWorkflowsByRefIdAndTypeAsync(System.Nullable{System.Int32},System.Nullable{System.Byte},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_workflow_sp_GetWorkflowsByRefIdAndType stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_workflow_sp_GetWorkflowTypesAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_workflow_sp_GetWorkflowTypes stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_workflow_sp_InsertWorkflowAsync(System.Nullable{System.Int32},System.Nullable{System.Byte},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_workflow_sp_InsertWorkflow stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_workflow_sp_UpdateWorkflowAsync(System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_workflow_sp_UpdateWorkflow stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.workflow_sp_GetCurrentUsersAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the workflow_sp_GetCurrentUsers stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.workflow_sp_GetCurrentUsers_ForRRAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the workflow_sp_GetCurrentUsers_ForRR stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.workflow_sp_GetCurrentUsers_ForSCAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the workflow_sp_GetCurrentUsers_ForSC stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.workflow_sp_GetWorkflowByIdAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the workflow_sp_GetWorkflowById stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.workflow_sp_GetWorkflowsByRefIdAsync(System.Nullable{System.Int32},System.Nullable{System.Byte},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the workflow_sp_GetWorkflowsByRefId stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.workflow_sp_GetWorkflowsByRefIdAndTypeAsync(System.Nullable{System.Int32},System.Nullable{System.Byte},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the workflow_sp_GetWorkflowsByRefIdAndType stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.workflow_sp_GetWorkflowTypesAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the workflow_sp_GetWorkflowTypes stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.workflow_sp_InsertWorkflowAsync(System.Nullable{System.Int32},System.Nullable{System.Byte},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the workflow_sp_InsertWorkflow stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.workflow_sp_UpdateWorkflowAsync(System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the workflow_sp_UpdateWorkflow stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.workstatus_sp_GetWorkstatusByIdAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the workstatus_sp_GetWorkstatusById stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.workstatus_sp_GetWorkstatusesByRefIdAsync(System.Nullable{System.Int32},System.Nullable{System.Byte},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the workstatus_sp_GetWorkstatusesByRefId stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.workstatus_sp_GetWorkstatusesByRefIdAndTypeAsync(System.Nullable{System.Int32},System.Nullable{System.Byte},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the workstatus_sp_GetWorkstatusesByRefIdAndType stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.workstatus_sp_GetWorkstatusTypesAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the workstatus_sp_GetWorkstatusTypes stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.workstatus_sp_InsertWorkstatusAsync(System.Nullable{System.Int32},System.Nullable{System.Byte},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the workstatus_sp_InsertWorkstatus stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.workstatus_sp_UpdateWorkstatusAsync(System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the workstatus_sp_UpdateWorkstatus stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_lod_sp_GetSpecialCasesAsync(System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Retrieves special cases.
            </summary>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A list of special cases results.</returns>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.GetReinvestigationRequestsAsync(System.Nullable{System.Int32},System.Nullable{System.Boolean},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the GetReinvestigationRequests stored procedure.
            </summary>
            <param name="userId">The optional user identifier to filter requests. Pass null to retrieve all requests.</param>
            <param name="sarc">The optional SARC flag to filter requests. Pass null to ignore this filter.</param>
            <param name="returnValue">An optional output parameter to capture the stored procedure's return value.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of reinvestigation request results.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation is canceled via the cancellation token.</exception>
            <exception cref="T:Microsoft.Data.SqlClient.SqlException">Thrown when there is an error executing the stored procedure.</exception>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_AssocaitedCases_SaveAssociatedCasesAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.DataTable,System.Data.DataTable,System.Data.DataTable,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_AssocaitedCases_SaveAssociatedCases stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_AssociatedCases_GetAssociatedCasesAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_AssociatedCases_GetAssociatedCases stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_AssociatedCases_GetAssociatedCasesLODAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_AssociatedCases_GetAssociatedCasesLOD stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_CaseComments_GetByCaseAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_CaseComments_GetByCase stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_CaseComments_GetByIdAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_CaseComments_GetById stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_CaseComments_SaveOrUpdateCommentAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_CaseComments_SaveOrUpdateComment stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_CaseDialogueComments_GetByCaseAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_CaseDialogueComments_GetByCase stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_CaseDialogueComments_GetByIdAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_CaseDialogueComments_GetById stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_CaseDialogueComments_SaveOrUpdateCommentAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_CaseDialogueComments_SaveOrUpdateComment stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_CaseDialogueComments_UpdateCommentAsync(System.Nullable{System.Int32},System.String,System.Nullable{System.DateTime},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_CaseDialogueComments_UpdateComment stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_CaseType_sp_GetAllAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_CaseType_sp_GetAll stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_CaseType_sp_GetAllSubCaseTypesAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_CaseType_sp_GetAllSubCaseTypes stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_CaseType_sp_GetByIdAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_CaseType_sp_GetById stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_CaseType_sp_GetCaseTypeWorkflowsAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_CaseType_sp_GetCaseTypeWorkflows stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_CaseType_sp_GetSubCaseTypesAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_CaseType_sp_GetSubCaseTypes stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_CaseType_sp_GetWorkflowCaseTypesAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_CaseType_sp_GetWorkflowCaseTypes stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_CaseType_sp_InsertAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_CaseType_sp_Insert stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_CaseType_sp_InsertSubCaseTypeAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_CaseType_sp_InsertSubCaseType stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_CaseType_sp_UpdateAsync(System.Nullable{System.Int32},System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_CaseType_sp_Update stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_CaseType_sp_UpdateCaseTypeSubCaseTypeMapsAsync(System.Nullable{System.Int32},System.Data.DataTable,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_CaseType_sp_UpdateCaseTypeSubCaseTypeMaps stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_CaseType_sp_UpdateCaseTypeWorkflowMapsAsync(System.Nullable{System.Int32},System.Data.DataTable,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_CaseType_sp_UpdateCaseTypeWorkflowMaps stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_CaseType_sp_UpdateSubCaseTypeAsync(System.Nullable{System.Int32},System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_CaseType_sp_UpdateSubCaseType stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_CertificationStamp_sp_GetAllAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_CertificationStamp_sp_GetAll stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_CertificationStamp_sp_GetByIdAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_CertificationStamp_sp_GetById stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_CertificationStamp_sp_GetCerticationStampWorkflowsAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_CertificationStamp_sp_GetCerticationStampWorkflows stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_CertificationStamp_sp_GetParameterFieldDataAsync(System.Nullable{System.Int32},System.Nullable{System.Boolean},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_CertificationStamp_sp_GetParameterFieldData stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_CertificationStamp_sp_GetSpecialCaseStampAsync(System.Nullable{System.Int32},System.Nullable{System.Boolean},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_CertificationStamp_sp_GetSpecialCaseStamp stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_CertificationStamp_sp_GetWorkflowCertificationStampsAsync(System.Nullable{System.Int32},System.Nullable{System.Boolean},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_CertificationStamp_sp_GetWorkflowCertificationStamps stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_CertificationStamp_sp_InsertAsync(System.String,System.String,System.Nullable{System.Boolean},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_CertificationStamp_sp_Insert stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_CertificationStamp_sp_UpdateAsync(System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Boolean},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_CertificationStamp_sp_Update stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_CertificationStamp_sp_UpdateCertificationStampWorkflowMapsAsync(System.Nullable{System.Int32},System.Data.DataTable,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_CertificationStamp_sp_UpdateCertificationStampWorkflowMaps stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_ChildCaseComment_GetByCaseAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_ChildCaseComment_GetByCase stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_ChildCaseComment_GetByIdAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_ChildCaseComment_GetById stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_ChildCaseComments_SaveOrUpdateCommentAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_ChildCaseComments_SaveOrUpdateComment stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_ChildCaseComments_UpdateCommentAsync(System.Nullable{System.Int32},System.String,System.Nullable{System.DateTime},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_ChildCaseComments_UpdateComment stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_CompletedByGroup_sp_GetAllAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_CompletedByGroup_sp_GetAll stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_CompletedByGroup_sp_GetByIdAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_CompletedByGroup_sp_GetById stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_CompletedByGroup_sp_GetCompletedByGroupWorkflowsAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_CompletedByGroup_sp_GetCompletedByGroupWorkflows stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_CompletedByGroup_sp_GetWorkflowCompletedByGroupsAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_CompletedByGroup_sp_GetWorkflowCompletedByGroups stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_CompletedByGroup_sp_InsertAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_CompletedByGroup_sp_Insert stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_CompletedByGroup_sp_UpdateAsync(System.Nullable{System.Int32},System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_CompletedByGroup_sp_Update stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_CompletedByGroup_sp_UpdateCompletedByGroupWorkflowMapsAsync(System.Nullable{System.Int32},System.Data.DataTable,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_CompletedByGroup_sp_UpdateCompletedByGroupWorkflowMaps stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_email_sp_GetAllAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_email_sp_GetAll stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_email_sp_GetEmailByIDAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_email_sp_GetEmailByID stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_email_sp_GetEmailByNameAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_email_sp_GetEmailByName stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_email_sp_InsertAsync(System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_email_sp_Insert stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_email_sp_UpdateEmailByIDAsync(System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_email_sp_UpdateEmailByID stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_GetRoleAbbreAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_GetRoleAbbre stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_GetStateAbbreAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_GetStateAbbre stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_group_sp_ClearViewByGroupsAsync(System.Nullable{System.Int16},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_group_sp_ClearViewByGroups stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_group_sp_DeleteAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_group_sp_Delete stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_group_sp_GetAllAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_group_sp_GetAll stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_group_sp_GetAllWithManagedAsync(System.Nullable{System.Int16},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_group_sp_GetAllWithManaged stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_group_sp_GetByCompoAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_group_sp_GetByCompo stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_group_sp_GetByCompoAndAdminAsync(System.String,System.Nullable{System.Byte},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_group_sp_GetByCompoAndAdmin stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_group_sp_GetByCompoOnlyAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_group_sp_GetByCompoOnly stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_group_sp_GetManagedAsync(System.Nullable{System.Int16},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_group_sp_GetManaged stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_group_sp_GetManagedDropDownAsync(System.Nullable{System.Int16},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_group_sp_GetManagedDropDown stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_group_sp_GetViewByAsync(System.Nullable{System.Int16},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_group_sp_GetViewBy stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_group_sp_InsertAsync(System.String,System.String,System.String,System.Nullable{System.Byte},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Byte},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_group_sp_Insert stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_group_sp_lkupComposAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_group_sp_lkupCompos stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_group_sp_UpdateAsync(System.Nullable{System.Int32},System.String,System.String,System.String,System.Nullable{System.Byte},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Byte},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_group_sp_Update stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_group_sp_UpdateGroupPermissionsAsync(System.Nullable{System.Int16},System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_group_sp_UpdateGroupPermissions stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_group_sp_UpdateManagedGroupsAsync(System.Nullable{System.Int16},System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_group_sp_UpdateManagedGroups stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_group_sp_UpdateViewByGroupsAsync(System.Nullable{System.Int16},System.Nullable{System.Int16},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_group_sp_UpdateViewByGroups stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_ICD_sp_Find7thCharactersAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_ICD_sp_Find7thCharacters stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_ICD_sp_FindCodeAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_ICD_sp_FindCode stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_ICD_sp_FindCodeVersionAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_ICD_sp_FindCodeVersion stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_ICD_sp_FindNatureOfIncidentValuesAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_ICD_sp_FindNatureOfIncidentValues stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_ICD_sp_GetChildrenAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_ICD_sp_GetChildren stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_lod_sp_GetIsReinvestigationLodAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lod_sp_GetIsReinvestigationLod stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_lod_sp_GetLODListByMemberSSNAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lod_sp_GetLODListByMemberSSN stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_lod_sp_GetLODPostCompletionAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lod_sp_GetLODPostCompletion stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_lod_sp_GetPALDataByMemberSSNAsync(System.String,System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lod_sp_GetPALDataByMemberSSN stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_lod_sp_GetPendingCountAsync(System.Nullable{System.Int32},System.Nullable{System.Boolean},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lod_sp_GetPendingCount stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_lod_sp_GetPendingCount_LODV3Async(System.Nullable{System.Int32},System.Nullable{System.Boolean},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lod_sp_GetPendingCount_LODV3 stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_lod_sp_GetPendingIOCountAsync(System.Nullable{System.Int32},System.Nullable{System.Boolean},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lod_sp_GetPendingIOCount stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_lod_sp_GetPSCDSpecialCaseNotHoldingAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lod_sp_GetPSCDSpecialCaseNotHolding stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_lod_sp_GetReinvestigationLodFindingsAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lod_sp_GetReinvestigationLodFindings stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_lod_sp_GetReinvestigationRequestIdAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lod_sp_GetReinvestigationRequestId stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_lod_sp_GetReinvestigationRequestsAsync(System.Nullable{System.Int32},System.Nullable{System.Boolean},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lod_sp_GetReinvestigationRequests stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_lod_sp_GetReinvestigationRequestsCountAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lod_sp_GetReinvestigationRequestsCount stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_lod_sp_GetReinvestigationsCountAsync(System.Nullable{System.Int32},System.Nullable{System.Boolean},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lod_sp_GetReinvestigationsCount stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_lod_sp_GetSpecialCaseDispositionAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lod_sp_GetSpecialCaseDisposition stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_lod_sp_GetSpecialCaseHoldingAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lod_sp_GetSpecialCaseHolding stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_lod_sp_GetSpecialCaseNoDispositionAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lod_sp_GetSpecialCaseNoDisposition stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_lod_sp_GetSpecialCaseNotHoldingAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lod_sp_GetSpecialCaseNotHolding stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_lod_sp_GetSpecialCaseNotHoldingCountAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lod_sp_GetSpecialCaseNotHoldingCount stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_lod_sp_GetSpecialCasesAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lod_sp_GetSpecialCases stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_lod_sp_GetSpecialCases_PagingAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lod_sp_GetSpecialCases_Paging stored procedure with basic paging support.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_lod_sp_GetSpecialCases_Paging_FullAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.String,System.String,System.String,System.String,System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lod_sp_GetSpecialCases_Paging_Full stored procedure with advanced paging, sorting, and filtering.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_lod_sp_GetSpecialCasesByMemberSSNAsync(System.String,System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lod_sp_GetSpecialCasesByMemberSSN stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_lod_sp_GetSpecialCasesByModuleCountAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lod_sp_GetSpecialCasesByModuleCount stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_lod_sp_GetSpecialCasesByModuleIdAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lod_sp_GetSpecialCasesByModuleId stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_lod_sp_GetSpecialCasesCountAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lod_sp_GetSpecialCasesCount stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_lod_sp_GetWorkflowAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lod_sp_GetWorkflow stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_lod_sp_GetWSIDAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lod_sp_GetWSID stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_lod_sp_GetWWDListByMemberSSNAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lod_sp_GetWWDListByMemberSSN stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_lod_sp_SetLODPostCompletionAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lod_sp_SetLODPostCompletion stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_lod_sp_UpdateAppealPostCompletionAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.Nullable{System.DateOnly},System.String,System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lod_sp_UpdateAppealPostCompletion stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_lod_sp_UpdateLODPostCompletionAsync(System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.DateTime},System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lod_sp_UpdateLODPostCompletion stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_log_sp_GetChangeSetByLogIdAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_log_sp_GetChangeSetByLogId stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_log_sp_GetChangeSetByUserIdAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_log_sp_GetChangeSetByUserId stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_log_sp_GetChangeSetDetailsAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_log_sp_GetChangeSetDetails stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_log_sp_GetChangeSetsByRefIdAsync(System.Nullable{System.Int32},System.Nullable{System.Byte},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_log_sp_GetChangeSetsByRefId stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_log_sp_GetErrorByIdAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_log_sp_GetErrorById stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_log_sp_GetErrorsAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_log_sp_GetErrors stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_log_sp_GetLastChangeAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_log_sp_GetLastChange stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_log_sp_InsertChangeSetAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_log_sp_InsertChangeSet stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_log_sp_LogPageGenerationTimeAsync(System.Nullable{System.DateTime},System.String,System.String,System.String,System.String,System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_log_sp_LogPageGenerationTime stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_log_sp_RecordActionAsync(System.Nullable{System.Byte},System.Nullable{System.Byte},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Nullable{System.Int32}},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_log_sp_RecordAction stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_log_sp_RecordEmailAsync(System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_log_sp_RecordEmail stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_log_sp_RecordErrorAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_log_sp_RecordError stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_lookups_sp_GetMemberComponentsByWorkflowAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lookups_sp_GetMemberComponentsByWorkflow stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_lookUps_sp_GetMemberPSCDCategoryAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lookUps_sp_GetMemberPSCDCategory stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_lookUps_sp_GetMemberPSCDStatusAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lookUps_sp_GetMemberPSCDStatus stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_lookUps_sp_GetPasCodeChainTypeAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lookUps_sp_GetPasCodeChainType stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_lookUps_sp_GetPEPPCaseTypesAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lookUps_sp_GetPEPPCaseTypes stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_lookUps_sp_GetPEPPDispositionsAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lookUps_sp_GetPEPPDispositions stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_lookUps_sp_GetPEPPRatingsAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lookUps_sp_GetPEPPRatings stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_lookUps_sp_GetPEPPTypesAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lookUps_sp_GetPEPPTypes stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_lookups_sp_GetRMUByIdAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lookups_sp_GetRMUById stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_lookups_sp_GetWorkflowDispositionsAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lookups_sp_GetWorkflowDispositions stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_lookUps_sp_InfoSourcesAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lookUps_sp_InfoSources stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_lookups_sp_Insert_MAJCOMAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lookups_sp_Insert_MAJCOM stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_lookups_sp_Insert_PEPPDispositionAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lookups_sp_Insert_PEPPDisposition stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_lookups_sp_Insert_PEPPRatingAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lookups_sp_Insert_PEPPRating stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_lookups_sp_Insert_PEPPTypeAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lookups_sp_Insert_PEPPType stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_lookups_sp_Insert_RMUAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lookups_sp_Insert_RMU stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_lookUps_sp_InsertCategoryAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lookUps_sp_InsertCategory stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_lookUps_sp_InsertComponentAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lookUps_sp_InsertComponent stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_lookups_sp_InsertDispositionAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lookups_sp_InsertDisposition stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_lookUps_sp_InsertDutyStatusAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lookUps_sp_InsertDutyStatus stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_lookUps_sp_InsertFacilityAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lookUps_sp_InsertFacility stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_lookUps_sp_InsertFromLocationAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lookUps_sp_InsertFromLocation stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_lookUps_sp_InsertInfluenceAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lookUps_sp_InsertInfluence stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_lookUps_sp_InsertInfoSourceAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lookUps_sp_InsertInfoSource stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_lookUps_sp_InsertOccurrenceAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lookUps_sp_InsertOccurrence stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_lookUps_sp_InsertProximateAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lookUps_sp_InsertProximate stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_lookUps_sp_InsertStatusAsync(System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_lookUps_sp_InsertStatus stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_memo_sp_GetDataSourcesAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_memo_sp_GetDataSources stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_messages_sp_GetAllAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_messages_sp_GetAll stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_messages_sp_GetByIdAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_messages_sp_GetById stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_messages_sp_GetByTypeAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_messages_sp_GetByType stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_messages_sp_InsertAsync(System.String,System.String,System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_messages_sp_Insert stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_messages_sp_UpdateAsync(System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_messages_sp_Update stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_pageTitles_sp_GetAllAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_pageTitles_sp_GetAll stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_pageTitles_sp_GetByIdAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_pageTitles_sp_GetById stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_pageTitles_sp_InsertAsync(System.String,System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_pageTitles_sp_Insert stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_pageTitles_sp_UpdateAsync(System.Nullable{System.Int32},System.String,System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_pageTitles_sp_Update stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_pascode_sp_GetAllAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_pascode_sp_GetAll stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_pascode_sp_GetByIdAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_pascode_sp_GetById stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_pascode_sp_InsertAsync(System.String,System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_pascode_sp_Insert stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_pascode_sp_UpdateAsync(System.Nullable{System.Int32},System.String,System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_pascode_sp_Update stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_Permission_GetByWorkflowAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_Permission_GetByWorkflow stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_permissions_sp_GetAllAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_permissions_sp_GetAll stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_permissions_sp_GetByIdAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_permissions_sp_GetById stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_permissions_sp_GetByWorkflowAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_permissions_sp_GetByWorkflow stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_permissions_sp_InsertAsync(System.String,System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_permissions_sp_Insert stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_permissions_sp_UpdateAsync(System.Nullable{System.Int32},System.String,System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_permissions_sp_Update stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_role_sp_GetAllAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_role_sp_GetAll stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_role_sp_GetByIdAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_role_sp_GetById stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_role_sp_GetByWorkflowAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_role_sp_GetByWorkflow stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_role_sp_InsertAsync(System.String,System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_role_sp_Insert stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_role_sp_UpdateAsync(System.Nullable{System.Int32},System.String,System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_role_sp_Update stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_rule_sp_GetAllAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_rule_sp_GetAll stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_rule_sp_GetByIdAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_rule_sp_GetById stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_rule_sp_GetByWorkflowAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_rule_sp_GetByWorkflow stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_rule_sp_InsertAsync(System.String,System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_rule_sp_Insert stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_rule_sp_UpdateAsync(System.Nullable{System.Int32},System.String,System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_rule_sp_Update stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_rules_sp_GetAllAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_rules_sp_GetAll stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_rules_sp_GetByIdAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_rules_sp_GetById stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_rules_sp_GetByWorkflowAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_rules_sp_GetByWorkflow stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_rules_sp_InsertAsync(System.String,System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_rules_sp_Insert stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_rules_sp_UpdateAsync(System.Nullable{System.Int32},System.String,System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_rules_sp_Update stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_rwoa_GetRecentAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_rwoa_GetRecent stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_sarc_sp_GetAllAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_sarc_sp_GetAll stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_sarc_sp_GetByIdAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_sarc_sp_GetById stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_sarc_sp_GetByWorkflowAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_sarc_sp_GetByWorkflow stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_sarc_sp_InsertAsync(System.String,System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_sarc_sp_Insert stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_sarc_sp_UpdateAsync(System.Nullable{System.Int32},System.String,System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_sarc_sp_Update stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_sc_sp_GetRWAssociableSpecialCasesAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_sc_sp_GetRWAssociableSpecialCases stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_Signature_sp_GetAllAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_Signature_sp_GetAll stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_Signature_sp_GetByIdAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_Signature_sp_GetById stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_Signature_sp_GetByWorkflowAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_Signature_sp_GetByWorkflow stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_Signature_sp_InsertAsync(System.String,System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_Signature_sp_Insert stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_Signature_sp_UpdateAsync(System.Nullable{System.Int32},System.String,System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_Signature_sp_Update stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_SignatureMetaData_sp_GetAllAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_SignatureMetaData_sp_GetAll stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_SignatureMetaData_sp_GetByIdAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_SignatureMetaData_sp_GetById stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_SignatureMetaData_sp_GetByWorkflowAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_SignatureMetaData_sp_GetByWorkflow stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_SignatureMetaData_sp_InsertAsync(System.String,System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_SignatureMetaData_sp_Insert stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_SignatureMetaData_sp_UpdateAsync(System.Nullable{System.Int32},System.String,System.String,AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_SignatureMetaData_sp_Update stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.core_sp_GetIRILOAssociableSpecialCasesAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the core_sp_GetIRILOAssociableSpecialCases stored procedure.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.form348_sp_PostCompletionSearch_TEMPAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the form348_sp_PostCompletionSearch_TEMP stored procedure (temporary version for post completion searches).
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.imp_ImportSigDatesAsync(AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the imp_ImportSigDates stored procedure for importing signature dates during data import.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Models.Interfaces.IALODContextProcedures.tmp_report_sp_GetDispositionAsync(System.Nullable{System.Int32},AF.ECT.Server.Models.Extensions.OutputParameter{System.Int32},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the tmp_report_sp_GetDisposition stored procedure (temporary report version for disposition data).
            </summary>
        </member>
        <member name="P:AF.ECT.Server.Models.ResultTypes.CoreLogAction.ReferenceId">
            <summary>
            referenceId might be LODId, IncapId, AppealId, Budget, etc.  Not null and not FK
            </summary>
        </member>
        <member name="P:AF.ECT.Server.Models.ResultTypes.CoreUserRole.UserRoleId">
            <summary>
            userRoleID identifies UserRoles
            </summary>
        </member>
        <member name="P:AF.ECT.Server.Models.ResultTypes.CoreUserRole.GroupId">
            <summary>
            roleID from table Roles
            </summary>
        </member>
        <member name="P:AF.ECT.Server.Models.ResultTypes.CoreUserRole.UserId">
            <summary>
            UserId from table Users
            </summary>
        </member>
        <member name="T:AF.ECT.Server.Models.ResultTypes.core_lod_sp_GetReinvestigationRequestsResult">
            <summary>
            Represents the result of a reinvestigation request query.
            </summary>
            <remarks>
            This class is auto-generated from the database stored procedure
            core_lod_sp_GetReinvestigationRequests and contains the result columns.
            </remarks>
        </member>
        <member name="P:AF.ECT.Server.Models.ResultTypes.core_lod_sp_GetReinvestigationRequestsResult.request_id">
            <summary>
            Gets or sets the unique identifier for the reinvestigation request.
            </summary>
        </member>
        <member name="P:AF.ECT.Server.Models.ResultTypes.core_lod_sp_GetReinvestigationRequestsResult.Protected_SSN">
            <summary>
            Gets or sets the protected Social Security Number (last 4 digits only).
            </summary>
            <remarks>
            This field contains only the last 4 digits of the SSN for privacy protection.
            Maximum length is 4 characters.
            </remarks>
        </member>
        <member name="P:AF.ECT.Server.Models.ResultTypes.core_lod_sp_GetReinvestigationRequestsResult.Member_Name">
            <summary>
            Gets or sets the full name of the member associated with the request.
            </summary>
            <remarks>
            Maximum length is 100 characters.
            </remarks>
        </member>
        <member name="P:AF.ECT.Server.Models.ResultTypes.core_lod_sp_GetReinvestigationRequestsResult.Unit_Name">
            <summary>
            Gets or sets the name of the unit handling the request.
            </summary>
            <remarks>
            This field is required and has a maximum length of 100 characters.
            </remarks>
        </member>
        <member name="P:AF.ECT.Server.Models.ResultTypes.core_lod_sp_GetReinvestigationRequestsResult.Case_Id">
            <summary>
            Gets or sets the unique identifier for the case.
            </summary>
            <remarks>
            This field is required and has a maximum length of 50 characters.
            </remarks>
        </member>
        <member name="P:AF.ECT.Server.Models.ResultTypes.core_lod_sp_GetReinvestigationRequestsResult.Status">
            <summary>
            Gets or sets the current status of the reinvestigation request.
            </summary>
            <remarks>
            This field is required and has a maximum length of 50 characters.
            </remarks>
        </member>
        <member name="P:AF.ECT.Server.Models.ResultTypes.core_lod_sp_GetReinvestigationRequestsResult.Receive_Date">
            <summary>
            Gets or sets the date when the request was received.
            </summary>
            <remarks>
            This field is stored as a string representation of the date.
            </remarks>
        </member>
        <member name="P:AF.ECT.Server.Models.ResultTypes.core_lod_sp_GetReinvestigationRequestsResult.Days">
            <summary>
            Gets or sets the number of days since the request was received.
            </summary>
            <remarks>
            This represents the age of the request in days.
            </remarks>
        </member>
        <member name="P:AF.ECT.Server.Models.ResultTypes.MemberDatum.PasGaining">
            <summary>
            The gaining PAS code for a member&apos;s pending reassignment.
            </summary>
        </member>
        <member name="P:AF.ECT.Server.Models.ResultTypes.MemberDatum.AsgReptNltDate">
            <summary>
            The report not later than date (RNLTD) for Regular component assignments or effective date of change in strength accountability (EDCSA) for a member of the Air National Guard or AF Reserve upon reassignment.  This effectively starts strength accountability for new unit and stops accountability for losing unit.
            </summary>
        </member>
        <member name="P:AF.ECT.Server.Models.ResultTypes.MemberDatum.RcdId">
            <summary>
            Member&apos;s&apos; FILE_TYPE (AA=AF Enlisted Regular Mbr, AG=AF Enlisted ANG Mbr,AR=AF Enlisted Reserve Mbr,BA=AF Officer Regular Mbr, BG=AF Officer ANG  Mbr, BR=AF Officer Reserve Mbr, EX=Ex-employee, etc)
            </summary>
        </member>
        <member name="P:AF.ECT.Server.Models.ResultTypes.MemberDatum.RecStatCurr">
            <summary>
            Member&apos;s Record Stats (i.e. 10=Active No Projected Action, 20=Active Projected Separation No Projected Assignment,etc.).
            </summary>
        </member>
        <member name="P:AF.ECT.Server.Models.ResultTypes.MemberDatum.Pas">
            <summary>
            Member&apos;s organization of assignment
            </summary>
        </member>
        <member name="P:AF.ECT.Server.Models.ResultTypes.MemberDatum.CommDutyPhone">
            <summary>
            PHONE_NUMBER as it pertains to the member based on PHONE_TYPE.
            </summary>
        </member>
        <member name="P:AF.ECT.Server.Models.ResultTypes.MemberDatum.LocalAddrStreet">
            <summary>
            A 50-character string containing the first line of the delivery address for a person.  This typically contains aspects of the street address.
            </summary>
        </member>
        <member name="P:AF.ECT.Server.Models.ResultTypes.MemberDatum.LocalAddrCity">
            <summary>
            A 30-character string containing the city designation in an address.
            </summary>
        </member>
        <member name="P:AF.ECT.Server.Models.ResultTypes.MemberDatum.LocalAddrState">
            <summary>
            The code that identifies the state in the United States used as a component of an address.
            </summary>
        </member>
        <member name="P:AF.ECT.Server.Models.ResultTypes.MemberDatum.HomePhone">
            <summary>
            PHONE_NUMBER as it pertains to the member based on PHONE_TYPE.
            </summary>
        </member>
        <member name="P:AF.ECT.Server.Models.ResultTypes.MemberDatum.AdrsMailDomCity">
            <summary>
            A 30-character string containing the city designation in an address.
            </summary>
        </member>
        <member name="P:AF.ECT.Server.Models.ResultTypes.MemberDatum.AdrsMailDomState">
            <summary>
            The code that identifies the state in the United States used as a component of an address.
            </summary>
        </member>
        <member name="P:AF.ECT.Server.Models.ResultTypes.MemberDatum.AdrsMailZip">
            <summary>
            The postal code used in a person&apos;s delivery address.
            </summary>
        </member>
        <member name="P:AF.ECT.Server.Models.ResultTypes.MemberDatum.GrCurr">
            <summary>
            The two-digit code used to uniquely identify a particular military pay grade/rank.  The textual equivalent is contained in the Cleartext column of grade (i.e. code &apos;34&apos; corresponds to SGT.
            </summary>
        </member>
        <member name="P:AF.ECT.Server.Models.ResultTypes.MemberDatum.DyPosnNr">
            <summary>
            Position number is a nine character field in MDS.  It is used as part of the database key for all manpower requirement records.  The attribute consists of a seven character number and a two character Major Command (MAJCOM) Identifier.   
            </summary>
        </member>
        <member name="P:AF.ECT.Server.Models.ResultTypes.MemberDatum.Dafsc">
            <summary>
            Duty Air Force Specialty Code (DAFSC).  The type of Air Force Specialty that applies to a member while assigned to a specific position.  7 positions include Prefix and Suffix
            </summary>
        </member>
        <member name="P:AF.ECT.Server.Models.ResultTypes.MemberDatum.DutyStatus">
            <summary>
            DUTY_STATUS
            </summary>
        </member>
        <member name="P:AF.ECT.Server.Models.ResultTypes.MemberDatum.DeplAvailStatusAdmin">
            <summary>
            Identifies the deployment availability status of an individual by category of limitation as determined by related administrative actions.
            </summary>
        </member>
        <member name="P:AF.ECT.Server.Models.ResultTypes.MemberDatum.DeplAvailStatusAExD">
            <summary>
            Date administrative code expires.
            </summary>
        </member>
        <member name="P:AF.ECT.Server.Models.ResultTypes.MemberDatum.DeplAvailStatusPhys">
            <summary>
            Identifies the deployment availability status of an individual by category of limitation as determined by related physical actions.
            </summary>
        </member>
        <member name="P:AF.ECT.Server.Models.ResultTypes.MemberDatum.DeplAvailStatusPExD">
            <summary>
            Date physical code expires.
            </summary>
        </member>
        <member name="P:AF.ECT.Server.Models.ResultTypes.MemberDatum.DeplAvailStatusLegal">
            <summary>
            Identifies the deployment availability status of an individual by category of limitation as determined by related legal actions.
            </summary>
        </member>
        <member name="P:AF.ECT.Server.Models.ResultTypes.MemberDatum.DeplAvailStatusLExD">
            <summary>
            Date legal code expires.
            </summary>
        </member>
        <member name="P:AF.ECT.Server.Models.ResultTypes.MemberDatum.DeplAvailStatusTime">
            <summary>
            Identifies the deployment availability status of an individual by category of limitation as determined by related personnel actions.
            </summary>
        </member>
        <member name="P:AF.ECT.Server.Models.ResultTypes.MemberDatum.DeplAvailStatusTExD">
            <summary>
            Date time code expires.
            </summary>
        </member>
        <member name="P:AF.ECT.Server.Models.ResultTypes.MemberDatum.Pafsc">
            <summary>
            Individual&apos;s Air Force Specialty Code (AFSC) require common qualifications identify by a title.  An ability, skill, special qualification or system designator not restrcited to a single AFSC (i.e. the Prefix &apos;T&apos;  affixed to an AFSC indicates the person has been qualified as a Formal Training Instructor.  The primary AFSC normally denotes the AFSC the member is most qualified to perform duty in.  The 7-digit code includes Prefix and Suffix.
            </summary>
        </member>
        <member name="P:AF.ECT.Server.Models.ResultTypes.MemberDatum.Afsc2">
            <summary>
            Individual&apos;s Air Force Specialty Code (AFSC) require common qualifications identify by a title.  An ability, skill, special qualification or system designator not restrcited to a single AFSC (i.e. the Prefix &apos;T&apos;  affixed to an AFSC indicates the person has been qualified as a Formal Training Instructor.  The secondary AFSC is the specialty the member is second highest qualified to perform duty in.  The 7-digit code includes Prefix and Suffix.
            </summary>
        </member>
        <member name="P:AF.ECT.Server.Models.ResultTypes.MemberDatum.Afsc3">
            <summary>
            Individual&apos;s Air Force Specialty Code (AFSC) require common qualifications identify by a title.  An ability, skill, special qualification or system designator not restrcited to a single AFSC (i.e. the Prefix &apos;T&apos;  affixed to an AFSC indicates the person has been qualified as a Formal Training Instructor.  The third AFSC is the specialty the member is least likely qualified to perform duty in.  The 7-digit code includes Prefix and Suffix.
            </summary>
        </member>
        <member name="P:AF.ECT.Server.Models.ResultTypes.MemberDatum.SexSvcMbr">
            <summary>
            Code denoting the sex of the service member.  (Null)
            </summary>
        </member>
        <member name="P:AF.ECT.Server.Models.ResultTypes.MemberDatum.Dob">
            <summary>
            Date of Birth of the Service member.  (NULL) 
            </summary>
        </member>
        <member name="P:AF.ECT.Server.Models.ResultTypes.MemberDatum.RetSepEffDateProj">
            <summary>
            The date a member is projected to separate from the Air Force enlisted force.  Member&apos;s Date of Separation one day prior to retirement date.
            </summary>
        </member>
        <member name="P:AF.ECT.Server.Models.ResultTypes.MemberDatum.Dos">
            <summary>
            Date a member is due to separate from the service.
            </summary>
        </member>
        <member name="P:AF.ECT.Server.Models.ResultTypes.MemberDatum.SvcComp">
            <summary>
            Members Service Component (R=Regular, G=Guard, V=Reserve, C=Civilian, T=Temporary)
            </summary>
        </member>
        <member name="P:AF.ECT.Server.Models.ResultTypes.MemberDatum.Tafcsd">
            <summary>
            Total Active Federal Commission Service Date.
            </summary>
        </member>
        <member name="P:AF.ECT.Server.Models.ResultTypes.MemberDatum.Tafmsd">
            <summary>
            Total Active Federal Military Service Date.
            </summary>
        </member>
        <member name="P:AF.ECT.Server.Models.ResultTypes.MemberDatum.Ets">
            <summary>
            Expiration Term of Service.  The date a member&apos;s term of service expires.
            </summary>
        </member>
        <member name="P:AF.ECT.Server.Models.ResultTypes.MemberDatum.PasNumber">
            <summary>
            A four character string containing the Personnel Accounting Symbol (PAS) associated with a given unit.  The PAS_MPF-NUMBER, MAJCOM_ID and PAS_NUMBER make up the PAS Code.  
            </summary>
        </member>
        <member name="P:AF.ECT.Server.Models.ResultTypes.MemberDatum.Zip">
            <summary>
            Military Personnel Flight Address ZIP code. ZIP code is a system established in 1963 that uses 5-digit codes to identify the individual post offices or delivery stations in metropolitan areas associated with an address.  The basic ZIP Code format consists 
            </summary>
        </member>
        <member name="T:AF.ECT.Server.Services.DataService">
            <summary>
            Provides data access operations for the application.
            </summary>
            <remarks>
            This service implements the repository pattern and provides centralized
            access to database operations through Entity Framework Core.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.#ctor(Microsoft.EntityFrameworkCore.IDbContextFactory{AF.ECT.Server.Models.ALODContext},Microsoft.Extensions.Logging.ILogger{AF.ECT.Server.Services.DataService})">
            <summary>
            Initializes a new instance of the DataService.
            </summary>
            <param name="contextFactory">The database context factory for creating database contexts.</param>
            <param name="logger">The logger for the data service.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when contextFactory is null.</exception>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.GetReinvestigationRequestsAsync(System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves reinvestigation requests based on user and SARC criteria.
            </summary>
            <param name="userId">The optional user identifier to filter requests. Pass null to retrieve all requests.</param>
            <param name="sarc">The optional SARC flag to filter requests. Pass null to ignore this filter.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of reinvestigation request results.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation is canceled via the cancellation token.</exception>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.GetSpecialCasesAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves special cases.
            </summary>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of special cases results.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.GetMailingListForLODAsync(AF.ECT.Shared.GetMailingListForLODRequest,System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves mailing list for LOD based on reference ID, group ID, status, and calling service.
            </summary>
            <param name="request">The request containing the parameters for the mailing list retrieval.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of mailing list results.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.GetManagedUsersAsync(AF.ECT.Shared.GetManagedUsersRequest,System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves managed users based on various criteria.
            </summary>
            <param name="request">The request containing the search criteria.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of managed users.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.GetMembersUserIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves user ID for a member SSN.
            </summary>
            <param name="memberSSN">The member SSN.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing the user ID.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.GetUserAltTitleAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves user alternate title.
            </summary>
            <param name="userId">The user identifier.</param>
            <param name="groupId">The group identifier.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of user alternate titles.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.GetUserAltTitleByGroupCompoAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves user alternate title by group component.
            </summary>
            <param name="groupId">The group identifier.</param>
            <param name="workCompo">The work component identifier.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of user alternate titles by group component.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.GetUserNameAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves user name by first and last name.
            </summary>
            <param name="first">The first name.</param>
            <param name="last">The last name.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of user names.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.GetUsersAltTitleByGroupAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves users alternate title by group.
            </summary>
            <param name="groupId">The group identifier.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of users alternate titles by group.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.GetUsersOnlineAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves users who are currently online.
            </summary>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of online users.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.GetWhoisAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves WHOIS information for a user.
            </summary>
            <param name="userId">The user identifier.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of WHOIS results.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.HasHQTechAccountAsync(System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously checks if user has HQ tech account.
            </summary>
            <param name="originUserId">The origin user identifier.</param>
            <param name="userEDIPIN">The user EDIPIN.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of HQ tech account results.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.IsFinalStatusCodeAsync(System.Nullable{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Asynchronously checks if status code is final.
            </summary>
            <param name="statusId">The status identifier.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of final status code results.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.LogoutAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously logs out a user.
            </summary>
            <param name="userId">The user identifier to logout.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.RegisterUserAsync(AF.ECT.Shared.RegisterUserRequest,System.Threading.CancellationToken)">
            <summary>
            Asynchronously registers a new user.
            </summary>
            <param name="request">The register user request containing user details.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.RegisterUserRoleAsync(System.Nullable{System.Int32},System.Nullable{System.Int16},System.Nullable{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Asynchronously registers a user role.
            </summary>
            <param name="userID">The user identifier.</param>
            <param name="groupID">The group identifier.</param>
            <param name="status">The status.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing the user role ID.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.SearchMemberDataAsync(AF.ECT.Shared.SearchMemberDataRequest,System.Threading.CancellationToken)">
            <summary>
            Asynchronously searches member data.
            </summary>
            <param name="request">The search member data request containing search criteria.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of member data search results.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.SearchMemberDataTestAsync(AF.ECT.Shared.SearchMemberDataTestRequest,System.Threading.CancellationToken)">
            <summary>
            Asynchronously searches member data (test version).
            </summary>
            <param name="request">The search member data test request containing search criteria.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of member data search test results.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.UpdateAccountStatusAsync(AF.ECT.Shared.UpdateAccountStatusRequest,System.Threading.CancellationToken)">
            <summary>
            Asynchronously updates account status.
            </summary>
            <param name="request">The update account status request containing user and status details.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.UpdateLoginAsync(System.Nullable{System.Int32},System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously updates user login information.
            </summary>
            <param name="userId">The user identifier.</param>
            <param name="sessionId">The session identifier.</param>
            <param name="remoteAddr">The remote address.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of login update results.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.UpdateManagedSettingsAsync(AF.ECT.Shared.UpdateManagedSettingsRequest,System.Threading.CancellationToken)">
            <summary>
            Asynchronously updates managed user settings.
            </summary>
            <param name="request">The update managed settings request containing user and settings details.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.UpdateUserAltTitleAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously updates user alternate title.
            </summary>
            <param name="userId">The user identifier.</param>
            <param name="groupId">The group identifier.</param>
            <param name="newTitle">The new title.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.AddSignatureAsync(AF.ECT.Shared.AddSignatureRequest,System.Threading.CancellationToken)">
            <summary>
            Asynchronously adds a signature to a workflow.
            </summary>
            <param name="request">The add signature request containing signature details.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of signature results.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.CopyActionsAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously copies actions from one workflow step to another.
            </summary>
            <param name="destWsoid">The destination workflow step object identifier.</param>
            <param name="srcWsoid">The source workflow step object identifier.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.CopyRulesAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously copies rules from one workflow step to another.
            </summary>
            <param name="destWsoid">The destination workflow step object identifier.</param>
            <param name="srcWsoid">The source workflow step object identifier.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.CopyWorkflowAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously copies a workflow from one ID to another.
            </summary>
            <param name="fromId">The source workflow identifier.</param>
            <param name="toId">The destination workflow identifier.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of workflow copy results.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.DeleteStatusCodeAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously deletes a status code.
            </summary>
            <param name="statusId">The status identifier to delete.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.GetActionsByStepAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves actions by step identifier.
            </summary>
            <param name="stepId">The step identifier.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of actions by step.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.GetActiveCasesAsync(System.Nullable{System.Int32},System.Nullable{System.Int16},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves active cases for a reference and group.
            </summary>
            <param name="refId">The reference identifier.</param>
            <param name="groupId">The group identifier.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of active cases.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.GetAllFindingByReasonOfAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves all findings by reason of.
            </summary>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of all findings by reason of.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.GetAllLocksAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves all locks.
            </summary>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of all locks.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.GetCancelReasonsAsync(System.Nullable{System.Byte},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves cancel reasons for a workflow.
            </summary>
            <param name="workflowId">The workflow identifier.</param>
            <param name="isFormal">Whether the workflow is formal.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of cancel reasons.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.GetCreatableByGroupAsync(System.String,System.Nullable{System.Byte},System.Nullable{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves creatable workflows by group.
            </summary>
            <param name="compo">The component.</param>
            <param name="module">The module.</param>
            <param name="groupId">The group identifier.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of creatable workflows by group.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.GetFindingByReasonOfByIdAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves finding by reason of by identifier.
            </summary>
            <param name="id">The identifier.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of findings by reason of.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.GetFindingsAsync(System.Nullable{System.Byte},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves findings for a workflow and group.
            </summary>
            <param name="workflowId">The workflow identifier.</param>
            <param name="groupId">The group identifier.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of findings.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.GetModuleFromWorkflowAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves module from workflow identifier.
            </summary>
            <param name="workflowId">The workflow identifier.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of modules from workflow.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.GetPageAccessByGroupAsync(System.Nullable{System.Byte},System.Nullable{System.Int32},System.Nullable{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves page access by group.
            </summary>
            <param name="workflow">The workflow.</param>
            <param name="status">The status.</param>
            <param name="group">The group.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of page access by group.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.GetPageAccessByWorkflowViewAsync(System.String,System.Nullable{System.Byte},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves page access by workflow view.
            </summary>
            <param name="compo">The component.</param>
            <param name="workflow">The workflow.</param>
            <param name="status">The status.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of page access by workflow view.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.GetPagesByWorkflowIdAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves pages by workflow identifier.
            </summary>
            <param name="workflowId">The workflow identifier.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of pages by workflow.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.GetPermissionsAsync(System.Nullable{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves permissions for a workflow.
            </summary>
            <param name="workflowId">The workflow identifier.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of permissions.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.GetPermissionsByCompoAsync(System.Nullable{System.Byte},System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves permissions by component for a workflow.
            </summary>
            <param name="workflowId">The workflow identifier.</param>
            <param name="compo">The component.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of permissions by component.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.GetReturnReasonsAsync(System.Nullable{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves return reasons for a workflow.
            </summary>
            <param name="workflowId">The workflow identifier.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of return reasons.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.GetRwoaReasonsAsync(System.Nullable{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves RWOA reasons for a workflow.
            </summary>
            <param name="workflowId">The workflow identifier.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of RWOA reasons.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.GetStatusCodesByCompoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves status codes by component.
            </summary>
            <param name="compo">The component.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of status codes by component.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.GetStatusCodesByCompoAndModuleAsync(System.String,System.Nullable{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves status codes by component and module.
            </summary>
            <param name="compo">The component.</param>
            <param name="module">The module.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of status codes by component and module.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.GetStatusCodesBySignCodeAsync(System.Nullable{System.Int16},System.Nullable{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves status codes by sign code.
            </summary>
            <param name="groupId">The group identifier.</param>
            <param name="module">The module.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of status codes by sign code.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.GetStatusCodesByWorkflowAsync(System.Nullable{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves status codes by workflow.
            </summary>
            <param name="workflowId">The workflow identifier.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of status codes by workflow.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.GetStatusCodesByWorkflowAndAccessScopeAsync(System.Nullable{System.Byte},System.Nullable{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves status codes by workflow and access scope.
            </summary>
            <param name="workflowId">The workflow identifier.</param>
            <param name="accessScope">The access scope.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of status codes by workflow and access scope.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.GetStatusCodeScopeAsync(System.Nullable{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves status code scope.
            </summary>
            <param name="statusID">The status identifier.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of status code scopes.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.GetStepsByWorkflowAsync(System.Nullable{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves steps by workflow.
            </summary>
            <param name="workflow">The workflow.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of steps by workflow.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.GetStepsByWorkflowAndStatusAsync(System.Nullable{System.Byte},System.Nullable{System.Byte},System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves steps by workflow and status.
            </summary>
            <param name="workflow">The workflow.</param>
            <param name="status">The status.</param>
            <param name="deathStatus">The death status.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of steps by workflow and status.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.GetViewableByGroupAsync(System.Nullable{System.Byte},System.Nullable{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves viewable workflows by group.
            </summary>
            <param name="groupId">The group identifier.</param>
            <param name="module">The module.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of viewable workflows by group.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.GetWorkflowByCompoAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves workflow by component.
            </summary>
            <param name="compo">The component.</param>
            <param name="userId">The user identifier.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of workflows by component.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.GetWorkflowFromModuleAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves workflow from module.
            </summary>
            <param name="moduleId">The module identifier.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of workflows from module.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.GetWorkflowInitialStatusCodeAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves workflow initial status code.
            </summary>
            <param name="compo">The component.</param>
            <param name="module">The module.</param>
            <param name="workflowId">The workflow identifier.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of workflow initial status codes.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.GetWorkflowTitleAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves workflow title.
            </summary>
            <param name="moduleId">The module identifier.</param>
            <param name="subCase">The sub case.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of workflow titles.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.GetWorkflowTitleByWorkStatusIdAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves workflow title by work status identifier.
            </summary>
            <param name="workflowId">The workflow identifier.</param>
            <param name="subCase">The sub case.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of workflow titles by work status.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.InsertActionAsync(AF.ECT.Shared.InsertActionRequest,System.Threading.CancellationToken)">
            <summary>
            Asynchronously inserts an action.
            </summary>
            <param name="request">The insert action request containing action details.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of insert action results.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.InsertOptionActionAsync(AF.ECT.Shared.InsertOptionActionRequest,System.Threading.CancellationToken)">
            <summary>
            Asynchronously inserts an option action.
            </summary>
            <param name="request">The insert option action request containing action details.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of insert option action results.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.DeleteLogByIdAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously deletes a log entry by its identifier.
            </summary>
            <param name="logId">The log entry identifier to delete.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.FindProcessLastExecutionDateAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously finds the last execution date for a process.
            </summary>
            <param name="processName">The name of the process.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of process last execution date results.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.GetAllLogsAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves all log entries.
            </summary>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of all log entries.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.InsertLogAsync(System.String,System.Nullable{System.DateTime},System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously inserts a new log entry.
            </summary>
            <param name="processName">The name of the process.</param>
            <param name="executionDate">The execution date.</param>
            <param name="message">The log message.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.IsProcessActiveAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously checks if a process is active.
            </summary>
            <param name="processName">The name of the process.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of process active status results.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.GetWorkflowByIdAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves a workflow by its identifier.
            </summary>
            <param name="workflowId">The workflow identifier.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of workflow results.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.GetWorkflowsByRefIdAsync(System.Nullable{System.Int32},System.Nullable{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves workflows by reference identifier.
            </summary>
            <param name="refId">The reference identifier.</param>
            <param name="module">The module.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of workflows by reference.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.GetWorkflowsByRefIdAndTypeAsync(System.Nullable{System.Int32},System.Nullable{System.Byte},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves workflows by reference identifier and type.
            </summary>
            <param name="refId">The reference identifier.</param>
            <param name="module">The module.</param>
            <param name="workflowType">The workflow type.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of workflows by reference and type.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.GetWorkflowTypesAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves workflow types.
            </summary>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of workflow types.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.InsertWorkflowAsync(System.Nullable{System.Int32},System.Nullable{System.Byte},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously inserts a workflow.
            </summary>
            <param name="refId">The reference identifier.</param>
            <param name="module">The module.</param>
            <param name="workflowType">The workflow type.</param>
            <param name="workflowText">The workflow text.</param>
            <param name="userId">The user identifier.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.UpdateWorkflowAsync(System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously updates a workflow.
            </summary>
            <param name="workflowId">The workflow identifier.</param>
            <param name="workflowText">The workflow text.</param>
            <param name="userId">The user identifier.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.GetWorkstatusByIdAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves a workstatus by its identifier.
            </summary>
            <param name="workstatusId">The workstatus identifier.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of workstatus results.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.GetWorkstatusesByRefIdAsync(System.Nullable{System.Int32},System.Nullable{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves workstatuses by reference identifier.
            </summary>
            <param name="refId">The reference identifier.</param>
            <param name="module">The module.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of workstatuses by reference.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.GetWorkstatusesByRefIdAndTypeAsync(System.Nullable{System.Int32},System.Nullable{System.Byte},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves workstatuses by reference identifier and type.
            </summary>
            <param name="refId">The reference identifier.</param>
            <param name="module">The module.</param>
            <param name="workstatusType">The workstatus type.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of workstatuses by reference and type.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.GetWorkstatusTypesAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves workstatus types.
            </summary>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of workstatus types.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.InsertWorkstatusAsync(System.Nullable{System.Int32},System.Nullable{System.Byte},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously inserts a workstatus.
            </summary>
            <param name="refId">The reference identifier.</param>
            <param name="module">The module.</param>
            <param name="workstatusType">The workstatus type.</param>
            <param name="workstatusText">The workstatus text.</param>
            <param name="userId">The user identifier.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.DataService.UpdateWorkstatusAsync(System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously updates a workstatus.
            </summary>
            <param name="workstatusId">The workstatus identifier.</param>
            <param name="workstatusText">The workstatus text.</param>
            <param name="userId">The user identifier.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="T:AF.ECT.Server.Services.Interfaces.IDataService">
            <summary>
            Defines operations for data access and business logic services.
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.GetReinvestigationRequestsAsync(System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves reinvestigation requests based on user and SARC criteria.
            </summary>
            <param name="userId">The optional user identifier to filter requests. Pass null to retrieve all requests.</param>
            <param name="sarc">The optional SARC flag to filter requests. Pass null to ignore this filter.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of reinvestigation request results.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.GetSpecialCasesAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves special cases.
            </summary>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of special cases results.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.GetMailingListForLODAsync(AF.ECT.Shared.GetMailingListForLODRequest,System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves mailing list for LOD based on reference ID, group ID, status, and calling service.
            </summary>
            <param name="request">The request containing the parameters for the mailing list retrieval.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of mailing list results.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.GetManagedUsersAsync(AF.ECT.Shared.GetManagedUsersRequest,System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves managed users based on various criteria.
            </summary>
            <param name="request">The request containing the search criteria.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of managed users.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.GetMembersUserIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves user ID for a member SSN.
            </summary>
            <param name="memberSSN">The member SSN.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing the user ID.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.GetUserAltTitleAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves user alternate title.
            </summary>
            <param name="userId">The user identifier.</param>
            <param name="groupId">The group identifier.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of user alternate titles.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.GetUserAltTitleByGroupCompoAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves user alternate title by group component.
            </summary>
            <param name="groupId">The group identifier.</param>
            <param name="workCompo">The work component identifier.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of user alternate titles by group component.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.GetUserNameAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves user name by first and last name.
            </summary>
            <param name="first">The first name.</param>
            <param name="last">The last name.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of user names.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.GetUsersAltTitleByGroupAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves users alternate title by group.
            </summary>
            <param name="groupId">The group identifier.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of users alternate titles by group.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.GetUsersOnlineAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves users who are currently online.
            </summary>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of online users.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.GetWhoisAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves WHOIS information for a user.
            </summary>
            <param name="userId">The user identifier.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of WHOIS results.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.HasHQTechAccountAsync(System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously checks if user has HQ tech account.
            </summary>
            <param name="originUserId">The origin user identifier.</param>
            <param name="userEDIPIN">The user EDIPIN.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of HQ tech account results.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.IsFinalStatusCodeAsync(System.Nullable{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Asynchronously checks if status code is final.
            </summary>
            <param name="statusId">The status identifier.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of final status code results.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.LogoutAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously logs out a user.
            </summary>
            <param name="userId">The user identifier to logout.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.RegisterUserAsync(AF.ECT.Shared.RegisterUserRequest,System.Threading.CancellationToken)">
            <summary>
            Asynchronously registers a new user.
            </summary>
            <param name="request">The register user request containing user details.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.RegisterUserRoleAsync(System.Nullable{System.Int32},System.Nullable{System.Int16},System.Nullable{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Asynchronously registers a user role.
            </summary>
            <param name="userID">The user identifier.</param>
            <param name="groupID">The group identifier.</param>
            <param name="status">The status.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing the user role ID.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.SearchMemberDataAsync(AF.ECT.Shared.SearchMemberDataRequest,System.Threading.CancellationToken)">
            <summary>
            Asynchronously searches member data.
            </summary>
            <param name="request">The search member data request containing search criteria.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of member data search results.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.SearchMemberDataTestAsync(AF.ECT.Shared.SearchMemberDataTestRequest,System.Threading.CancellationToken)">
            <summary>
            Asynchronously searches member data (test version).
            </summary>
            <param name="request">The search member data test request containing search criteria.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of member data search test results.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.UpdateAccountStatusAsync(AF.ECT.Shared.UpdateAccountStatusRequest,System.Threading.CancellationToken)">
            <summary>
            Asynchronously updates account status.
            </summary>
            <param name="request">The update account status request containing user and status details.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.UpdateLoginAsync(System.Nullable{System.Int32},System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously updates user login information.
            </summary>
            <param name="userId">The user identifier.</param>
            <param name="sessionId">The session identifier.</param>
            <param name="remoteAddr">The remote address.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of login update results.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.UpdateManagedSettingsAsync(AF.ECT.Shared.UpdateManagedSettingsRequest,System.Threading.CancellationToken)">
            <summary>
            Asynchronously updates managed user settings.
            </summary>
            <param name="request">The update managed settings request containing user and settings details.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.UpdateUserAltTitleAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously updates user alternate title.
            </summary>
            <param name="userId">The user identifier.</param>
            <param name="groupId">The group identifier.</param>
            <param name="newTitle">The new title.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.AddSignatureAsync(AF.ECT.Shared.AddSignatureRequest,System.Threading.CancellationToken)">
            <summary>
            Asynchronously adds a signature to a workflow.
            </summary>
            <param name="request">The add signature request containing signature details.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of signature results.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.CopyActionsAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously copies actions from one workflow step to another.
            </summary>
            <param name="destWsoid">The destination workflow step object identifier.</param>
            <param name="srcWsoid">The source workflow step object identifier.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.CopyRulesAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously copies rules from one workflow step to another.
            </summary>
            <param name="destWsoid">The destination workflow step object identifier.</param>
            <param name="srcWsoid">The source workflow step object identifier.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.CopyWorkflowAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously copies a workflow from one ID to another.
            </summary>
            <param name="fromId">The source workflow identifier.</param>
            <param name="toId">The destination workflow identifier.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of workflow copy results.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.DeleteStatusCodeAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously deletes a status code.
            </summary>
            <param name="statusId">The status identifier to delete.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.GetActionsByStepAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves actions by step identifier.
            </summary>
            <param name="stepId">The step identifier.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of actions by step.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.GetActiveCasesAsync(System.Nullable{System.Int32},System.Nullable{System.Int16},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves active cases for a reference and group.
            </summary>
            <param name="refId">The reference identifier.</param>
            <param name="groupId">The group identifier.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of active cases.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.GetAllFindingByReasonOfAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves all findings by reason of.
            </summary>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of all findings by reason of.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.GetAllLocksAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves all locks.
            </summary>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of all locks.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.GetCancelReasonsAsync(System.Nullable{System.Byte},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves cancel reasons for a workflow.
            </summary>
            <param name="workflowId">The workflow identifier.</param>
            <param name="isFormal">Whether the workflow is formal.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of cancel reasons.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.GetCreatableByGroupAsync(System.String,System.Nullable{System.Byte},System.Nullable{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves creatable workflows by group.
            </summary>
            <param name="compo">The component.</param>
            <param name="module">The module.</param>
            <param name="groupId">The group identifier.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of creatable workflows by group.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.GetFindingByReasonOfByIdAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves finding by reason of by identifier.
            </summary>
            <param name="id">The identifier.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of findings by reason of.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.GetFindingsAsync(System.Nullable{System.Byte},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves findings for a workflow and group.
            </summary>
            <param name="workflowId">The workflow identifier.</param>
            <param name="groupId">The group identifier.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of findings.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.GetModuleFromWorkflowAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves module from workflow identifier.
            </summary>
            <param name="workflowId">The workflow identifier.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of modules from workflow.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.GetPageAccessByGroupAsync(System.Nullable{System.Byte},System.Nullable{System.Int32},System.Nullable{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves page access by group.
            </summary>
            <param name="workflow">The workflow.</param>
            <param name="status">The status.</param>
            <param name="group">The group.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of page access by group.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.GetPageAccessByWorkflowViewAsync(System.String,System.Nullable{System.Byte},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves page access by workflow view.
            </summary>
            <param name="compo">The component.</param>
            <param name="workflow">The workflow.</param>
            <param name="status">The status.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of page access by workflow view.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.GetPagesByWorkflowIdAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves pages by workflow identifier.
            </summary>
            <param name="workflowId">The workflow identifier.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of pages by workflow.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.GetPermissionsAsync(System.Nullable{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves permissions for a workflow.
            </summary>
            <param name="workflowId">The workflow identifier.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of permissions.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.GetPermissionsByCompoAsync(System.Nullable{System.Byte},System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves permissions by component for a workflow.
            </summary>
            <param name="workflowId">The workflow identifier.</param>
            <param name="compo">The component.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of permissions by component.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.GetReturnReasonsAsync(System.Nullable{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves return reasons for a workflow.
            </summary>
            <param name="workflowId">The workflow identifier.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of return reasons.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.GetRwoaReasonsAsync(System.Nullable{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves RWOA reasons for a workflow.
            </summary>
            <param name="workflowId">The workflow identifier.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of RWOA reasons.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.GetStatusCodesByCompoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves status codes by component.
            </summary>
            <param name="compo">The component.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of status codes by component.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.GetStatusCodesByCompoAndModuleAsync(System.String,System.Nullable{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves status codes by component and module.
            </summary>
            <param name="compo">The component.</param>
            <param name="module">The module.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of status codes by component and module.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.GetStatusCodesBySignCodeAsync(System.Nullable{System.Int16},System.Nullable{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves status codes by sign code.
            </summary>
            <param name="groupId">The group identifier.</param>
            <param name="module">The module.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of status codes by sign code.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.GetStatusCodesByWorkflowAsync(System.Nullable{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves status codes by workflow.
            </summary>
            <param name="workflowId">The workflow identifier.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of status codes by workflow.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.GetStatusCodesByWorkflowAndAccessScopeAsync(System.Nullable{System.Byte},System.Nullable{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves status codes by workflow and access scope.
            </summary>
            <param name="workflowId">The workflow identifier.</param>
            <param name="accessScope">The access scope.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of status codes by workflow and access scope.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.GetStatusCodeScopeAsync(System.Nullable{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves status code scope.
            </summary>
            <param name="statusID">The status identifier.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of status code scopes.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.GetStepsByWorkflowAsync(System.Nullable{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves steps by workflow.
            </summary>
            <param name="workflow">The workflow.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of steps by workflow.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.GetStepsByWorkflowAndStatusAsync(System.Nullable{System.Byte},System.Nullable{System.Byte},System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves steps by workflow and status.
            </summary>
            <param name="workflow">The workflow.</param>
            <param name="status">The status.</param>
            <param name="deathStatus">The death status.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of steps by workflow and status.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.GetViewableByGroupAsync(System.Nullable{System.Byte},System.Nullable{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves viewable workflows by group.
            </summary>
            <param name="groupId">The group identifier.</param>
            <param name="module">The module.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of viewable workflows by group.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.GetWorkflowByCompoAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves workflow by component.
            </summary>
            <param name="compo">The component.</param>
            <param name="userId">The user identifier.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of workflows by component.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.GetWorkflowFromModuleAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves workflow from module.
            </summary>
            <param name="moduleId">The module identifier.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of workflows from module.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.GetWorkflowInitialStatusCodeAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves workflow initial status code.
            </summary>
            <param name="compo">The component.</param>
            <param name="module">The module.</param>
            <param name="workflowId">The workflow identifier.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of workflow initial status codes.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.GetWorkflowTitleAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves workflow title.
            </summary>
            <param name="moduleId">The module identifier.</param>
            <param name="subCase">The sub case.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of workflow titles.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.GetWorkflowTitleByWorkStatusIdAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves workflow title by work status identifier.
            </summary>
            <param name="workflowId">The workflow identifier.</param>
            <param name="subCase">The sub case.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of workflow titles by work status.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.InsertActionAsync(AF.ECT.Shared.InsertActionRequest,System.Threading.CancellationToken)">
            <summary>
            Asynchronously inserts an action.
            </summary>
            <param name="request">The insert action request containing action details.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of insert action results.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.InsertOptionActionAsync(AF.ECT.Shared.InsertOptionActionRequest,System.Threading.CancellationToken)">
            <summary>
            Asynchronously inserts an option action.
            </summary>
            <param name="request">The insert option action request containing action details.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of insert option action results.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.DeleteLogByIdAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously deletes a log by identifier.
            </summary>
            <param name="logId">The log identifier to delete.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.FindProcessLastExecutionDateAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously finds the last execution date for a process.
            </summary>
            <param name="processName">The process name.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of process last execution dates.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.GetAllLogsAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves all logs.
            </summary>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of all logs.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.InsertLogAsync(System.String,System.Nullable{System.DateTime},System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously inserts a log entry.
            </summary>
            <param name="processName">The process name.</param>
            <param name="executionDate">The execution date.</param>
            <param name="message">The message.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.IsProcessActiveAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously checks if a process is active.
            </summary>
            <param name="processName">The process name.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of process active results.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.GetWorkflowByIdAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves a workflow by its identifier.
            </summary>
            <param name="workflowId">The workflow identifier.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of workflow results.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.GetWorkflowsByRefIdAsync(System.Nullable{System.Int32},System.Nullable{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves workflows by reference identifier.
            </summary>
            <param name="refId">The reference identifier.</param>
            <param name="module">The module.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of workflows by reference.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.GetWorkflowsByRefIdAndTypeAsync(System.Nullable{System.Int32},System.Nullable{System.Byte},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves workflows by reference identifier and type.
            </summary>
            <param name="refId">The reference identifier.</param>
            <param name="module">The module.</param>
            <param name="workflowType">The workflow type.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of workflows by reference and type.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.GetWorkflowTypesAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves workflow types.
            </summary>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of workflow types.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.InsertWorkflowAsync(System.Nullable{System.Int32},System.Nullable{System.Byte},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously inserts a workflow.
            </summary>
            <param name="refId">The reference identifier.</param>
            <param name="module">The module.</param>
            <param name="workflowType">The workflow type.</param>
            <param name="workflowText">The workflow text.</param>
            <param name="userId">The user identifier.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.UpdateWorkflowAsync(System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously updates a workflow.
            </summary>
            <param name="workflowId">The workflow identifier.</param>
            <param name="workflowText">The workflow text.</param>
            <param name="userId">The user identifier.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.GetWorkstatusByIdAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves a workstatus by its identifier.
            </summary>
            <param name="workstatusId">The workstatus identifier.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of workstatus results.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.GetWorkstatusesByRefIdAsync(System.Nullable{System.Int32},System.Nullable{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves workstatuses by reference identifier.
            </summary>
            <param name="refId">The reference identifier.</param>
            <param name="module">The module.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of workstatuses by reference.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.GetWorkstatusesByRefIdAndTypeAsync(System.Nullable{System.Int32},System.Nullable{System.Byte},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves workstatuses by reference identifier and type.
            </summary>
            <param name="refId">The reference identifier.</param>
            <param name="module">The module.</param>
            <param name="workstatusType">The workstatus type.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of workstatuses by reference and type.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.GetWorkstatusTypesAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves workstatus types.
            </summary>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation, containing a list of workstatus types.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.InsertWorkstatusAsync(System.Nullable{System.Int32},System.Nullable{System.Byte},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously inserts a workstatus.
            </summary>
            <param name="refId">The reference identifier.</param>
            <param name="module">The module.</param>
            <param name="workstatusType">The workstatus type.</param>
            <param name="workstatusText">The workstatus text.</param>
            <param name="userId">The user identifier.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IDataService.UpdateWorkstatusAsync(System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously updates a workstatus.
            </summary>
            <param name="workstatusId">The workstatus identifier.</param>
            <param name="workstatusText">The workstatus text.</param>
            <param name="userId">The user identifier.</param>
            <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="T:AF.ECT.Server.Services.Interfaces.IResilienceService">
            <summary>
            Interface for resilience service providing fault tolerance patterns
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IResilienceService.ExecuteResilientHttpRequestAsync(System.Func{System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}})">
            <summary>
            Executes an HTTP request with resilience policies applied
            </summary>
            <param name="action">The HTTP request action to execute</param>
            <returns>The HTTP response message</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IResilienceService.ExecuteWithRetryAsync``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Executes a generic action with retry policy only
            </summary>
            <typeparam name="T">The return type of the action</typeparam>
            <param name="action">The action to execute with retry</param>
            <returns>The result of the action</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IResilienceService.ExecuteDatabaseOperationAsync``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Executes a database operation with timeout and retry
            </summary>
            <typeparam name="T">The return type of the operation</typeparam>
            <param name="action">The database operation to execute</param>
            <returns>The result of the database operation</returns>
        </member>
        <member name="P:AF.ECT.Server.Services.Interfaces.IResilienceService.CircuitBreakerState">
            <summary>
            Gets the current circuit breaker state
            </summary>
        </member>
        <member name="P:AF.ECT.Server.Services.Interfaces.IResilienceService.LastException">
            <summary>
            Gets the last exception that caused the circuit breaker to open
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Services.Interfaces.IResilienceService.ResetCircuitBreaker">
            <summary>
            Manually resets the circuit breaker
            </summary>
        </member>
        <member name="T:AF.ECT.Server.Services.ResilienceService">
            <summary>
            Service for implementing resilience patterns using Polly policies
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Services.ResilienceService.ExecuteResilientHttpRequestAsync(System.Func{System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}})">
            <summary>
            Executes an HTTP request with resilience policies applied
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Services.ResilienceService.ExecuteWithRetryAsync``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Executes a generic action with retry policy only
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Services.ResilienceService.ExecuteDatabaseOperationAsync``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Executes a database operation with timeout and retry
            </summary>
        </member>
        <member name="P:AF.ECT.Server.Services.ResilienceService.CircuitBreakerState">
            <summary>
            Gets the current circuit breaker state
            </summary>
        </member>
        <member name="P:AF.ECT.Server.Services.ResilienceService.LastException">
            <summary>
            Gets the last exception that caused the circuit breaker to open
            </summary>
        </member>
        <member name="M:AF.ECT.Server.Services.ResilienceService.ResetCircuitBreaker">
            <summary>
            Manually resets the circuit breaker
            </summary>
        </member>
        <member name="T:AF.ECT.Server.Services.WorkflowServiceImpl">
            <summary>
            gRPC service implementation for workflow management operations.
            </summary>
            <remarks>
            This service extends the auto-generated WorkflowServiceBase class and provides
            workflow management functionality with integration to the application's data services.
            </remarks>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.#ctor(Microsoft.Extensions.Logging.ILogger{AF.ECT.Server.Services.WorkflowServiceImpl},AF.ECT.Server.Services.Interfaces.IDataService,AF.ECT.Server.Services.Interfaces.IResilienceService)">
            <summary>
            Initializes a new instance of the WorkflowManagementService.
            </summary>
            <param name="logger">The logger for recording service operations.</param>
            <param name="dataService">The data service for accessing application data.</param>
            <param name="resilienceService">The resilience service for fault tolerance patterns.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when logger, dataService, or resilienceService is null.</exception>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetReinvestigationRequests(AF.ECT.Shared.GetReinvestigationRequestsRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetReinvestigationRequests gRPC request.
            </summary>
            <param name="request">The request containing filter parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the reinvestigation requests Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetReinvestigationRequestsStream(AF.ECT.Shared.GetReinvestigationRequestsRequest,Grpc.Core.IServerStreamWriter{AF.ECT.Shared.ReinvestigationRequestItem},Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetReinvestigationRequestsStream gRPC request (streaming version).
            </summary>
            <param name="request">The request containing filter parameters.</param>
            <param name="responseStream">The server stream writer for sending items.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetMailingListForLOD(AF.ECT.Shared.GetMailingListForLODRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetMailingListForLOD gRPC request.
            </summary>
            <param name="request">The request containing mailing list parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the mailing list Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetMailingListForLODStream(AF.ECT.Shared.GetMailingListForLODRequest,Grpc.Core.IServerStreamWriter{AF.ECT.Shared.MailingListItem},Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetMailingListForLODStream gRPC request (streaming version).
            </summary>
            <param name="request">The request containing mailing list parameters.</param>
            <param name="responseStream">The server stream writer for sending items.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetManagedUsers(AF.ECT.Shared.GetManagedUsersRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetManagedUsers gRPC request.
            </summary>
            <param name="request">The request containing managed users parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the managed users Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetManagedUsersStream(AF.ECT.Shared.GetManagedUsersRequest,Grpc.Core.IServerStreamWriter{AF.ECT.Shared.ManagedUserItem},Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetManagedUsersStream gRPC request (streaming version).
            </summary>
            <param name="request">The request containing managed users parameters.</param>
            <param name="responseStream">The server stream writer for sending items.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetMembersUserId(AF.ECT.Shared.GetMembersUserIdRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetMembersUserId gRPC request.
            </summary>
            <param name="request">The request containing member SSN.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the member user ID Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetUserAltTitle(AF.ECT.Shared.GetUserAltTitleRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetUserAltTitle gRPC request.
            </summary>
            <param name="request">The request containing user alternate title parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the user alternate title Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetUserAltTitleStream(AF.ECT.Shared.GetUserAltTitleRequest,Grpc.Core.IServerStreamWriter{AF.ECT.Shared.UserAltTitleItem},Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetUserAltTitleStream gRPC request (streaming version).
            </summary>
            <param name="request">The request containing user alternate title parameters.</param>
            <param name="responseStream">The server stream writer for sending items.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetUserAltTitleByGroupCompo(AF.ECT.Shared.GetUserAltTitleByGroupCompoRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetUserAltTitleByGroupCompo gRPC request.
            </summary>
            <param name="request">The request containing user alternate title by group component parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the user alternate title by group component Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetUserAltTitleByGroupCompoStream(AF.ECT.Shared.GetUserAltTitleByGroupCompoRequest,Grpc.Core.IServerStreamWriter{AF.ECT.Shared.UserAltTitleByGroupCompoItem},Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetUserAltTitleByGroupCompoStream gRPC request (streaming version).
            </summary>
            <param name="request">The request containing user alternate title by group component parameters.</param>
            <param name="responseStream">The server stream writer for sending items.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetUserName(AF.ECT.Shared.GetUserNameRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetUserName gRPC request.
            </summary>
            <param name="request">The request containing user name parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the user name Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetUserNameStream(AF.ECT.Shared.GetUserNameRequest,Grpc.Core.IServerStreamWriter{AF.ECT.Shared.UserNameItem},Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetUserNameStream gRPC request (streaming version).
            </summary>
            <param name="request">The request containing user name parameters.</param>
            <param name="responseStream">The server stream writer for sending items.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetUsersAltTitleByGroup(AF.ECT.Shared.GetUsersAltTitleByGroupRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetUsersAltTitleByGroup gRPC request.
            </summary>
            <param name="request">The request containing users alternate title by group parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the users alternate title by group Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetUsersAltTitleByGroupStream(AF.ECT.Shared.GetUsersAltTitleByGroupRequest,Grpc.Core.IServerStreamWriter{AF.ECT.Shared.UsersAltTitleByGroupItem},Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetUsersAltTitleByGroupStream gRPC request (streaming version).
            </summary>
            <param name="request">The request containing users alternate title by group parameters.</param>
            <param name="responseStream">The server stream writer for sending items.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetUsersOnline(AF.ECT.Shared.EmptyRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetUsersOnline gRPC request.
            </summary>
            <param name="request">The empty request.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the users online Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetUsersOnlineStream(AF.ECT.Shared.EmptyRequest,Grpc.Core.IServerStreamWriter{AF.ECT.Shared.UserOnlineItem},Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetUsersOnlineStream gRPC request (streaming version).
            </summary>
            <param name="request">The empty request.</param>
            <param name="responseStream">The server stream writer for sending items.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetWhoisStream(AF.ECT.Shared.GetWhoisRequest,Grpc.Core.IServerStreamWriter{AF.ECT.Shared.WhoisItem},Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetWhoisStream gRPC request (streaming version).
            </summary>
            <param name="request">The request containing WHOIS parameters.</param>
            <param name="responseStream">The server stream writer for sending items.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.HasHQTechAccountStream(AF.ECT.Shared.HasHQTechAccountRequest,Grpc.Core.IServerStreamWriter{AF.ECT.Shared.HQTechAccountItem},Grpc.Core.ServerCallContext)">
            <summary>
            Handles the HasHQTechAccountStream gRPC request (streaming version).
            </summary>
            <param name="request">The request containing HQ tech account parameters.</param>
            <param name="responseStream">The server stream writer for sending items.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.IsFinalStatusCodeStream(AF.ECT.Shared.IsFinalStatusCodeRequest,Grpc.Core.IServerStreamWriter{AF.ECT.Shared.FinalStatusCodeItem},Grpc.Core.ServerCallContext)">
            <summary>
            Handles the IsFinalStatusCodeStream gRPC request (streaming version).
            </summary>
            <param name="request">The request containing final status code parameters.</param>
            <param name="responseStream">The server stream writer for sending items.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.UpdateLoginStream(AF.ECT.Shared.UpdateLoginRequest,Grpc.Core.IServerStreamWriter{AF.ECT.Shared.LoginUpdateItem},Grpc.Core.ServerCallContext)">
            <summary>
            Handles the UpdateLoginStream gRPC request (streaming version).
            </summary>
            <param name="request">The request containing login update parameters.</param>
            <param name="responseStream">The server stream writer for sending items.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetWhois(AF.ECT.Shared.GetWhoisRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetWhois gRPC request.
            </summary>
            <param name="request">The request containing WHOIS parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the WHOIS Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.HasHQTechAccount(AF.ECT.Shared.HasHQTechAccountRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the HasHQTechAccount gRPC request.
            </summary>
            <param name="request">The request containing HQ tech account parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the HQ tech account Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.IsFinalStatusCode(AF.ECT.Shared.IsFinalStatusCodeRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the IsFinalStatusCode gRPC request.
            </summary>
            <param name="request">The request containing final status code parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the final status code Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.Logout(AF.ECT.Shared.LogoutRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the Logout gRPC request.
            </summary>
            <param name="request">The request containing logout parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the logout Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.RegisterUser(AF.ECT.Shared.RegisterUserRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the RegisterUser gRPC request.
            </summary>
            <param name="request">The request containing user registration parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the user registration Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.RegisterUserRole(AF.ECT.Shared.RegisterUserRoleRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the RegisterUserRole gRPC request.
            </summary>
            <param name="request">The request containing user role registration parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the user role registration Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.SearchMemberData(AF.ECT.Shared.SearchMemberDataRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the SearchMemberData gRPC request.
            </summary>
            <param name="request">The request containing member data search parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the member data search Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.SearchMemberDataStream(AF.ECT.Shared.SearchMemberDataRequest,Grpc.Core.IServerStreamWriter{AF.ECT.Shared.MemberDataItem},Grpc.Core.ServerCallContext)">
            <summary>
            Handles the SearchMemberDataStream gRPC request (streaming version).
            </summary>
            <param name="request">The request containing member data search parameters.</param>
            <param name="responseStream">The server stream writer for sending items.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.SearchMemberDataTest(AF.ECT.Shared.SearchMemberDataTestRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the SearchMemberDataTest gRPC request.
            </summary>
            <param name="request">The request containing member data test search parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the member data test search Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.SearchMemberDataTestStream(AF.ECT.Shared.SearchMemberDataTestRequest,Grpc.Core.IServerStreamWriter{AF.ECT.Shared.MemberDataTestItem},Grpc.Core.ServerCallContext)">
            <summary>
            Handles the SearchMemberDataTestStream gRPC request (streaming version).
            </summary>
            <param name="request">The request containing member data test search parameters.</param>
            <param name="responseStream">The server stream writer for sending items.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.UpdateAccountStatus(AF.ECT.Shared.UpdateAccountStatusRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the UpdateAccountStatus gRPC request.
            </summary>
            <param name="request">The request containing account status update parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the account status update Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.UpdateLogin(AF.ECT.Shared.UpdateLoginRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the UpdateLogin gRPC request.
            </summary>
            <param name="request">The request containing login update parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the login update Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.UpdateManagedSettings(AF.ECT.Shared.UpdateManagedSettingsRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the UpdateManagedSettings gRPC request.
            </summary>
            <param name="request">The request containing managed settings update parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the managed settings update Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.UpdateUserAltTitle(AF.ECT.Shared.UpdateUserAltTitleRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the UpdateUserAltTitle gRPC request.
            </summary>
            <param name="request">The request containing user alternate title update parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the user alternate title update Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.AddSignature(AF.ECT.Shared.AddSignatureRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the AddSignature gRPC request.
            </summary>
            <param name="request">The request containing signature addition parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the signature addition Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.CopyActions(AF.ECT.Shared.CopyActionsRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the CopyActions gRPC request.
            </summary>
            <param name="request">The request containing action copy parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the action copy Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.CopyRules(AF.ECT.Shared.CopyRulesRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the CopyRules gRPC request.
            </summary>
            <param name="request">The request containing rule copy parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the rule copy Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.CopyWorkflow(AF.ECT.Shared.CopyWorkflowRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the CopyWorkflow gRPC request.
            </summary>
            <param name="request">The request containing workflow copy parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the workflow copy Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.DeleteStatusCode(AF.ECT.Shared.DeleteStatusCodeRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the DeleteStatusCode gRPC request.
            </summary>
            <param name="request">The request containing status code deletion parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the status code deletion Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetActionsByStep(AF.ECT.Shared.GetActionsByStepRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetActionsByStep gRPC request.
            </summary>
            <param name="request">The request containing actions by step parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the actions by step Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetActiveCases(AF.ECT.Shared.GetActiveCasesRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetActiveCases gRPC request.
            </summary>
            <param name="request">The request containing active cases parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the active cases Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetAllFindingByReasonOf(AF.ECT.Shared.EmptyRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetAllFindingByReasonOf gRPC request.
            </summary>
            <param name="request">The empty request.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the all findings by reason of Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetAllLocks(AF.ECT.Shared.EmptyRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetAllLocks gRPC request.
            </summary>
            <param name="request">The empty request.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the all locks Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetCancelReasons(AF.ECT.Shared.GetCancelReasonsRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetCancelReasons gRPC request.
            </summary>
            <param name="request">The request containing cancel reasons parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the cancel reasons Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetCreatableByGroup(AF.ECT.Shared.GetCreatableByGroupRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetCreatableByGroup gRPC request.
            </summary>
            <param name="request">The request containing creatable by group parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the creatable by group Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetFindingByReasonOfById(AF.ECT.Shared.GetFindingByReasonOfByIdRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetFindingByReasonOfById gRPC request.
            </summary>
            <param name="request">The request containing finding by reason of by ID parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the finding by reason of by ID Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetFindings(AF.ECT.Shared.GetFindingsRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetFindings gRPC request.
            </summary>
            <param name="request">The request containing findings parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the findings Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetModuleFromWorkflow(AF.ECT.Shared.GetModuleFromWorkflowRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetModuleFromWorkflow gRPC request.
            </summary>
            <param name="request">The request containing module from workflow parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the module from workflow Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetPageAccessByGroup(AF.ECT.Shared.GetPageAccessByGroupRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetPageAccessByGroup gRPC request.
            </summary>
            <param name="request">The request containing page access by group parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the page access by group Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetPageAccessByWorkflowView(AF.ECT.Shared.GetPageAccessByWorkflowViewRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetPageAccessByWorkflowView gRPC request.
            </summary>
            <param name="request">The request containing page access by workflow view parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the page access by workflow view Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetPagesByWorkflowId(AF.ECT.Shared.GetPagesByWorkflowIdRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetPagesByWorkflowId gRPC request.
            </summary>
            <param name="request">The request containing pages by workflow ID parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the pages by workflow ID Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetPermissions(AF.ECT.Shared.GetPermissionsRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetPermissions gRPC request.
            </summary>
            <param name="request">The request containing permissions parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the permissions Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetPermissionsByCompo(AF.ECT.Shared.GetPermissionsByCompoRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetPermissionsByCompo gRPC request.
            </summary>
            <param name="request">The request containing permissions by component parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the permissions by component Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetReturnReasons(AF.ECT.Shared.GetReturnReasonsRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetReturnReasons gRPC request.
            </summary>
            <param name="request">The request containing return reasons parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the return reasons Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetRwoaReasons(AF.ECT.Shared.GetRwoaReasonsRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetRwoaReasons gRPC request.
            </summary>
            <param name="request">The request containing RWOA reasons parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the RWOA reasons Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetStatusCodesByCompo(AF.ECT.Shared.GetStatusCodesByCompoRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetStatusCodesByCompo gRPC request.
            </summary>
            <param name="request">The request containing status codes by component parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the status codes by component Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetStatusCodesByCompoAndModule(AF.ECT.Shared.GetStatusCodesByCompoAndModuleRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetStatusCodesByCompoAndModule gRPC request.
            </summary>
            <param name="request">The request containing status codes by component and module parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the status codes by component and module Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetStatusCodesBySignCode(AF.ECT.Shared.GetStatusCodesBySignCodeRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetStatusCodesBySignCode gRPC request.
            </summary>
            <param name="request">The request containing status codes by sign code parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the status codes by sign code Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetStatusCodesByWorkflow(AF.ECT.Shared.GetStatusCodesByWorkflowRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetStatusCodesByWorkflow gRPC request.
            </summary>
            <param name="request">The request containing status codes by workflow parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the status codes by workflow Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetStatusCodesByWorkflowAndAccessScope(AF.ECT.Shared.GetStatusCodesByWorkflowAndAccessScopeRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetStatusCodesByWorkflowAndAccessScope gRPC request.
            </summary>
            <param name="request">The request containing status codes by workflow and access scope parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the status codes by workflow and access scope Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetStatusCodeScope(AF.ECT.Shared.GetStatusCodeScopeRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetStatusCodeScope gRPC request.
            </summary>
            <param name="request">The request containing status code scope parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the status code scope Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetStepsByWorkflow(AF.ECT.Shared.GetStepsByWorkflowRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetStepsByWorkflow gRPC request.
            </summary>
            <param name="request">The request containing steps by workflow parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the steps by workflow Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetStepsByWorkflowAndStatus(AF.ECT.Shared.GetStepsByWorkflowAndStatusRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetStepsByWorkflowAndStatus gRPC request.
            </summary>
            <param name="request">The request containing steps by workflow and status parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the steps by workflow and status Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetViewableByGroup(AF.ECT.Shared.GetViewableByGroupRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetViewableByGroup gRPC request.
            </summary>
            <param name="request">The request containing viewable by group parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the viewable by group Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetWorkflowByCompo(AF.ECT.Shared.GetWorkflowByCompoRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetWorkflowByCompo gRPC request.
            </summary>
            <param name="request">The request containing workflow by component parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the workflow by component Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetWorkflowFromModule(AF.ECT.Shared.GetWorkflowFromModuleRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetWorkflowFromModule gRPC request.
            </summary>
            <param name="request">The request containing workflow from module parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the workflow from module Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetWorkflowInitialStatusCode(AF.ECT.Shared.GetWorkflowInitialStatusCodeRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetWorkflowInitialStatusCode gRPC request.
            </summary>
            <param name="request">The request containing workflow initial status code parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the workflow initial status code Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetWorkflowTitle(AF.ECT.Shared.GetWorkflowTitleRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetWorkflowTitle gRPC request.
            </summary>
            <param name="request">The request containing workflow title parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the workflow title Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetWorkflowTitleByWorkStatusId(AF.ECT.Shared.GetWorkflowTitleByWorkStatusIdRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetWorkflowTitleByWorkStatusId gRPC request.
            </summary>
            <param name="request">The request containing workflow title by work status ID parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the workflow title by work status ID Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.InsertAction(AF.ECT.Shared.InsertActionRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the InsertAction gRPC request.
            </summary>
            <param name="request">The request containing action insertion parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the action insertion Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.InsertOptionAction(AF.ECT.Shared.InsertOptionActionRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the InsertOptionAction gRPC request.
            </summary>
            <param name="request">The request containing option action insertion parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the option action insertion Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.AddSignatureStream(AF.ECT.Shared.AddSignatureRequest,Grpc.Core.IServerStreamWriter{AF.ECT.Shared.SignatureItem},Grpc.Core.ServerCallContext)">
            <summary>
            Handles the AddSignatureStream gRPC request (streaming version).
            </summary>
            <param name="request">The request containing signature addition parameters.</param>
            <param name="responseStream">The server stream writer for sending items.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.CopyWorkflowStream(AF.ECT.Shared.CopyWorkflowRequest,Grpc.Core.IServerStreamWriter{AF.ECT.Shared.WorkflowCopyItem},Grpc.Core.ServerCallContext)">
            <summary>
            Handles the CopyWorkflowStream gRPC request (streaming version).
            </summary>
            <param name="request">The request containing workflow copy parameters.</param>
            <param name="responseStream">The server stream writer for sending items.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetActionsByStepStream(AF.ECT.Shared.GetActionsByStepRequest,Grpc.Core.IServerStreamWriter{AF.ECT.Shared.ActionByStepItem},Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetActionsByStepStream gRPC request (streaming version).
            </summary>
            <param name="request">The request containing actions by step parameters.</param>
            <param name="responseStream">The server stream writer for sending items.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetActiveCasesStream(AF.ECT.Shared.GetActiveCasesRequest,Grpc.Core.IServerStreamWriter{AF.ECT.Shared.ActiveCaseItem},Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetActiveCasesStream gRPC request (streaming version).
            </summary>
            <param name="request">The request containing active cases parameters.</param>
            <param name="responseStream">The server stream writer for sending items.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetAllFindingByReasonOfStream(AF.ECT.Shared.EmptyRequest,Grpc.Core.IServerStreamWriter{AF.ECT.Shared.FindingByReasonOfItem},Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetAllFindingByReasonOfStream gRPC request (streaming version).
            </summary>
            <param name="request">The empty request.</param>
            <param name="responseStream">The server stream writer for sending items.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetAllLocksStream(AF.ECT.Shared.EmptyRequest,Grpc.Core.IServerStreamWriter{AF.ECT.Shared.LockItem},Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetAllLocksStream gRPC request (streaming version).
            </summary>
            <param name="request">The empty request.</param>
            <param name="responseStream">The server stream writer for sending items.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetCancelReasonsStream(AF.ECT.Shared.GetCancelReasonsRequest,Grpc.Core.IServerStreamWriter{AF.ECT.Shared.CancelReasonItem},Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetCancelReasonsStream gRPC request (streaming version).
            </summary>
            <param name="request">The request containing cancel reasons parameters.</param>
            <param name="responseStream">The server stream writer for sending items.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetCreatableByGroupStream(AF.ECT.Shared.GetCreatableByGroupRequest,Grpc.Core.IServerStreamWriter{AF.ECT.Shared.CreatableByGroupItem},Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetCreatableByGroupStream gRPC request (streaming version).
            </summary>
            <param name="request">The request containing creatable by group parameters.</param>
            <param name="responseStream">The server stream writer for sending items.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetFindingByReasonOfByIdStream(AF.ECT.Shared.GetFindingByReasonOfByIdRequest,Grpc.Core.IServerStreamWriter{AF.ECT.Shared.FindingByReasonOfByIdItem},Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetFindingByReasonOfByIdStream gRPC request (streaming version).
            </summary>
            <param name="request">The request containing finding by reason of by ID parameters.</param>
            <param name="responseStream">The server stream writer for sending items.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetFindingsStream(AF.ECT.Shared.GetFindingsRequest,Grpc.Core.IServerStreamWriter{AF.ECT.Shared.FindingItem},Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetFindingsStream gRPC request (streaming version).
            </summary>
            <param name="request">The request containing findings parameters.</param>
            <param name="responseStream">The server stream writer for sending items.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetModuleFromWorkflowStream(AF.ECT.Shared.GetModuleFromWorkflowRequest,Grpc.Core.IServerStreamWriter{AF.ECT.Shared.ModuleFromWorkflowItem},Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetModuleFromWorkflowStream gRPC request (streaming version).
            </summary>
            <param name="request">The request containing module from workflow parameters.</param>
            <param name="responseStream">The server stream writer for sending items.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetPageAccessByGroupStream(AF.ECT.Shared.GetPageAccessByGroupRequest,Grpc.Core.IServerStreamWriter{AF.ECT.Shared.PageAccessByGroupItem},Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetPageAccessByGroupStream gRPC request (streaming version).
            </summary>
            <param name="request">The request containing page access by group parameters.</param>
            <param name="responseStream">The server stream writer for sending items.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetPageAccessByWorkflowViewStream(AF.ECT.Shared.GetPageAccessByWorkflowViewRequest,Grpc.Core.IServerStreamWriter{AF.ECT.Shared.PageAccessByWorkflowViewItem},Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetPageAccessByWorkflowViewStream gRPC request (streaming version).
            </summary>
            <param name="request">The request containing page access by workflow view parameters.</param>
            <param name="responseStream">The server stream writer for sending items.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetPagesByWorkflowIdStream(AF.ECT.Shared.GetPagesByWorkflowIdRequest,Grpc.Core.IServerStreamWriter{AF.ECT.Shared.PageByWorkflowItem},Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetPagesByWorkflowIdStream gRPC request (streaming version).
            </summary>
            <param name="request">The request containing pages by workflow ID parameters.</param>
            <param name="responseStream">The server stream writer for sending items.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetPermissionsStream(AF.ECT.Shared.GetPermissionsRequest,Grpc.Core.IServerStreamWriter{AF.ECT.Shared.PermissionItem},Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetPermissionsStream gRPC request (streaming version).
            </summary>
            <param name="request">The request containing permissions parameters.</param>
            <param name="responseStream">The server stream writer for sending items.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetPermissionsByCompoStream(AF.ECT.Shared.GetPermissionsByCompoRequest,Grpc.Core.IServerStreamWriter{AF.ECT.Shared.PermissionByCompoItem},Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetPermissionsByCompoStream gRPC request (streaming version).
            </summary>
            <param name="request">The request containing permissions by component parameters.</param>
            <param name="responseStream">The server stream writer for sending items.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetReturnReasonsStream(AF.ECT.Shared.GetReturnReasonsRequest,Grpc.Core.IServerStreamWriter{AF.ECT.Shared.ReturnReasonItem},Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetReturnReasonsStream gRPC request (streaming version).
            </summary>
            <param name="request">The request containing return reasons parameters.</param>
            <param name="responseStream">The server stream writer for sending items.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetRwoaReasonsStream(AF.ECT.Shared.GetRwoaReasonsRequest,Grpc.Core.IServerStreamWriter{AF.ECT.Shared.RwoaReasonItem},Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetRwoaReasonsStream gRPC request (streaming version).
            </summary>
            <param name="request">The request containing RWOA reasons parameters.</param>
            <param name="responseStream">The server stream writer for sending items.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetStatusCodesByCompoStream(AF.ECT.Shared.GetStatusCodesByCompoRequest,Grpc.Core.IServerStreamWriter{AF.ECT.Shared.StatusCodeByCompoItem},Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetStatusCodesByCompoStream gRPC request (streaming version).
            </summary>
            <param name="request">The request containing status codes by component parameters.</param>
            <param name="responseStream">The server stream writer for sending items.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetStatusCodesByCompoAndModuleStream(AF.ECT.Shared.GetStatusCodesByCompoAndModuleRequest,Grpc.Core.IServerStreamWriter{AF.ECT.Shared.StatusCodeByCompoAndModuleItem},Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetStatusCodesByCompoAndModuleStream gRPC request (streaming version).
            </summary>
            <param name="request">The request containing status codes by component and module parameters.</param>
            <param name="responseStream">The server stream writer for sending items.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetStatusCodesBySignCodeStream(AF.ECT.Shared.GetStatusCodesBySignCodeRequest,Grpc.Core.IServerStreamWriter{AF.ECT.Shared.StatusCodeBySignCodeItem},Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetStatusCodesBySignCodeStream gRPC request (streaming version).
            </summary>
            <param name="request">The request containing status codes by sign code parameters.</param>
            <param name="responseStream">The server stream writer for sending items.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetStatusCodesByWorkflowStream(AF.ECT.Shared.GetStatusCodesByWorkflowRequest,Grpc.Core.IServerStreamWriter{AF.ECT.Shared.StatusCodeByWorkflowItem},Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetStatusCodesByWorkflowStream gRPC request (streaming version).
            </summary>
            <param name="request">The request containing status codes by workflow parameters.</param>
            <param name="responseStream">The server stream writer for sending items.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetStatusCodesByWorkflowAndAccessScopeStream(AF.ECT.Shared.GetStatusCodesByWorkflowAndAccessScopeRequest,Grpc.Core.IServerStreamWriter{AF.ECT.Shared.StatusCodeByWorkflowAndAccessScopeItem},Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetStatusCodesByWorkflowAndAccessScopeStream gRPC request (streaming version).
            </summary>
            <param name="request">The request containing status codes by workflow and access scope parameters.</param>
            <param name="responseStream">The server stream writer for sending items.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetStatusCodeScopeStream(AF.ECT.Shared.GetStatusCodeScopeRequest,Grpc.Core.IServerStreamWriter{AF.ECT.Shared.StatusCodeScopeItem},Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetStatusCodeScopeStream gRPC request (streaming version).
            </summary>
            <param name="request">The request containing status code scope parameters.</param>
            <param name="responseStream">The server stream writer for sending items.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetStepsByWorkflowStream(AF.ECT.Shared.GetStepsByWorkflowRequest,Grpc.Core.IServerStreamWriter{AF.ECT.Shared.StepByWorkflowItem},Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetStepsByWorkflowStream gRPC request (streaming version).
            </summary>
            <param name="request">The request containing steps by workflow parameters.</param>
            <param name="responseStream">The server stream writer for sending items.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetStepsByWorkflowAndStatusStream(AF.ECT.Shared.GetStepsByWorkflowAndStatusRequest,Grpc.Core.IServerStreamWriter{AF.ECT.Shared.StepByWorkflowAndStatusItem},Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetStepsByWorkflowAndStatusStream gRPC request (streaming version).
            </summary>
            <param name="request">The request containing steps by workflow and status parameters.</param>
            <param name="responseStream">The server stream writer for sending items.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetViewableByGroupStream(AF.ECT.Shared.GetViewableByGroupRequest,Grpc.Core.IServerStreamWriter{AF.ECT.Shared.ViewableByGroupItem},Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetViewableByGroupStream gRPC request (streaming version).
            </summary>
            <param name="request">The request containing viewable by group parameters.</param>
            <param name="responseStream">The server stream writer for sending items.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetWorkflowByCompoStream(AF.ECT.Shared.GetWorkflowByCompoRequest,Grpc.Core.IServerStreamWriter{AF.ECT.Shared.WorkflowByCompoItem},Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetWorkflowByCompoStream gRPC request (streaming version).
            </summary>
            <param name="request">The request containing workflow by component parameters.</param>
            <param name="responseStream">The server stream writer for sending items.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetWorkflowFromModuleStream(AF.ECT.Shared.GetWorkflowFromModuleRequest,Grpc.Core.IServerStreamWriter{AF.ECT.Shared.WorkflowFromModuleItem},Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetWorkflowFromModuleStream gRPC request (streaming version).
            </summary>
            <param name="request">The request containing workflow from module parameters.</param>
            <param name="responseStream">The server stream writer for sending items.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetWorkflowInitialStatusCodeStream(AF.ECT.Shared.GetWorkflowInitialStatusCodeRequest,Grpc.Core.IServerStreamWriter{AF.ECT.Shared.WorkflowInitialStatusCodeItem},Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetWorkflowInitialStatusCodeStream gRPC request (streaming version).
            </summary>
            <param name="request">The request containing workflow initial status code parameters.</param>
            <param name="responseStream">The server stream writer for sending items.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetWorkflowTitleStream(AF.ECT.Shared.GetWorkflowTitleRequest,Grpc.Core.IServerStreamWriter{AF.ECT.Shared.WorkflowTitleItem},Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetWorkflowTitleStream gRPC request (streaming version).
            </summary>
            <param name="request">The request containing workflow title parameters.</param>
            <param name="responseStream">The server stream writer for sending items.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetWorkflowTitleByWorkStatusIdStream(AF.ECT.Shared.GetWorkflowTitleByWorkStatusIdRequest,Grpc.Core.IServerStreamWriter{AF.ECT.Shared.WorkflowTitleByWorkStatusIdItem},Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetWorkflowTitleByWorkStatusIdStream gRPC request (streaming version).
            </summary>
            <param name="request">The request containing workflow title by work status ID parameters.</param>
            <param name="responseStream">The server stream writer for sending items.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.InsertActionStream(AF.ECT.Shared.InsertActionRequest,Grpc.Core.IServerStreamWriter{AF.ECT.Shared.InsertActionItem},Grpc.Core.ServerCallContext)">
            <summary>
            Handles the InsertActionStream gRPC request (streaming version).
            </summary>
            <param name="request">The request containing action insertion parameters.</param>
            <param name="responseStream">The server stream writer for sending items.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.InsertOptionActionStream(AF.ECT.Shared.InsertOptionActionRequest,Grpc.Core.IServerStreamWriter{AF.ECT.Shared.InsertOptionActionItem},Grpc.Core.ServerCallContext)">
            <summary>
            Handles the InsertOptionActionStream gRPC request (streaming version).
            </summary>
            <param name="request">The request containing option action insertion parameters.</param>
            <param name="responseStream">The server stream writer for sending items.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.DeleteLogById(AF.ECT.Shared.DeleteLogByIdRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the DeleteLogById gRPC request.
            </summary>
            <param name="request">The request containing log deletion parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the log deletion Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.FindProcessLastExecutionDate(AF.ECT.Shared.FindProcessLastExecutionDateRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the FindProcessLastExecutionDate gRPC request.
            </summary>
            <param name="request">The request containing process last execution date parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the process last execution date Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.FindProcessLastExecutionDateStream(AF.ECT.Shared.FindProcessLastExecutionDateRequest,Grpc.Core.IServerStreamWriter{AF.ECT.Shared.ProcessLastExecutionDateItem},Grpc.Core.ServerCallContext)">
            <summary>
            Handles the FindProcessLastExecutionDateStream gRPC request (streaming version).
            </summary>
            <param name="request">The request containing process last execution date parameters.</param>
            <param name="responseStream">The server stream writer for sending items.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetAllLogs(AF.ECT.Shared.EmptyRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetAllLogs gRPC request.
            </summary>
            <param name="request">The empty request.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the all logs Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetAllLogsStream(AF.ECT.Shared.EmptyRequest,Grpc.Core.IServerStreamWriter{AF.ECT.Shared.LogItem},Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetAllLogsStream gRPC request (streaming version).
            </summary>
            <param name="request">The empty request.</param>
            <param name="responseStream">The server stream writer for sending items.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.InsertLog(AF.ECT.Shared.InsertLogRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the InsertLog gRPC request.
            </summary>
            <param name="request">The request containing log insertion parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the log insertion Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.IsProcessActive(AF.ECT.Shared.IsProcessActiveRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the IsProcessActive gRPC request.
            </summary>
            <param name="request">The request containing process active check parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the process active Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.IsProcessActiveStream(AF.ECT.Shared.IsProcessActiveRequest,Grpc.Core.IServerStreamWriter{AF.ECT.Shared.ProcessActiveItem},Grpc.Core.ServerCallContext)">
            <summary>
            Handles the IsProcessActiveStream gRPC request (streaming version).
            </summary>
            <param name="request">The request containing process active check parameters.</param>
            <param name="responseStream">The server stream writer for sending items.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetWorkflowById(AF.ECT.Shared.GetWorkflowByIdRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetWorkflowById gRPC request.
            </summary>
            <param name="request">The request containing workflow ID parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the workflow by ID Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetWorkflowByIdStream(AF.ECT.Shared.GetWorkflowByIdRequest,Grpc.Core.IServerStreamWriter{AF.ECT.Shared.WorkflowByIdItem},Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetWorkflowByIdStream gRPC request (streaming version).
            </summary>
            <param name="request">The request containing workflow ID parameters.</param>
            <param name="responseStream">The server stream writer for sending items.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetWorkflowsByRefId(AF.ECT.Shared.GetWorkflowsByRefIdRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetWorkflowsByRefId gRPC request.
            </summary>
            <param name="request">The request containing workflows by ref ID parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the workflows by ref ID Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetWorkflowsByRefIdStream(AF.ECT.Shared.GetWorkflowsByRefIdRequest,Grpc.Core.IServerStreamWriter{AF.ECT.Shared.WorkflowByRefIdItem},Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetWorkflowsByRefIdStream gRPC request (streaming version).
            </summary>
            <param name="request">The request containing workflows by ref ID parameters.</param>
            <param name="responseStream">The server stream writer for sending items.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetWorkflowsByRefIdAndType(AF.ECT.Shared.GetWorkflowsByRefIdAndTypeRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetWorkflowsByRefIdAndType gRPC request.
            </summary>
            <param name="request">The request containing workflows by ref ID and type parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the workflows by ref ID and type Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetWorkflowsByRefIdAndTypeStream(AF.ECT.Shared.GetWorkflowsByRefIdAndTypeRequest,Grpc.Core.IServerStreamWriter{AF.ECT.Shared.WorkflowByRefIdAndTypeItem},Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetWorkflowsByRefIdAndTypeStream gRPC request (streaming version).
            </summary>
            <param name="request">The request containing workflows by ref ID and type parameters.</param>
            <param name="responseStream">The server stream writer for sending items.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetWorkflowTypes(AF.ECT.Shared.EmptyRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetWorkflowTypes gRPC request.
            </summary>
            <param name="request">The empty request.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the workflow types Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetWorkflowTypesStream(AF.ECT.Shared.EmptyRequest,Grpc.Core.IServerStreamWriter{AF.ECT.Shared.WorkflowTypeItem},Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetWorkflowTypesStream gRPC request (streaming version).
            </summary>
            <param name="request">The empty request.</param>
            <param name="responseStream">The server stream writer for sending items.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.InsertWorkflow(AF.ECT.Shared.InsertWorkflowRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the InsertWorkflow gRPC request.
            </summary>
            <param name="request">The request containing workflow insertion parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the workflow insertion Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.UpdateWorkflow(AF.ECT.Shared.UpdateWorkflowRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the UpdateWorkflow gRPC request.
            </summary>
            <param name="request">The request containing workflow update parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the workflow update Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetWorkstatusById(AF.ECT.Shared.GetWorkstatusByIdRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetWorkstatusById gRPC request.
            </summary>
            <param name="request">The request containing workstatus ID parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the workstatus by ID Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetWorkstatusByIdStream(AF.ECT.Shared.GetWorkstatusByIdRequest,Grpc.Core.IServerStreamWriter{AF.ECT.Shared.WorkstatusByIdItem},Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetWorkstatusByIdStream gRPC request (streaming version).
            </summary>
            <param name="request">The request containing workstatus ID parameters.</param>
            <param name="responseStream">The server stream writer for sending items.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetWorkstatusesByRefId(AF.ECT.Shared.GetWorkstatusesByRefIdRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetWorkstatusesByRefId gRPC request.
            </summary>
            <param name="request">The request containing workstatuses by ref ID parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the workstatuses by ref ID Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetWorkstatusesByRefIdStream(AF.ECT.Shared.GetWorkstatusesByRefIdRequest,Grpc.Core.IServerStreamWriter{AF.ECT.Shared.WorkstatusByRefIdItem},Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetWorkstatusesByRefIdStream gRPC request (streaming version).
            </summary>
            <param name="request">The request containing workstatuses by ref ID parameters.</param>
            <param name="responseStream">The server stream writer for sending items.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetWorkstatusesByRefIdAndType(AF.ECT.Shared.GetWorkstatusesByRefIdAndTypeRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetWorkstatusesByRefIdAndType gRPC request.
            </summary>
            <param name="request">The request containing workstatuses by ref ID and type parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the workstatuses by ref ID and type Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetWorkstatusesByRefIdAndTypeStream(AF.ECT.Shared.GetWorkstatusesByRefIdAndTypeRequest,Grpc.Core.IServerStreamWriter{AF.ECT.Shared.WorkstatusByRefIdAndTypeItem},Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetWorkstatusesByRefIdAndTypeStream gRPC request (streaming version).
            </summary>
            <param name="request">The request containing workstatuses by ref ID and type parameters.</param>
            <param name="responseStream">The server stream writer for sending items.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetWorkstatusTypes(AF.ECT.Shared.EmptyRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetWorkstatusTypes gRPC request.
            </summary>
            <param name="request">The empty request.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the workstatus types Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.GetWorkstatusTypesStream(AF.ECT.Shared.EmptyRequest,Grpc.Core.IServerStreamWriter{AF.ECT.Shared.WorkstatusTypeItem},Grpc.Core.ServerCallContext)">
            <summary>
            Handles the GetWorkstatusTypesStream gRPC request (streaming version).
            </summary>
            <param name="request">The empty request.</param>
            <param name="responseStream">The server stream writer for sending items.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.InsertWorkstatus(AF.ECT.Shared.InsertWorkstatusRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the InsertWorkstatus gRPC request.
            </summary>
            <param name="request">The request containing workstatus insertion parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the workstatus insertion Response.</returns>
        </member>
        <member name="M:AF.ECT.Server.Services.WorkflowServiceImpl.UpdateWorkstatus(AF.ECT.Shared.UpdateWorkstatusRequest,Grpc.Core.ServerCallContext)">
            <summary>
            Handles the UpdateWorkstatus gRPC request.
            </summary>
            <param name="request">The request containing workstatus update parameters.</param>
            <param name="context">The server call context for the gRPC operation.</param>
            <returns>A task representing the asynchronous operation, containing the workstatus update Response.</returns>
        </member>
    </members>
</doc>
