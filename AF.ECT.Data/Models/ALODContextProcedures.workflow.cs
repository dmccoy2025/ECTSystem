// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable enable
#pragma warning disable CS8604 // Possible null reference argument
using Microsoft.Data.SqlClient;
using System.Data;
using System.Threading;
using AF.ECT.Data.Extensions;
using AF.ECT.Data.Interfaces;
using AF.ECT.Data.ResultTypes;

namespace AF.ECT.Data.Models
{
    /// <summary>
    /// Implementation of stored procedure operations for the ALOD context, providing methods to execute various database stored procedures.
    /// </summary>
    public partial class ALODContextProcedures : IALODContextProcedures
    {
        private readonly ALODContext _context;

        /// <summary>
        /// Initializes a new instance of the <see cref="ALODContextProcedures"/> class.
        /// </summary>
        /// <param name="context">The database context instance.</param>
        /// <exception cref="ArgumentNullException">Thrown when <paramref name="context"/> is null.</exception>
        public ALODContextProcedures(ALODContext context)
        {
            _context = context ?? throw new ArgumentNullException(nameof(context));
        }

        #region OptionActions

        /// <summary>
        /// Deletes an option action by its ID.
        /// </summary>
        /// <param name="wsaid">The ID of the option action to delete.</param>
        /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
        /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
        /// <returns>The number of affected rows.</returns>
        /// <remarks>This method executes the stored procedure [dbo].[core_actions_sp_DeleteOptionAction].</remarks>
        public virtual async Task<int> core_actions_sp_DeleteOptionActionAsync(int? wsaid, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "wsaid",
                    Value = wsaid ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_actions_sp_DeleteOptionAction] @wsaid = @wsaid", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        #endregion

        #region Core Workflow Methods

        public virtual async Task<List<core_workflow_sp_AddSignatureResult>> core_workflow_sp_AddSignatureAsync(int? refId, int? moduleType, int? userId, int? actionId, byte? groupId, byte? statusIn, byte? statusOut, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "moduleType",
                    Value = moduleType ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "actionId",
                    Value = actionId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "groupId",
                    Value = groupId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "statusIn",
                    Value = statusIn ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "statusOut",
                    Value = statusOut ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_workflow_sp_AddSignatureResult>("EXEC @returnValue = [dbo].[core_workflow_sp_AddSignature] @refId = @refId, @moduleType = @moduleType, @userId = @userId, @actionId = @actionId, @groupId = @groupId, @statusIn = @statusIn, @statusOut = @statusOut", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> core_workflow_sp_CopyActionsAsync(int? dest_wsoid, int? src_wsoid, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "dest_wsoid",
                    Value = dest_wsoid ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "src_wsoid",
                    Value = src_wsoid ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_workflow_sp_CopyActions] @dest_wsoid = @dest_wsoid, @src_wsoid = @src_wsoid", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> core_workflow_sp_CopyRulesAsync(int? dest_wsoid, int? src_wsoid, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "dest_wsoid",
                    Value = dest_wsoid ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "src_wsoid",
                    Value = src_wsoid ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_workflow_sp_CopyRules] @dest_wsoid = @dest_wsoid, @src_wsoid = @src_wsoid", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<core_workflow_sp_CopyWorkflowResult>> core_workflow_sp_CopyWorkflowAsync(int? fromId, int? toId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "fromId",
                    Value = fromId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "toId",
                    Value = toId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_workflow_sp_CopyWorkflowResult>("EXEC @returnValue = [dbo].[core_workflow_sp_CopyWorkflow] @fromId = @fromId, @toId = @toId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> core_workflow_sp_DeleteStatusCodeAsync(int? statusId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "statusId",
                    Value = statusId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_workflow_sp_DeleteStatusCode] @statusId = @statusId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<core_workflow_sp_GetActionsByStepResult>> core_workflow_sp_GetActionsByStepAsync(int? stepId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "stepId",
                    Value = stepId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_workflow_sp_GetActionsByStepResult>("EXEC @returnValue = [dbo].[core_workflow_sp_GetActionsByStep] @stepId = @stepId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<core_workflow_sp_GetActiveCasesResult>> core_workflow_sp_GetActiveCasesAsync(int? refId, short? groupId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "groupId",
                    Value = groupId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_workflow_sp_GetActiveCasesResult>("EXEC @returnValue = [dbo].[core_workflow_sp_GetActiveCases] @refId = @refId, @groupId = @groupId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<core_workflow_sp_GetAllFindingByReasonOfResult>> core_workflow_sp_GetAllFindingByReasonOfAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_workflow_sp_GetAllFindingByReasonOfResult>("EXEC @returnValue = [dbo].[core_workflow_sp_GetAllFindingByReasonOf]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<core_workflow_sp_GetAllLocksResult>> core_workflow_sp_GetAllLocksAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_workflow_sp_GetAllLocksResult>("EXEC @returnValue = [dbo].[core_workflow_sp_GetAllLocks]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<core_workflow_sp_GetCancelReasonsResult>> core_workflow_sp_GetCancelReasonsAsync(byte? workflowId, bool? isFormal, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "workflowId",
                    Value = workflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "isFormal",
                    Value = isFormal ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_workflow_sp_GetCancelReasonsResult>("EXEC @returnValue = [dbo].[core_workflow_sp_GetCancelReasons] @workflowId = @workflowId, @isFormal = @isFormal", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<core_workflow_sp_GetCreatableByGroupResult>> core_workflow_sp_GetCreatableByGroupAsync(string? compo, byte? module, byte? groupId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "compo",
                    Size = 1,
                    Value = compo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "module",
                    Value = module ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "groupId",
                    Value = groupId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_workflow_sp_GetCreatableByGroupResult>("EXEC @returnValue = [dbo].[core_workflow_sp_GetCreatableByGroup] @compo = @compo, @module = @module, @groupId = @groupId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<core_workflow_sp_GetFindingByReasonOfByIdResult>> core_workflow_sp_GetFindingByReasonOfByIdAsync(int? id, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_workflow_sp_GetFindingByReasonOfByIdResult>("EXEC @returnValue = [dbo].[core_workflow_sp_GetFindingByReasonOfById] @id = @id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<core_workflow_sp_GetFindingsResult>> core_workflow_sp_GetFindingsAsync(byte? workflowId, int? groupId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "workflowId",
                    Value = workflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "groupId",
                    Value = groupId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_workflow_sp_GetFindingsResult>("EXEC @returnValue = [dbo].[core_workflow_sp_GetFindings] @workflowId = @workflowId, @groupId = @groupId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<core_workflow_sp_GetModuleFromWorkflowResult>> core_workflow_sp_GetModuleFromWorkflowAsync(int? workflowId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "workflowId",
                    Value = workflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_workflow_sp_GetModuleFromWorkflowResult>("EXEC @returnValue = [dbo].[core_workflow_sp_GetModuleFromWorkflow] @workflowId = @workflowId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<core_workflow_sp_GetPageAccessByGroupResult>> core_workflow_sp_GetPageAccessByGroupAsync(byte? workflow, int? status, byte? group, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "workflow",
                    Value = workflow ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Value = status ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "group",
                    Value = group ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_workflow_sp_GetPageAccessByGroupResult>("EXEC @returnValue = [dbo].[core_workflow_sp_GetPageAccessByGroup] @workflow = @workflow, @status = @status, @group = @group", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<core_workflow_sp_GetPageAccessByWorkflowViewResult>> core_workflow_sp_GetPageAccessByWorkflowViewAsync(string? compo, byte? workflow, int? status, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "compo",
                    Size = 1,
                    Value = compo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "workflow",
                    Value = workflow ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Value = status ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_workflow_sp_GetPageAccessByWorkflowViewResult>("EXEC @returnValue = [dbo].[core_workflow_sp_GetPageAccessByWorkflowView] @compo = @compo, @workflow = @workflow, @status = @status", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<core_workflow_sp_GetPagesByWorkflowIdResult>> core_workflow_sp_GetPagesByWorkflowIdAsync(int? workflowId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "workflowId",
                    Value = workflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_workflow_sp_GetPagesByWorkflowIdResult>("EXEC @returnValue = [dbo].[core_workflow_sp_GetPagesByWorkflowId] @workflowId = @workflowId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<core_Workflow_sp_GetPermissionsResult>> core_Workflow_sp_GetPermissionsAsync(byte? workflowId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "workflowId",
                    Value = workflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_Workflow_sp_GetPermissionsResult>("EXEC @returnValue = [dbo].[core_Workflow_sp_GetPermissions] @workflowId = @workflowId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<core_Workflow_sp_GetPermissionsByCompoResult>> core_Workflow_sp_GetPermissionsByCompoAsync(byte? workflowId, string? compo, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "workflowId",
                    Value = workflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "compo",
                    Size = 1,
                    Value = compo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_Workflow_sp_GetPermissionsByCompoResult>("EXEC @returnValue = [dbo].[core_Workflow_sp_GetPermissionsByCompo] @workflowId = @workflowId, @compo = @compo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<core_workflow_sp_GetReturnReasonsResult>> core_workflow_sp_GetReturnReasonsAsync(byte? workflowId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "workflowId",
                    Value = workflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_workflow_sp_GetReturnReasonsResult>("EXEC @returnValue = [dbo].[core_workflow_sp_GetReturnReasons] @workflowId = @workflowId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<core_workflow_sp_GetRwoaReasonsResult>> core_workflow_sp_GetRwoaReasonsAsync(byte? workflowId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "workflowId",
                    Value = workflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_workflow_sp_GetRwoaReasonsResult>("EXEC @returnValue = [dbo].[core_workflow_sp_GetRwoaReasons] @workflowId = @workflowId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<core_workflow_sp_GetStatusCodesByCompoResult>> core_workflow_sp_GetStatusCodesByCompoAsync(string? compo, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "compo",
                    Size = 1,
                    Value = compo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_workflow_sp_GetStatusCodesByCompoResult>("EXEC @returnValue = [dbo].[core_workflow_sp_GetStatusCodesByCompo] @compo = @compo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<core_workflow_sp_GetStatusCodesByCompoAndModuleResult>> core_workflow_sp_GetStatusCodesByCompoAndModuleAsync(string? compo, byte? module, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "compo",
                    Size = 1,
                    Value = compo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "module",
                    Value = module ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_workflow_sp_GetStatusCodesByCompoAndModuleResult>("EXEC @returnValue = [dbo].[core_workflow_sp_GetStatusCodesByCompoAndModule] @compo = @compo, @module = @module", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<core_workflow_sp_GetStatusCodesBySignCodeResult>> core_workflow_sp_GetStatusCodesBySignCodeAsync(short? groupId, byte? module, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "groupId",
                    Value = groupId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "module",
                    Value = module ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_workflow_sp_GetStatusCodesBySignCodeResult>("EXEC @returnValue = [dbo].[core_workflow_sp_GetStatusCodesBySignCode] @groupId = @groupId, @module = @module", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<core_workflow_sp_GetStatusCodesByWorkflowResult>> core_workflow_sp_GetStatusCodesByWorkflowAsync(byte? workflowId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "workflowId",
                    Value = workflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_workflow_sp_GetStatusCodesByWorkflowResult>("EXEC @returnValue = [dbo].[core_workflow_sp_GetStatusCodesByWorkflow] @workflowId = @workflowId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<core_workflow_sp_GetStatusCodesByWorkflowAndAccessScopeResult>> core_workflow_sp_GetStatusCodesByWorkflowAndAccessScopeAsync(byte? workflowId, byte? accessScope, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "workflowId",
                    Value = workflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "accessScope",
                    Value = accessScope ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_workflow_sp_GetStatusCodesByWorkflowAndAccessScopeResult>("EXEC @returnValue = [dbo].[core_workflow_sp_GetStatusCodesByWorkflowAndAccessScope] @workflowId = @workflowId, @accessScope = @accessScope", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<core_workflow_sp_GetStatusCodeScopeResult>> core_workflow_sp_GetStatusCodeScopeAsync(byte? statusID, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "statusID",
                    Value = statusID ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_workflow_sp_GetStatusCodeScopeResult>("EXEC @returnValue = [dbo].[core_workflow_sp_GetStatusCodeScope] @statusID = @statusID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<core_workflow_sp_GetStepsByWorkflowResult>> core_workflow_sp_GetStepsByWorkflowAsync(byte? workflow, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "workflow",
                    Value = workflow ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_workflow_sp_GetStepsByWorkflowResult>("EXEC @returnValue = [dbo].[core_workflow_sp_GetStepsByWorkflow] @workflow = @workflow", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<core_workflow_sp_GetStepsByWorkflowAndStatusResult>> core_workflow_sp_GetStepsByWorkflowAndStatusAsync(byte? workflow, byte? status, string? deathStatus, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "workflow",
                    Value = workflow ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Value = status ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "deathStatus",
                    Size = 1,
                    Value = deathStatus ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_workflow_sp_GetStepsByWorkflowAndStatusResult>("EXEC @returnValue = [dbo].[core_workflow_sp_GetStepsByWorkflowAndStatus] @workflow = @workflow, @status = @status, @deathStatus = @deathStatus", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<core_workflow_sp_GetViewableByGroupResult>> core_workflow_sp_GetViewableByGroupAsync(byte? groupId, byte? module, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "groupId",
                    Value = groupId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "module",
                    Value = module ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_workflow_sp_GetViewableByGroupResult>("EXEC @returnValue = [dbo].[core_workflow_sp_GetViewableByGroup] @groupId = @groupId, @module = @module", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<core_workflow_sp_GetWorkflowByCompoResult>> core_workflow_sp_GetWorkflowByCompoAsync(string? compo, int? userId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "compo",
                    Size = 2,
                    Value = compo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_workflow_sp_GetWorkflowByCompoResult>("EXEC @returnValue = [dbo].[core_workflow_sp_GetWorkflowByCompo] @compo = @compo, @userId = @userId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<core_workflow_sp_GetWorkflowFromModuleResult>> core_workflow_sp_GetWorkflowFromModuleAsync(int? moduleId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "moduleId",
                    Value = moduleId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_workflow_sp_GetWorkflowFromModuleResult>("EXEC @returnValue = [dbo].[core_workflow_sp_GetWorkflowFromModule] @moduleId = @moduleId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<core_workflow_sp_GetWorkflowInitialStatusCodeResult>> core_workflow_sp_GetWorkflowInitialStatusCodeAsync(int? compo, int? module, int? workflowId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "compo",
                    Value = compo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "module",
                    Value = module ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "workflowId",
                    Value = workflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_workflow_sp_GetWorkflowInitialStatusCodeResult>("EXEC @returnValue = [dbo].[core_workflow_sp_GetWorkflowInitialStatusCode] @compo = @compo, @module = @module, @workflowId = @workflowId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<core_workflow_sp_GetWorkflowTitleResult>> core_workflow_sp_GetWorkflowTitleAsync(int? moduleId, int? subCase, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "moduleId",
                    Value = moduleId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "subCase",
                    Value = subCase ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_workflow_sp_GetWorkflowTitleResult>("EXEC @returnValue = [dbo].[core_workflow_sp_GetWorkflowTitle] @moduleId = @moduleId, @subCase = @subCase", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<core_workflow_sp_GetWorkflowTitleByWorkStatusIdResult>> core_workflow_sp_GetWorkflowTitleByWorkStatusIdAsync(int? workflowId, int? subCase, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "workflowId",
                    Value = workflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "subCase",
                    Value = subCase ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_workflow_sp_GetWorkflowTitleByWorkStatusIdResult>("EXEC @returnValue = [dbo].[core_workflow_sp_GetWorkflowTitleByWorkStatusId] @workflowId = @workflowId, @subCase = @subCase", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<core_workflow_sp_InsertActionResult>> core_workflow_sp_InsertActionAsync(byte? type, short? stepId, int? target, int? data, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "type",
                    Value = type ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "stepId",
                    Value = stepId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "target",
                    Value = target ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "data",
                    Value = data ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_workflow_sp_InsertActionResult>("EXEC @returnValue = [dbo].[core_workflow_sp_InsertAction] @type = @type, @stepId = @stepId, @target = @target, @data = @data", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<core_workflow_sp_InsertOptionActionResult>> core_workflow_sp_InsertOptionActionAsync(byte? type, int? wsoid, int? target, int? data, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "type",
                    Value = type ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "wsoid",
                    Value = wsoid ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "target",
                    Value = target ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "data",
                    Value = data ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_workflow_sp_InsertOptionActionResult>("EXEC @returnValue = [dbo].[core_workflow_sp_InsertOptionAction] @type = @type, @wsoid = @wsoid, @target = @target, @data = @data", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<core_workflow_sp_InsertStatusCodeResult>> core_workflow_sp_InsertStatusCodeAsync(string? description, bool? isFinal, bool? isApproved, bool? canAppeal, byte? groupId, byte? moduleId, string? compo, bool? isDisposition, bool? isFormal, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 50,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "isFinal",
                    Value = isFinal ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "isApproved",
                    Value = isApproved ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "canAppeal",
                    Value = canAppeal ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "groupId",
                    Value = groupId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "moduleId",
                    Value = moduleId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "compo",
                    Size = 1,
                    Value = compo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "isDisposition",
                    Value = isDisposition ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "isFormal",
                    Value = isFormal ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_workflow_sp_InsertStatusCodeResult>("EXEC @returnValue = [dbo].[core_workflow_sp_InsertStatusCode] @description = @description, @isFinal = @isFinal, @isApproved = @isApproved, @canAppeal = @canAppeal, @groupId = @groupId, @moduleId = @moduleId, @compo = @compo, @isDisposition = @isDisposition, @isFormal = @isFormal", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<core_workflow_sp_InsertStepResult>> core_workflow_sp_InsertStepAsync(byte? workflow, byte? statusIn, byte? statusOut, string? text, byte? stepType, bool? active, byte? displayOrder, byte? dbSign, string? deathStatus, byte? memoTemplate, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "workflow",
                    Value = workflow ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "statusIn",
                    Value = statusIn ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "statusOut",
                    Value = statusOut ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "text",
                    Size = 100,
                    Value = text ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "stepType",
                    Value = stepType ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "active",
                    Value = active ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "displayOrder",
                    Value = displayOrder ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "dbSign",
                    Value = dbSign ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "deathStatus",
                    Size = 1,
                    Value = deathStatus ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "memoTemplate",
                    Value = memoTemplate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_workflow_sp_InsertStepResult>("EXEC @returnValue = [dbo].[core_workflow_sp_InsertStep] @workflow = @workflow, @statusIn = @statusIn, @statusOut = @statusOut, @text = @text, @stepType = @stepType, @active = @active, @displayOrder = @displayOrder, @dbSign = @dbSign, @deathStatus = @deathStatus, @memoTemplate = @memoTemplate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<core_workflow_sp_InsertWorkflowResult>> core_workflow_sp_InsertWorkflowAsync(string? title, byte? module, string? compo, bool? formal, byte? initialStatus, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "title",
                    Size = 50,
                    Value = title ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "module",
                    Value = module ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "compo",
                    Size = 1,
                    Value = compo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "formal",
                    Value = formal ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "initialStatus",
                    Value = initialStatus ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_workflow_sp_InsertWorkflowResult>("EXEC @returnValue = [dbo].[core_workflow_sp_InsertWorkflow] @title = @title, @module = @module, @compo = @compo, @formal = @formal, @initialStatus = @initialStatus", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<core_workflow_sp_RemoveSignatureResult>> core_workflow_sp_RemoveSignatureAsync(int? refId, int? moduleType, byte? groupId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "moduleType",
                    Value = moduleType ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "groupId",
                    Value = groupId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_workflow_sp_RemoveSignatureResult>("EXEC @returnValue = [dbo].[core_workflow_sp_RemoveSignature] @refId = @refId, @moduleType = @moduleType, @groupId = @groupId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> core_workflow_sp_UpdatePageAccessAsync(string? compo, byte? workflow, int? status, string? xmlDocument, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "compo",
                    Size = 1,
                    Value = compo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "workflow",
                    Value = workflow ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Value = status ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "XmlDocument",
                    Value = xmlDocument ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_workflow_sp_UpdatePageAccess] @compo = @compo, @workflow = @workflow, @status = @status, @XmlDocument = @XmlDocument", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> core_workflow_sp_UpdatePermissionsAsync(short? workflowId, string? compo, string? xmlDocument, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "workflowId",
                    Value = workflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "compo",
                    Size = 1,
                    Value = compo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "XmlDocument",
                    Value = xmlDocument ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Text,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_workflow_sp_UpdatePermissions] @workflowId = @workflowId, @compo = @compo, @XmlDocument = @XmlDocument", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> core_workflow_sp_UpdateStatusCodeAsync(byte? statusId, string? description, bool? isFinal, bool? isApproved, bool? canAppeal, byte? groupId, byte? moduleId, byte? displayOrder, bool? isDisposition, bool? isFormal, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "statusId",
                    Value = statusId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 50,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "isFinal",
                    Value = isFinal ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "isApproved",
                    Value = isApproved ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "canAppeal",
                    Value = canAppeal ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "groupId",
                    Value = groupId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "moduleId",
                    Value = moduleId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "displayOrder",
                    Value = displayOrder ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "isDisposition",
                    Value = isDisposition ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "isFormal",
                    Value = isFormal ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_workflow_sp_UpdateStatusCode] @statusId = @statusId, @description = @description, @isFinal = @isFinal, @isApproved = @isApproved, @canAppeal = @canAppeal, @groupId = @groupId, @moduleId = @moduleId, @displayOrder = @displayOrder, @isDisposition = @isDisposition, @isFormal = @isFormal", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<core_workflow_sp_UpdateStepResult>> core_workflow_sp_UpdateStepAsync(short? stepId, byte? workflow, byte? statusIn, byte? statusOut, string? text, byte? stepType, bool? active, byte? displayOrder, byte? dbSign, string? deathStatus, byte? memoTemplate, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "stepId",
                    Value = stepId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "workflow",
                    Value = workflow ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "statusIn",
                    Value = statusIn ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "statusOut",
                    Value = statusOut ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "text",
                    Size = 100,
                    Value = text ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "stepType",
                    Value = stepType ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "active",
                    Value = active ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "displayOrder",
                    Value = displayOrder ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "dbSign",
                    Value = dbSign ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "deathStatus",
                    Size = 1,
                    Value = deathStatus ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "memoTemplate",
                    Value = memoTemplate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_workflow_sp_UpdateStepResult>("EXEC @returnValue = [dbo].[core_workflow_sp_UpdateStep] @stepId = @stepId, @workflow = @workflow, @statusIn = @statusIn, @statusOut = @statusOut, @text = @text, @stepType = @stepType, @active = @active, @displayOrder = @displayOrder, @dbSign = @dbSign, @deathStatus = @deathStatus, @memoTemplate = @memoTemplate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> core_workflow_sp_UpdateWorkflowAsync(byte? workflowId, string? title, byte? module, bool? isFormal, bool? active, int? status, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "workflowId",
                    Value = workflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "title",
                    Size = 50,
                    Value = title ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "module",
                    Value = module ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "isFormal",
                    Value = isFormal ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "active",
                    Value = active ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Value = status ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_workflow_sp_UpdateWorkflow] @workflowId = @workflowId, @title = @title, @module = @module, @isFormal = @isFormal, @active = @active, @status = @status", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> core_workflowView_sp_DeleteAsync(int? pageId, int? workflowId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pageId",
                    Value = pageId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "workflowId",
                    Value = workflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_workflowView_sp_Delete] @pageId = @pageId, @workflowId = @workflowId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<core_workflowView_sp_GetAllWorkflowResult>> core_workflowView_sp_GetAllWorkflowAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_workflowView_sp_GetAllWorkflowResult>("EXEC @returnValue = [dbo].[core_workflowView_sp_GetAllWorkflow]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> core_workflowView_sp_InsertAsync(int? pageId, int? workflowId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pageId",
                    Value = pageId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "workflowId",
                    Value = workflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_workflowView_sp_Insert] @pageId = @pageId, @workflowId = @workflowId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> core_workstatus_sp_DeleteOptionAsync(int? optionId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "optionId",
                    Value = optionId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_workstatus_sp_DeleteOption] @optionId = @optionId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<core_workstatus_sp_GetByWorkflowResult>> core_workstatus_sp_GetByWorkflowAsync(int? workflow, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "workflow",
                    Value = workflow ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_workstatus_sp_GetByWorkflowResult>("EXEC @returnValue = [dbo].[core_workstatus_sp_GetByWorkflow] @workflow = @workflow", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<core_workstatus_sp_GetOptionsByWorkflowResult>> core_workstatus_sp_GetOptionsByWorkflowAsync(int? workflow, int? compo, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "workflow",
                    Value = workflow ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "compo",
                    Value = compo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_workstatus_sp_GetOptionsByWorkflowResult>("EXEC @returnValue = [dbo].[core_workstatus_sp_GetOptionsByWorkflow] @workflow = @workflow, @compo = @compo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<core_workstatus_sp_GetOptionsByWorkflowAllResult>> core_workstatus_sp_GetOptionsByWorkflowAllAsync(int? workflow, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "workflow",
                    Value = workflow ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_workstatus_sp_GetOptionsByWorkflowAllResult>("EXEC @returnValue = [dbo].[core_workstatus_sp_GetOptionsByWorkflowAll] @workflow = @workflow", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<core_workstatus_sp_GetOptionsByWorkStatusResult>> core_workstatus_sp_GetOptionsByWorkStatusAsync(int? workstatus, int? compo, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "workstatus",
                    Value = workstatus ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "compo",
                    Value = compo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_workstatus_sp_GetOptionsByWorkStatusResult>("EXEC @returnValue = [dbo].[core_workstatus_sp_GetOptionsByWorkStatus] @workstatus = @workstatus, @compo = @compo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<core_workstatus_sp_GetWorkStatusDescriptionResult>> core_workstatus_sp_GetWorkStatusDescriptionAsync(int? workstatusId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "workstatusId",
                    Value = workstatusId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_workstatus_sp_GetWorkStatusDescriptionResult>("EXEC @returnValue = [dbo].[core_workstatus_sp_GetWorkStatusDescription] @workstatusId = @workstatusId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<core_workstatus_sp_InsertOptionResult>> core_workstatus_sp_InsertOptionAsync(int? optionId, int? workstatus, int? statusOut, string? text, bool? active, byte? sortOrder, byte? template, int? compo, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "optionId",
                    Value = optionId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "workstatus",
                    Value = workstatus ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "statusOut",
                    Value = statusOut ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "text",
                    Size = 100,
                    Value = text ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "active",
                    Value = active ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "template",
                    Value = template ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "compo",
                    Value = compo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_workstatus_sp_InsertOptionResult>("EXEC @returnValue = [dbo].[core_workstatus_sp_InsertOption] @optionId = @optionId, @workstatus = @workstatus, @statusOut = @statusOut, @text = @text, @active = @active, @sortOrder = @sortOrder, @template = @template, @compo = @compo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> core_workstatus_sp_InsertStatusAsync(int? workflow, int? status, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "workflow",
                    Value = workflow ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Value = status ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_workstatus_sp_InsertStatus] @workflow = @workflow, @status = @status", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> core_workstatus_sp_UpdateOrderAsync(int? ws_id, byte? sortOrder, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ws_id",
                    Value = ws_id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_workstatus_sp_UpdateOrder] @ws_id = @ws_id, @sortOrder = @sortOrder", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> CreateTempTablesAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[CreateTempTables]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DBSign_sp_GetTemplateByIdResult>> DBSign_sp_GetTemplateByIdAsync(int? id, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<DBSign_sp_GetTemplateByIdResult>("EXEC @returnValue = [dbo].[DBSign_sp_GetTemplateById] @id = @id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Debug_sp_InsertLogAsync(string? message, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "message",
                    Size = -1,
                    Value = message ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Debug_sp_InsertLog] @message = @message", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DeleteExpiredSessionsAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DeleteExpiredSessions]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<dev_sp_GetDevLoginsResult>> dev_sp_GetDevLoginsAsync(string? compo, int? unit, bool? board, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "compo",
                    Size = 1,
                    Value = compo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "unit",
                    Value = unit ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "board",
                    Value = board ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<dev_sp_GetDevLoginsResult>("EXEC @returnValue = [dbo].[dev_sp_GetDevLogins] @compo = @compo, @unit = @unit, @board = @board", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<dev_sp_GetUnitsResult>> dev_sp_GetUnitsAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<dev_sp_GetUnitsResult>("EXEC @returnValue = [dbo].[dev_sp_GetUnits]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<docs_GetCatsByViewResult>> docs_GetCatsByViewAsync(int? viewId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "viewId",
                    Value = viewId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<docs_GetCatsByViewResult>("EXEC @returnValue = [dbo].[docs_GetCatsByView] @viewId = @viewId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<docs_GetRedactedCatsByViewResult>> docs_GetRedactedCatsByViewAsync(int? viewId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "viewId",
                    Value = viewId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<docs_GetRedactedCatsByViewResult>("EXEC @returnValue = [dbo].[docs_GetRedactedCatsByView] @viewId = @viewId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Form261_sp_Investigation_IOAASelectAsync(int? lodid, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "lodid",
                    Value = lodid ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Form261_sp_Investigation_IOAASelect] @lodid = @lodid", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Form261_sp_Investigation_OtherPeronnelSelectResult>> Form261_sp_Investigation_OtherPeronnelSelectAsync(int? lodid, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "lodid",
                    Value = lodid ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<Form261_sp_Investigation_OtherPeronnelSelectResult>("EXEC @returnValue = [dbo].[Form261_sp_Investigation_OtherPeronnelSelect] @lodid = @lodid", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Form261_sp_Investigation_SelectResult>> Form261_sp_Investigation_SelectAsync(int? lodid, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "lodid",
                    Value = lodid ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<Form261_sp_Investigation_SelectResult>("EXEC @returnValue = [dbo].[Form261_sp_Investigation_Select] @lodid = @lodid", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Form261_sp_Investigation_UpdateResult>> Form261_sp_Investigation_UpdateAsync(int? lodId, DateTime? reportDate, byte? investigationOf, byte? status, string? inactiveDutyTraining, DateTime? durationStartDate, DateTime? durationFinishDate, DateTime? findingsDate, string? place, string? howSustained, string? medicalDiagnosis, string? presentForDuty, string? absentWithAuthority, string? intentionalMisconduct, string? mentallySound, string? remarks, byte? finding, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "lodId",
                    Value = lodId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reportDate",
                    Value = reportDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "investigationOf",
                    Value = investigationOf ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Value = status ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "inactiveDutyTraining",
                    Size = 20,
                    Value = inactiveDutyTraining ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NChar,
                },
                new SqlParameter
                {
                    ParameterName = "durationStartDate",
                    Value = durationStartDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "durationFinishDate",
                    Value = durationFinishDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "findingsDate",
                    Value = findingsDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "place",
                    Size = 50,
                    Value = place ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "howSustained",
                    Size = 100,
                    Value = howSustained ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "medicalDiagnosis",
                    Size = 100,
                    Value = medicalDiagnosis ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "presentForDuty",
                    Size = 1,
                    Value = presentForDuty ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "absentWithAuthority",
                    Size = 1,
                    Value = absentWithAuthority ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "intentionalMisconduct",
                    Size = 1,
                    Value = intentionalMisconduct ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "mentallySound",
                    Size = 1,
                    Value = mentallySound ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "remarks",
                    Size = 1000,
                    Value = remarks ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "finding",
                    Value = finding ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<Form261_sp_Investigation_UpdateResult>("EXEC @returnValue = [dbo].[Form261_sp_Investigation_Update] @lodId = @lodId, @reportDate = @reportDate, @investigationOf = @investigationOf, @status = @status, @inactiveDutyTraining = @inactiveDutyTraining, @durationStartDate = @durationStartDate, @durationFinishDate = @durationFinishDate, @findingsDate = @findingsDate, @place = @place, @howSustained = @howSustained, @medicalDiagnosis = @medicalDiagnosis, @presentForDuty = @presentForDuty, @absentWithAuthority = @absentWithAuthority, @intentionalMisconduct = @intentionalMisconduct, @mentallySound = @mentallySound, @remarks = @remarks, @finding = @finding", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Form261_sp_Investigation_UpdateOtherPeronnelAsync(int? lodId, string? in_Personnels, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "lodId",
                    Value = lodId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "in_Personnels",
                    Value = in_Personnels ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Xml,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Form261_sp_Investigation_UpdateOtherPeronnel] @lodId = @lodId, @in_Personnels = @in_Personnels", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<form348_AP_SARC_sp_SearchResult>> form348_AP_SARC_sp_SearchAsync(string? caseID, string? ssn, string? name, int? status, int? userId, byte? rptView, string? compo, int? maxCount, byte? moduleId, int? unitId, bool? overridescope, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "caseID",
                    Size = 50,
                    Value = caseID ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ssn",
                    Size = 9,
                    Value = ssn ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "name",
                    Size = 50,
                    Value = name ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Value = status ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rptView",
                    Value = rptView ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "compo",
                    Size = 10,
                    Value = compo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "maxCount",
                    Value = maxCount ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "moduleId",
                    Value = moduleId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "unitId",
                    Value = unitId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "overridescope",
                    Value = overridescope ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<form348_AP_SARC_sp_SearchResult>("EXEC @returnValue = [dbo].[form348_AP_SARC_sp_Search] @caseID = @caseID, @ssn = @ssn, @name = @name, @status = @status, @userId = @userId, @rptView = @rptView, @compo = @compo, @maxCount = @maxCount, @moduleId = @moduleId, @unitId = @unitId, @overridescope = @overridescope", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<form348_AP_sp_FullSearchResult>> form348_AP_sp_FullSearchAsync(string? caseID, string? ssn, string? lastName, string? firstName, string? middleName, int? status, int? userId, byte? rptView, string? compo, int? maxCount, byte? moduleId, int? unitId, bool? overridescope, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "caseID",
                    Size = 50,
                    Value = caseID ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ssn",
                    Size = 9,
                    Value = ssn ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lastName",
                    Size = 50,
                    Value = lastName ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "firstName",
                    Size = 50,
                    Value = firstName ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "middleName",
                    Size = 60,
                    Value = middleName ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Value = status ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rptView",
                    Value = rptView ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "compo",
                    Size = 10,
                    Value = compo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "maxCount",
                    Value = maxCount ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "moduleId",
                    Value = moduleId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "unitId",
                    Value = unitId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "overridescope",
                    Value = overridescope ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<form348_AP_sp_FullSearchResult>("EXEC @returnValue = [dbo].[form348_AP_sp_FullSearch] @caseID = @caseID, @ssn = @ssn, @lastName = @lastName, @firstName = @firstName, @middleName = @middleName, @status = @status, @userId = @userId, @rptView = @rptView, @compo = @compo, @maxCount = @maxCount, @moduleId = @moduleId, @unitId = @unitId, @overridescope = @overridescope", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<form348_AP_sp_SearchResult>> form348_AP_sp_SearchAsync(string? caseID, string? ssn, string? name, int? status, int? userId, byte? rptView, string? compo, int? maxCount, byte? moduleId, int? unitId, bool? overridescope, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "caseID",
                    Size = 50,
                    Value = caseID ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ssn",
                    Size = 9,
                    Value = ssn ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "name",
                    Size = 50,
                    Value = name ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Value = status ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rptView",
                    Value = rptView ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "compo",
                    Size = 10,
                    Value = compo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "maxCount",
                    Value = maxCount ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "moduleId",
                    Value = moduleId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "unitId",
                    Value = unitId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "overridescope",
                    Value = overridescope ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<form348_AP_sp_SearchResult>("EXEC @returnValue = [dbo].[form348_AP_sp_Search] @caseID = @caseID, @ssn = @ssn, @name = @name, @status = @status, @userId = @userId, @rptView = @rptView, @compo = @compo, @maxCount = @maxCount, @moduleId = @moduleId, @unitId = @unitId, @overridescope = @overridescope", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Form348_Audit_A1SaveAuditAsync(int? lodId, int? validate, bool? status, bool? orders, bool? epts, bool? idt, bool? pcars, bool? eightYear, string? other, int? lod, int? diagnosis, int? request, int? iOrA, int? iOrD, int? activites, int? determination, int? determinationNotCorrect, string? comment, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "lodId",
                    Value = lodId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "validate",
                    Value = validate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Value = status ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "orders",
                    Value = orders ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "epts",
                    Value = epts ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "idt",
                    Value = idt ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "pcars",
                    Value = pcars ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "eightYear",
                    Value = eightYear ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "other",
                    Size = 1000,
                    Value = other ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lod",
                    Value = lod ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "diagnosis",
                    Value = diagnosis ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "request",
                    Value = request ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iOrA",
                    Value = iOrA ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "iOrD",
                    Value = iOrD ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "activites",
                    Value = activites ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "determination",
                    Value = determination ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "determinationNotCorrect",
                    Value = determinationNotCorrect ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "comment",
                    Size = -1,
                    Value = comment ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Form348_Audit_A1SaveAudit] @lodId = @lodId, @validate = @validate, @status = @status, @orders = @orders, @epts = @epts, @idt = @idt, @pcars = @pcars, @eightYear = @eightYear, @other = @other, @lod = @lod, @diagnosis = @diagnosis, @request = @request, @iOrA = @iOrA, @iOrD = @iOrD, @activites = @activites, @determination = @determination, @determinationNotCorrect = @determinationNotCorrect, @comment = @comment", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Form348_Audit_CheckIfAuditInitiatedResult>> Form348_Audit_CheckIfAuditInitiatedAsync(int? lodId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "lodId",
                    Value = lodId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<Form348_Audit_CheckIfAuditInitiatedResult>("EXEC @returnValue = [dbo].[Form348_Audit_CheckIfAuditInitiated] @lodId = @lodId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Form348_Audit_GetAuditInfoResult>> Form348_Audit_GetAuditInfoAsync(int? lodId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "lodId",
                    Value = lodId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<Form348_Audit_GetAuditInfoResult>("EXEC @returnValue = [dbo].[Form348_Audit_GetAuditInfo] @lodId = @lodId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Form348_Audit_JASaveAuditAsync(int? lodId, short? legal, bool? standardOfProof, bool? deathAndMVA, bool? formalPolicy, bool? aFI, string? other, short? proof, short? standard, short? proofMet, short? evidence, short? misconduct, short? investigation, string? comment, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "lodId",
                    Value = lodId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "legal",
                    Value = legal ?? Convert.DBNull,
                    SqlDbType = SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "standardOfProof",
                    Value = standardOfProof ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "deathAndMVA",
                    Value = deathAndMVA ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "formalPolicy",
                    Value = formalPolicy ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "aFI",
                    Value = aFI ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "other",
                    Size = 1000,
                    Value = other ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "proof",
                    Value = proof ?? Convert.DBNull,
                    SqlDbType = SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "standard",
                    Value = standard ?? Convert.DBNull,
                    SqlDbType = SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "proofMet",
                    Value = proofMet ?? Convert.DBNull,
                    SqlDbType = SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "evidence",
                    Value = evidence ?? Convert.DBNull,
                    SqlDbType = SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "misconduct",
                    Value = misconduct ?? Convert.DBNull,
                    SqlDbType = SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "investigation",
                    Value = investigation ?? Convert.DBNull,
                    SqlDbType = SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "comment",
                    Size = -1,
                    Value = comment ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Form348_Audit_JASaveAudit] @lodId = @lodId, @legal = @legal, @standardOfProof = @standardOfProof, @deathAndMVA = @deathAndMVA, @formalPolicy = @formalPolicy, @aFI = @aFI, @other = @other, @proof = @proof, @standard = @standard, @proofMet = @proofMet, @evidence = @evidence, @misconduct = @misconduct, @investigation = @investigation, @comment = @comment", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Form348_Audit_SGSaveAuditAsync(int? lodId, short? appropriate, bool? dx, bool? isupport, bool? epts, bool? aggravation, bool? principle, string? other, short? proof, short? standard, short? proofMet, short? evidence, short? misconduct, short? investigation, string? comment, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "lodId",
                    Value = lodId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "appropriate",
                    Value = appropriate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "dx",
                    Value = dx ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Isupport",
                    Value = isupport ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "epts",
                    Value = epts ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "aggravation",
                    Value = aggravation ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "principle",
                    Value = principle ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "other",
                    Size = 1000,
                    Value = other ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "proof",
                    Value = proof ?? Convert.DBNull,
                    SqlDbType = SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "standard",
                    Value = standard ?? Convert.DBNull,
                    SqlDbType = SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "proofMet",
                    Value = proofMet ?? Convert.DBNull,
                    SqlDbType = SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "evidence",
                    Value = evidence ?? Convert.DBNull,
                    SqlDbType = SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "misconduct",
                    Value = misconduct ?? Convert.DBNull,
                    SqlDbType = SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "investigation",
                    Value = investigation ?? Convert.DBNull,
                    SqlDbType = SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "comment",
                    Size = -1,
                    Value = comment ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Form348_Audit_SGSaveAudit] @lodId = @lodId, @appropriate = @appropriate, @dx = @dx, @Isupport = @Isupport, @epts = @epts, @aggravation = @aggravation, @principle = @principle, @other = @other, @proof = @proof, @standard = @standard, @proofMet = @proofMet, @evidence = @evidence, @misconduct = @misconduct, @investigation = @investigation, @comment = @comment", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> form348_copyAsync(int? userId, int? oldId, int? newId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "oldId",
                    Value = oldId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "newId",
                    Value = newId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[form348_copy] @userId = @userId, @oldId = @oldId, @newId = @newId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<form348_GetInitialNextStepResult>> form348_GetInitialNextStepAsync(byte? module, int? refId, int? inStatus, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "module",
                    Value = module ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "inStatus",
                    Value = inStatus ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<form348_GetInitialNextStepResult>("EXEC @returnValue = [dbo].[form348_GetInitialNextStep] @module = @module, @refId = @refId, @inStatus = @inStatus", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<form348_RR_sp_FullSearchResult>> form348_RR_sp_FullSearchAsync(string? caseID, string? ssn, string? lastName, string? firstName, string? middleName, int? status, int? userId, byte? rptView, string? compo, int? maxCount, byte? moduleId, int? unitId, bool? overridescope, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "caseID",
                    Size = 50,
                    Value = caseID ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ssn",
                    Size = 9,
                    Value = ssn ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lastName",
                    Size = 50,
                    Value = lastName ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "firstName",
                    Size = 50,
                    Value = firstName ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "middleName",
                    Size = 60,
                    Value = middleName ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Value = status ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rptView",
                    Value = rptView ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "compo",
                    Size = 10,
                    Value = compo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "maxCount",
                    Value = maxCount ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "moduleId",
                    Value = moduleId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "unitId",
                    Value = unitId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "overridescope",
                    Value = overridescope ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<form348_RR_sp_FullSearchResult>("EXEC @returnValue = [dbo].[form348_RR_sp_FullSearch] @caseID = @caseID, @ssn = @ssn, @lastName = @lastName, @firstName = @firstName, @middleName = @middleName, @status = @status, @userId = @userId, @rptView = @rptView, @compo = @compo, @maxCount = @maxCount, @moduleId = @moduleId, @unitId = @unitId, @overridescope = @overridescope", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<form348_RR_sp_SearchResult>> form348_RR_sp_SearchAsync(string? caseID, string? ssn, string? name, int? status, int? userId, byte? rptView, string? compo, int? maxCount, byte? moduleId, int? unitId, bool? overridescope, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "caseID",
                    Size = 50,
                    Value = caseID ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ssn",
                    Size = 9,
                    Value = ssn ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "name",
                    Size = 50,
                    Value = name ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Value = status ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rptView",
                    Value = rptView ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "compo",
                    Size = 10,
                    Value = compo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "maxCount",
                    Value = maxCount ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "moduleId",
                    Value = moduleId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "unitId",
                    Value = unitId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "overridescope",
                    Value = overridescope ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<form348_RR_sp_SearchResult>("EXEC @returnValue = [dbo].[form348_RR_sp_Search] @caseID = @caseID, @ssn = @ssn, @name = @name, @status = @status, @userId = @userId, @rptView = @rptView, @compo = @compo, @maxCount = @maxCount, @moduleId = @moduleId, @unitId = @unitId, @overridescope = @overridescope", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<form348_SC_sp_FullSearchResult>> form348_SC_sp_FullSearchAsync(string? caseID, string? ssn, string? lastName, string? firstName, string? middleName, int? status, int? userId, byte? rptView, string? compo, int? maxCount, byte? moduleId, int? unitId, bool? sarcpermission, bool? overridescope, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "caseID",
                    Size = 50,
                    Value = caseID ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ssn",
                    Size = 9,
                    Value = ssn ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lastName",
                    Size = 50,
                    Value = lastName ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "firstName",
                    Size = 50,
                    Value = firstName ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "middleName",
                    Size = 60,
                    Value = middleName ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Value = status ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rptView",
                    Value = rptView ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "compo",
                    Size = 10,
                    Value = compo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "maxCount",
                    Value = maxCount ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "moduleId",
                    Value = moduleId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "unitId",
                    Value = unitId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sarcpermission",
                    Value = sarcpermission ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "overridescope",
                    Value = overridescope ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<form348_SC_sp_FullSearchResult>("EXEC @returnValue = [dbo].[form348_SC_sp_FullSearch] @caseID = @caseID, @ssn = @ssn, @lastName = @lastName, @firstName = @firstName, @middleName = @middleName, @status = @status, @userId = @userId, @rptView = @rptView, @compo = @compo, @maxCount = @maxCount, @moduleId = @moduleId, @unitId = @unitId, @sarcpermission = @sarcpermission, @overridescope = @overridescope", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Form348_SC_sp_GetHasReassessmentSCResult>> Form348_SC_sp_GetHasReassessmentSCAsync(int? refId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<Form348_SC_sp_GetHasReassessmentSCResult>("EXEC @returnValue = [dbo].[Form348_SC_sp_GetHasReassessmentSC] @refId = @refId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Form348_SC_sp_GetIsReassessmentSCResult>> Form348_SC_sp_GetIsReassessmentSCAsync(int? refId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<Form348_SC_sp_GetIsReassessmentSCResult>("EXEC @returnValue = [dbo].[Form348_SC_sp_GetIsReassessmentSC] @refId = @refId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<form348_SC_sp_GetMemberSpecialCaseHistoryResult>> form348_SC_sp_GetMemberSpecialCaseHistoryAsync(string? member_ssn, int? userId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "member_ssn",
                    Size = 12,
                    Value = member_ssn ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<form348_SC_sp_GetMemberSpecialCaseHistoryResult>("EXEC @returnValue = [dbo].[form348_SC_sp_GetMemberSpecialCaseHistory] @member_ssn = @member_ssn, @userId = @userId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Form348_SC_sp_GetPEPPTypesResult>> Form348_SC_sp_GetPEPPTypesAsync(int? refId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<Form348_SC_sp_GetPEPPTypesResult>("EXEC @returnValue = [dbo].[Form348_SC_sp_GetPEPPTypes] @refId = @refId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Form348_SC_sp_GetReassessmentCountResult>> Form348_SC_sp_GetReassessmentCountAsync(int? originalRefId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "originalRefId",
                    Value = originalRefId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<Form348_SC_sp_GetReassessmentCountResult>("EXEC @returnValue = [dbo].[Form348_SC_sp_GetReassessmentCount] @originalRefId = @originalRefId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Form348_SC_sp_GetReassessmentIdByOriginalIdResult>> Form348_SC_sp_GetReassessmentIdByOriginalIdAsync(int? originalRefId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "originalRefId",
                    Value = originalRefId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<Form348_SC_sp_GetReassessmentIdByOriginalIdResult>("EXEC @returnValue = [dbo].[Form348_SC_sp_GetReassessmentIdByOriginalId] @originalRefId = @originalRefId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<form348_SC_sp_GroupSearchResult>> form348_SC_sp_GroupSearchAsync(string? caseID, string? ssn, string? name, byte? status, int? userId, byte? rptView, string? compo, int? maxCount, byte? moduleId, int? unitId, bool? sarcpermission, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "caseID",
                    Size = 50,
                    Value = caseID ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ssn",
                    Size = 10,
                    Value = ssn ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "name",
                    Size = 10,
                    Value = name ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Value = status ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rptView",
                    Value = rptView ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "compo",
                    Size = 10,
                    Value = compo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "maxCount",
                    Value = maxCount ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "moduleId",
                    Value = moduleId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "unitId",
                    Value = unitId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sarcpermission",
                    Value = sarcpermission ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<form348_SC_sp_GroupSearchResult>("EXEC @returnValue = [dbo].[form348_SC_sp_GroupSearch] @caseID = @caseID, @ssn = @ssn, @name = @name, @status = @status, @userId = @userId, @rptView = @rptView, @compo = @compo, @maxCount = @maxCount, @moduleId = @moduleId, @unitId = @unitId, @sarcpermission = @sarcpermission", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<form348_SC_sp_PropertiesResult>> form348_SC_sp_PropertiesAsync(byte? moduleId, int? scId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "moduleId",
                    Value = moduleId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "scId",
                    Value = scId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<form348_SC_sp_PropertiesResult>("EXEC @returnValue = [dbo].[form348_SC_sp_Properties] @moduleId = @moduleId, @scId = @scId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<form348_SC_sp_ReassessRSResult>> form348_SC_sp_ReassessRSAsync(int? userId, int? originalRefId, string? newCaseId, int? workflowId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "originalRefId",
                    Value = originalRefId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "newCaseId",
                    Size = 50,
                    Value = newCaseId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "workflowId",
                    Value = workflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<form348_SC_sp_ReassessRSResult>("EXEC @returnValue = [dbo].[form348_SC_sp_ReassessRS] @userId = @userId, @originalRefId = @originalRefId, @newCaseId = @newCaseId, @workflowId = @workflowId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<form348_SC_sp_SearchResult>> form348_SC_sp_SearchAsync(string? caseID, string? ssn, string? name, int? status, int? userId, byte? rptView, string? compo, int? maxCount, byte? moduleId, int? unitId, bool? sarcpermission, bool? overridescope, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "caseID",
                    Size = 50,
                    Value = caseID ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ssn",
                    Size = 9,
                    Value = ssn ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "name",
                    Size = 50,
                    Value = name ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Value = status ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rptView",
                    Value = rptView ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "compo",
                    Size = 10,
                    Value = compo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "maxCount",
                    Value = maxCount ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "moduleId",
                    Value = moduleId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "unitId",
                    Value = unitId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sarcpermission",
                    Value = sarcpermission ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "overridescope",
                    Value = overridescope ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<form348_SC_sp_SearchResult>("EXEC @returnValue = [dbo].[form348_SC_sp_Search] @caseID = @caseID, @ssn = @ssn, @name = @name, @status = @status, @userId = @userId, @rptView = @rptView, @compo = @compo, @maxCount = @maxCount, @moduleId = @moduleId, @unitId = @unitId, @sarcpermission = @sarcpermission, @overridescope = @overridescope", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Form348_SC_sp_UpdatePEPPTypesAsync(int? refId, DataTable? peppTypeList, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "peppTypeList",
                    Value = peppTypeList ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Structured,
                    TypeName = "[dbo].[tblIntegerList]",
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Form348_SC_sp_UpdatePEPPTypes] @refId = @refId, @peppTypeList = @peppTypeList", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Form348_sp_AssignIoResult>> Form348_sp_AssignIoAsync(int? refId, int? ioUserId, int? aaUserId, bool? isFormal, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ioUserId",
                    Value = ioUserId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "aaUserId",
                    Value = aaUserId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "isFormal",
                    Value = isFormal ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<Form348_sp_AssignIoResult>("EXEC @returnValue = [dbo].[Form348_sp_AssignIo] @refId = @refId, @ioUserId = @ioUserId, @aaUserId = @aaUserId, @isFormal = @isFormal", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<form348_sp_CaseSearchResult>> form348_sp_CaseSearchAsync(string? ssn, int? userId, byte? rptView, string? compo, int? unitId, bool? sarcpermission, bool? includeDeleted, bool? overridescope, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ssn",
                    Size = 9,
                    Value = ssn ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rptView",
                    Value = rptView ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "compo",
                    Size = 10,
                    Value = compo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "unitId",
                    Value = unitId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sarcpermission",
                    Value = sarcpermission ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "includeDeleted",
                    Value = includeDeleted ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "overridescope",
                    Value = overridescope ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<form348_sp_CaseSearchResult>("EXEC @returnValue = [dbo].[form348_sp_CaseSearch] @ssn = @ssn, @userId = @userId, @rptView = @rptView, @compo = @compo, @unitId = @unitId, @sarcpermission = @sarcpermission, @includeDeleted = @includeDeleted, @overridescope = @overridescope", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<form348_sp_emailOverDueResult>> form348_sp_emailOverDueAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<form348_sp_emailOverDueResult>("EXEC @returnValue = [dbo].[form348_sp_emailOverDue]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<form348_sp_FullSearchResult>> form348_sp_FullSearchAsync(string? caseID, string? ssn, string? lastName, string? firstName, string? middleName, int? status, int? userId, byte? rptView, string? compo, int? maxCount, byte? moduleId, bool? isFormal, int? unitId, bool? sarcpermission, bool? includeDeleted, bool? overridescope, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "caseID",
                    Size = 16,
                    Value = caseID ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ssn",
                    Size = 9,
                    Value = ssn ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lastName",
                    Size = 50,
                    Value = lastName ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "firstName",
                    Size = 50,
                    Value = firstName ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "middleName",
                    Size = 60,
                    Value = middleName ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Value = status ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rptView",
                    Value = rptView ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "compo",
                    Size = 10,
                    Value = compo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "maxCount",
                    Value = maxCount ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "moduleId",
                    Value = moduleId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "isFormal",
                    Value = isFormal ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "unitId",
                    Value = unitId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sarcpermission",
                    Value = sarcpermission ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "includeDeleted",
                    Value = includeDeleted ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "overridescope",
                    Value = overridescope ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<form348_sp_FullSearchResult>("EXEC @returnValue = [dbo].[form348_sp_FullSearch] @caseID = @caseID, @ssn = @ssn, @lastName = @lastName, @firstName = @firstName, @middleName = @middleName, @status = @status, @userId = @userId, @rptView = @rptView, @compo = @compo, @maxCount = @maxCount, @moduleId = @moduleId, @isFormal = @isFormal, @unitId = @unitId, @sarcpermission = @sarcpermission, @includeDeleted = @includeDeleted, @overridescope = @overridescope", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<form348_sp_GetInProgressReinvestigationCountResult>> form348_sp_GetInProgressReinvestigationCountAsync(int? lodId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "LodId",
                    Value = lodId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<form348_sp_GetInProgressReinvestigationCountResult>("EXEC @returnValue = [dbo].[form348_sp_GetInProgressReinvestigationCount] @LodId = @LodId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Form348_sp_GetIolistResult>> Form348_sp_GetIolistAsync(int? userId, byte? rptView, int? caseMemberGradeCode, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rptView",
                    Value = rptView ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "caseMemberGradeCode",
                    Value = caseMemberGradeCode ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<Form348_sp_GetIolistResult>("EXEC @returnValue = [dbo].[Form348_sp_GetIolist] @userId = @userId, @rptView = @rptView, @caseMemberGradeCode = @caseMemberGradeCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<form348_sp_GetLODPMResult>> form348_sp_GetLODPMAsync(int? member_unit_id, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Member_unit_id",
                    Value = member_unit_id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<form348_sp_GetLODPMResult>("EXEC @returnValue = [dbo].[form348_sp_GetLODPM] @Member_unit_id = @Member_unit_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<form348_sp_GetLodsBySMResult>> form348_sp_GetLodsBySMAsync(string? ssn, bool? sarcpermission, bool? includeDeleted, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ssn",
                    Size = 9,
                    Value = ssn ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "sarcpermission",
                    Value = sarcpermission ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "includeDeleted",
                    Value = includeDeleted ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<form348_sp_GetLodsBySMResult>("EXEC @returnValue = [dbo].[form348_sp_GetLodsBySM] @ssn = @ssn, @sarcpermission = @sarcpermission, @includeDeleted = @includeDeleted", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<form348_sp_GetReinvestigationResult>> form348_sp_GetReinvestigationAsync(int? lodId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "LodId",
                    Value = lodId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<form348_sp_GetReinvestigationResult>("EXEC @returnValue = [dbo].[form348_sp_GetReinvestigation] @LodId = @LodId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<form348_sp_GetReinvestigationByInitLODResult>> form348_sp_GetReinvestigationByInitLODAsync(int? lodId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "LodId",
                    Value = lodId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<form348_sp_GetReinvestigationByInitLODResult>("EXEC @returnValue = [dbo].[form348_sp_GetReinvestigationByInitLOD] @LodId = @LodId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<form348_sp_GetWingSARCResult>> form348_sp_GetWingSARCAsync(int? member_unit_id, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Member_unit_id",
                    Value = member_unit_id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<form348_sp_GetWingSARCResult>("EXEC @returnValue = [dbo].[form348_sp_GetWingSARC] @Member_unit_id = @Member_unit_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<form348_sp_GroupSearchResult>> form348_sp_GroupSearchAsync(string? caseID, string? ssn, string? name, int? status, int? userId, byte? rptView, string? compo, int? maxCount, byte? moduleId, bool? isFormal, int? unitId, bool? sarcpermission, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "caseID",
                    Size = 50,
                    Value = caseID ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ssn",
                    Size = 10,
                    Value = ssn ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "name",
                    Size = 10,
                    Value = name ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Value = status ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rptView",
                    Value = rptView ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "compo",
                    Size = 10,
                    Value = compo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "maxCount",
                    Value = maxCount ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "moduleId",
                    Value = moduleId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "isFormal",
                    Value = isFormal ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "unitId",
                    Value = unitId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sarcpermission",
                    Value = sarcpermission ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<form348_sp_GroupSearchResult>("EXEC @returnValue = [dbo].[form348_sp_GroupSearch] @caseID = @caseID, @ssn = @ssn, @name = @name, @status = @status, @userId = @userId, @rptView = @rptView, @compo = @compo, @maxCount = @maxCount, @moduleId = @moduleId, @isFormal = @isFormal, @unitId = @unitId, @sarcpermission = @sarcpermission", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<form348_sp_GroupSearch_FullSearchResult>> form348_sp_GroupSearch_FullSearchAsync(string? caseID, string? ssn, string? lastName, string? firstName, string? middleName, int? status, int? userId, byte? rptView, string? compo, int? maxCount, byte? moduleId, bool? isFormal, int? unitId, bool? sarcpermission, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "caseID",
                    Size = 50,
                    Value = caseID ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ssn",
                    Size = 10,
                    Value = ssn ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lastName",
                    Size = 50,
                    Value = lastName ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "firstName",
                    Size = 50,
                    Value = firstName ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "middleName",
                    Size = 60,
                    Value = middleName ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Value = status ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rptView",
                    Value = rptView ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "compo",
                    Size = 10,
                    Value = compo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "maxCount",
                    Value = maxCount ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "moduleId",
                    Value = moduleId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "isFormal",
                    Value = isFormal ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "unitId",
                    Value = unitId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sarcpermission",
                    Value = sarcpermission ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<form348_sp_GroupSearch_FullSearchResult>("EXEC @returnValue = [dbo].[form348_sp_GroupSearch_FullSearch] @caseID = @caseID, @ssn = @ssn, @lastName = @lastName, @firstName = @firstName, @middleName = @middleName, @status = @status, @userId = @userId, @rptView = @rptView, @compo = @compo, @maxCount = @maxCount, @moduleId = @moduleId, @isFormal = @isFormal, @unitId = @unitId, @sarcpermission = @sarcpermission", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<form348_sp_GroupSearch_rayResult>> form348_sp_GroupSearch_rayAsync(string? caseID, string? ssn, string? name, int? status, int? userId, byte? rptView, string? compo, int? maxCount, byte? moduleId, bool? isFormal, int? unitId, bool? sarcpermission, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "caseID",
                    Size = 50,
                    Value = caseID ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ssn",
                    Size = 10,
                    Value = ssn ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "name",
                    Size = 10,
                    Value = name ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Value = status ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rptView",
                    Value = rptView ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "compo",
                    Size = 10,
                    Value = compo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "maxCount",
                    Value = maxCount ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "moduleId",
                    Value = moduleId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "isFormal",
                    Value = isFormal ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "unitId",
                    Value = unitId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sarcpermission",
                    Value = sarcpermission ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<form348_sp_GroupSearch_rayResult>("EXEC @returnValue = [dbo].[form348_sp_GroupSearch_ray] @caseID = @caseID, @ssn = @ssn, @name = @name, @status = @status, @userId = @userId, @rptView = @rptView, @compo = @compo, @maxCount = @maxCount, @moduleId = @moduleId, @isFormal = @isFormal, @unitId = @unitId, @sarcpermission = @sarcpermission", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<form348_sp_GroupSearch_SARC_LegacyResult>> form348_sp_GroupSearch_SARC_LegacyAsync(string? caseID, string? ssn, string? name, int? status, int? userId, byte? rptView, string? compo, int? maxCount, byte? moduleId, bool? isFormal, int? unitId, bool? sarcpermission, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "caseID",
                    Size = 50,
                    Value = caseID ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ssn",
                    Size = 10,
                    Value = ssn ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "name",
                    Size = 10,
                    Value = name ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Value = status ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rptView",
                    Value = rptView ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "compo",
                    Size = 10,
                    Value = compo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "maxCount",
                    Value = maxCount ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "moduleId",
                    Value = moduleId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "isFormal",
                    Value = isFormal ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "unitId",
                    Value = unitId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sarcpermission",
                    Value = sarcpermission ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<form348_sp_GroupSearch_SARC_LegacyResult>("EXEC @returnValue = [dbo].[form348_sp_GroupSearch_SARC_Legacy] @caseID = @caseID, @ssn = @ssn, @name = @name, @status = @status, @userId = @userId, @rptView = @rptView, @compo = @compo, @maxCount = @maxCount, @moduleId = @moduleId, @isFormal = @isFormal, @unitId = @unitId, @sarcpermission = @sarcpermission", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<form348_sp_GroupSearch_SARC_LOD_V3Result>> form348_sp_GroupSearch_SARC_LOD_V3Async(string? caseID, string? ssn, string? name, int? status, int? userId, byte? rptView, string? compo, int? maxCount, byte? moduleId, bool? isFormal, int? unitId, bool? sarcpermission, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "caseID",
                    Size = 50,
                    Value = caseID ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ssn",
                    Size = 10,
                    Value = ssn ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "name",
                    Size = 10,
                    Value = name ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Value = status ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rptView",
                    Value = rptView ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "compo",
                    Size = 10,
                    Value = compo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "maxCount",
                    Value = maxCount ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "moduleId",
                    Value = moduleId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "isFormal",
                    Value = isFormal ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "unitId",
                    Value = unitId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sarcpermission",
                    Value = sarcpermission ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<form348_sp_GroupSearch_SARC_LOD_V3Result>("EXEC @returnValue = [dbo].[form348_sp_GroupSearch_SARC_LOD_V3] @caseID = @caseID, @ssn = @ssn, @name = @name, @status = @status, @userId = @userId, @rptView = @rptView, @compo = @compo, @maxCount = @maxCount, @moduleId = @moduleId, @isFormal = @isFormal, @unitId = @unitId, @sarcpermission = @sarcpermission", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<form348_sp_GroupSearchForLODV3Result>> form348_sp_GroupSearchForLODV3Async(string? caseID, string? ssn, string? name, int? status, int? userId, byte? rptView, string? compo, int? maxCount, byte? moduleId, bool? isFormal, int? unitId, bool? sarcpermission, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "caseID",
                    Size = 50,
                    Value = caseID ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ssn",
                    Size = 10,
                    Value = ssn ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "name",
                    Size = 10,
                    Value = name ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Value = status ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rptView",
                    Value = rptView ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "compo",
                    Size = 10,
                    Value = compo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "maxCount",
                    Value = maxCount ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "moduleId",
                    Value = moduleId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "isFormal",
                    Value = isFormal ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "unitId",
                    Value = unitId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sarcpermission",
                    Value = sarcpermission ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<form348_sp_GroupSearchForLODV3Result>("EXEC @returnValue = [dbo].[form348_sp_GroupSearchForLODV3] @caseID = @caseID, @ssn = @ssn, @name = @name, @status = @status, @userId = @userId, @rptView = @rptView, @compo = @compo, @maxCount = @maxCount, @moduleId = @moduleId, @isFormal = @isFormal, @unitId = @unitId, @sarcpermission = @sarcpermission", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<form348_sp_GroupSearchForLODV3_rayResult>> form348_sp_GroupSearchForLODV3_rayAsync(string? caseID, string? ssn, string? name, int? status, int? userId, byte? rptView, string? compo, int? maxCount, byte? moduleId, bool? isFormal, int? unitId, bool? sarcpermission, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "caseID",
                    Size = 50,
                    Value = caseID ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ssn",
                    Size = 10,
                    Value = ssn ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "name",
                    Size = 10,
                    Value = name ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Value = status ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rptView",
                    Value = rptView ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "compo",
                    Size = 10,
                    Value = compo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "maxCount",
                    Value = maxCount ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "moduleId",
                    Value = moduleId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "isFormal",
                    Value = isFormal ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "unitId",
                    Value = unitId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sarcpermission",
                    Value = sarcpermission ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<form348_sp_GroupSearchForLODV3_rayResult>("EXEC @returnValue = [dbo].[form348_sp_GroupSearchForLODV3_ray] @caseID = @caseID, @ssn = @ssn, @name = @name, @status = @status, @userId = @userId, @rptView = @rptView, @compo = @compo, @maxCount = @maxCount, @moduleId = @moduleId, @isFormal = @isFormal, @unitId = @unitId, @sarcpermission = @sarcpermission", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<form348_sp_InConsultCaseSearchResult>> form348_sp_InConsultCaseSearchAsync(int? wsId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "wsId",
                    Value = wsId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<form348_sp_InConsultCaseSearchResult>("EXEC @returnValue = [dbo].[form348_sp_InConsultCaseSearch] @wsId = @wsId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<form348_sp_InConsultCaseSearch_allResult>> form348_sp_InConsultCaseSearch_allAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<form348_sp_InConsultCaseSearch_allResult>("EXEC @returnValue = [dbo].[form348_sp_InConsultCaseSearch_all]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Form348_sp_InitiateIncapAppealResult>> Form348_sp_InitiateIncapAppealAsync(int? sc_Id, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "sc_Id",
                    Value = sc_Id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<Form348_sp_InitiateIncapAppealResult>("EXEC @returnValue = [dbo].[Form348_sp_InitiateIncapAppeal] @sc_Id = @sc_Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Form348_sp_InitiateIncapExtResult>> Form348_sp_InitiateIncapExtAsync(int? sc_Id, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "sc_Id",
                    Value = sc_Id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<Form348_sp_InitiateIncapExtResult>("EXEC @returnValue = [dbo].[Form348_sp_InitiateIncapExt] @sc_Id = @sc_Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Form348_sp_InitiateIncapFindingsAsync(int? sc_Id, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "sc_Id",
                    Value = sc_Id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Form348_sp_InitiateIncapFindings] @sc_Id = @sc_Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<form348_sp_InvestigatingOfficerGroupSearchForLODV3Result>> form348_sp_InvestigatingOfficerGroupSearchForLODV3Async(string? caseID, string? ssn, string? name, int? status, int? userId, byte? rptView, string? compo, int? maxCount, byte? moduleId, bool? isFormal, int? unitId, bool? sarcpermission, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "caseID",
                    Size = 50,
                    Value = caseID ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ssn",
                    Size = 10,
                    Value = ssn ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "name",
                    Size = 10,
                    Value = name ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Value = status ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rptView",
                    Value = rptView ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "compo",
                    Size = 10,
                    Value = compo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "maxCount",
                    Value = maxCount ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "moduleId",
                    Value = moduleId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "isFormal",
                    Value = isFormal ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "unitId",
                    Value = unitId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sarcpermission",
                    Value = sarcpermission ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<form348_sp_InvestigatingOfficerGroupSearchForLODV3Result>("EXEC @returnValue = [dbo].[form348_sp_InvestigatingOfficerGroupSearchForLODV3] @caseID = @caseID, @ssn = @ssn, @name = @name, @status = @status, @userId = @userId, @rptView = @rptView, @compo = @compo, @maxCount = @maxCount, @moduleId = @moduleId, @isFormal = @isFormal, @unitId = @unitId, @sarcpermission = @sarcpermission", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<form348_sp_MoveRandomCasesToAuditResult>> form348_sp_MoveRandomCasesToAuditAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<form348_sp_MoveRandomCasesToAuditResult>("EXEC @returnValue = [dbo].[form348_sp_MoveRandomCasesToAudit]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<form348_sp_PilotCaseSearchResult>> form348_sp_PilotCaseSearchAsync(int? wsId, int? compo, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "wsId",
                    Value = wsId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "compo",
                    Value = compo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<form348_sp_PilotCaseSearchResult>("EXEC @returnValue = [dbo].[form348_sp_PilotCaseSearch] @wsId = @wsId, @compo = @compo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<form348_sp_PostAppealCompletionSearchResult>> form348_sp_PostAppealCompletionSearchAsync(string? caseID, string? ssn, string? name, int? userId, byte? rptView, string? compo, int? maxCount, byte? moduleId, bool? isFormal, int? unitId, bool? sarcpermission, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "caseID",
                    Size = 50,
                    Value = caseID ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ssn",
                    Size = 10,
                    Value = ssn ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "name",
                    Size = 10,
                    Value = name ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rptView",
                    Value = rptView ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "compo",
                    Size = 10,
                    Value = compo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "maxCount",
                    Value = maxCount ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "moduleId",
                    Value = moduleId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "isFormal",
                    Value = isFormal ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "unitId",
                    Value = unitId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sarcpermission",
                    Value = sarcpermission ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<form348_sp_PostAppealCompletionSearchResult>("EXEC @returnValue = [dbo].[form348_sp_PostAppealCompletionSearch] @caseID = @caseID, @ssn = @ssn, @name = @name, @userId = @userId, @rptView = @rptView, @compo = @compo, @maxCount = @maxCount, @moduleId = @moduleId, @isFormal = @isFormal, @unitId = @unitId, @sarcpermission = @sarcpermission", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<form348_sp_PostCompletionSearchResult>> form348_sp_PostCompletionSearchAsync(string? caseID, string? ssn, string? name, int? userId, byte? rptView, string? compo, int? maxCount, byte? moduleId, bool? isFormal, int? unitId, bool? sarcpermission, bool? searchAllCases, int? wsId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "caseID",
                    Size = 50,
                    Value = caseID ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ssn",
                    Size = 10,
                    Value = ssn ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "name",
                    Size = 10,
                    Value = name ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rptView",
                    Value = rptView ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "compo",
                    Size = 10,
                    Value = compo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "maxCount",
                    Value = maxCount ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "moduleId",
                    Value = moduleId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "isFormal",
                    Value = isFormal ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "unitId",
                    Value = unitId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sarcpermission",
                    Value = sarcpermission ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "searchAllCases",
                    Value = searchAllCases ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "wsId",
                    Value = wsId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<form348_sp_PostCompletionSearchResult>("EXEC @returnValue = [dbo].[form348_sp_PostCompletionSearch] @caseID = @caseID, @ssn = @ssn, @name = @name, @userId = @userId, @rptView = @rptView, @compo = @compo, @maxCount = @maxCount, @moduleId = @moduleId, @isFormal = @isFormal, @unitId = @unitId, @sarcpermission = @sarcpermission, @searchAllCases = @searchAllCases, @wsId = @wsId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<form348_sp_ReinvestigateResult>> form348_sp_ReinvestigateAsync(int? userId, int? requestId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "requestId",
                    Value = requestId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<form348_sp_ReinvestigateResult>("EXEC @returnValue = [dbo].[form348_sp_Reinvestigate] @userId = @userId, @requestId = @requestId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Form348_sp_SaveAppAuthUserIdAsync(int? userId, int? lodId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "lodId",
                    Value = lodId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Form348_sp_SaveAppAuthUserId] @userId = @userId, @lodId = @lodId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<form348_sp_SearchResult>> form348_sp_SearchAsync(string? caseID, string? ssn, string? name, int? statusCode, int? userId, byte? rptView, string? compo, int? maxCount, byte? moduleId, bool? isFormal, int? unitId, bool? sarcpermission, bool? includeDeleted, bool? overridescope, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "caseID",
                    Size = 50,
                    Value = caseID ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ssn",
                    Size = 9,
                    Value = ssn ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "name",
                    Size = 50,
                    Value = name ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "statusCode",
                    Value = statusCode ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rptView",
                    Value = rptView ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "compo",
                    Size = 10,
                    Value = compo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "maxCount",
                    Value = maxCount ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "moduleId",
                    Value = moduleId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "isFormal",
                    Value = isFormal ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "unitId",
                    Value = unitId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sarcpermission",
                    Value = sarcpermission ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "includeDeleted",
                    Value = includeDeleted ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "overridescope",
                    Value = overridescope ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<form348_sp_SearchResult>("EXEC @returnValue = [dbo].[form348_sp_Search] @caseID = @caseID, @ssn = @ssn, @name = @name, @statusCode = @statusCode, @userId = @userId, @rptView = @rptView, @compo = @compo, @maxCount = @maxCount, @moduleId = @moduleId, @isFormal = @isFormal, @unitId = @unitId, @sarcpermission = @sarcpermission, @includeDeleted = @includeDeleted, @overridescope = @overridescope", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> form348_sp_UpdateAAUserIDAsync(int? refid, int? aaUserid, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "refid",
                    Value = refid ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "aaUserid",
                    Value = aaUserid ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[form348_sp_UpdateAAUserID] @refid = @refid, @aaUserid = @aaUserid", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetCompletedECTCases_dailyResult>> GetCompletedECTCases_dailyAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<GetCompletedECTCases_dailyResult>("EXEC @returnValue = [usp].[GetCompletedECTCases_daily]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetCustomerDemand_ECTResult>> GetCustomerDemand_ECTAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<GetCustomerDemand_ECTResult>("EXEC @returnValue = [usp].[GetCustomerDemand_ECT]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetECTCases_DailyResult>> GetECTCases_DailyAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<GetECTCases_DailyResult>("EXEC @returnValue = [usp].[GetECTCases_Daily]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetHashCodeResult>> GetHashCodeAsync(string? input, OutputParameter<int?> hash, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterhash = new SqlParameter
            {
                ParameterName = "hash",
                Direction = ParameterDirection.InputOutput,
                Value = hash?.Value ?? Convert.DBNull,
                SqlDbType = SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "input",
                    Size = 280,
                    Value = input ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterhash,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<GetHashCodeResult>("EXEC @returnValue = [dbo].[GetHashCode] @input = @input, @hash = @hash OUTPUT", sqlParameters, cancellationToken);

            hash?.SetValue(parameterhash.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetLastWeekECTCases_WeeklyResult>> GetLastWeekECTCases_WeeklyAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<GetLastWeekECTCases_WeeklyResult>("EXEC @returnValue = [usp].[GetLastWeekECTCases_Weekly]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> GetMajorVersionAsync(OutputParameter<int?> ver, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameter = new SqlParameter
            {
                ParameterName = "@ver",
                Direction = ParameterDirection.InputOutput,
                Value = ver?.Value ?? Convert.DBNull,
                SqlDbType = SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameter,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[GetMajorVersion] @@ver = @@ver OUTPUT", sqlParameters, cancellationToken);

            ver?.SetValue(parameter.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetMovingECTCasesResult>> GetMovingECTCasesAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<GetMovingECTCasesResult>("EXEC @returnValue = [usp].[GetMovingECTCases]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetMovingSGCasesResult>> GetMovingSGCasesAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<GetMovingSGCasesResult>("EXEC @returnValue = [usp].[GetMovingSGCases]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetNumbersInQueue_DailyResult>> GetNumbersInQueue_DailyAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<GetNumbersInQueue_DailyResult>("EXEC @returnValue = [usp].[GetNumbersInQueue_Daily]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetOpenCases_ECTResult>> GetOpenCases_ECTAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<GetOpenCases_ECTResult>("EXEC @returnValue = [usp].[GetOpenCases_ECT]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetPasCodesResult>> GetPasCodesAsync(string? type, int? cs_id, byte? rptView, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "type",
                    Size = 10,
                    Value = type ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cs_id",
                    Value = cs_id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rptView",
                    Value = rptView ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<GetPasCodesResult>("EXEC @returnValue = [dbo].[GetPasCodes] @type = @type, @cs_id = @cs_id, @rptView = @rptView", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetPassCodeListResult>> GetPassCodeListAsync(string? type, string? pascode, byte? rptView, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "type",
                    Size = 10,
                    Value = type ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pascode",
                    Size = 4,
                    Value = pascode ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "rptView",
                    Value = rptView ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<GetPassCodeListResult>("EXEC @returnValue = [dbo].[GetPassCodeList] @type = @type, @pascode = @pascode, @rptView = @rptView", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetSignedECTCasesByUserGroupResult>> GetSignedECTCasesByUserGroupAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<GetSignedECTCasesByUserGroupResult>("EXEC @returnValue = [usp].[GetSignedECTCasesByUserGroup]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetStatusOfCurrentWeek_SGCasesResult>> GetStatusOfCurrentWeek_SGCasesAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<GetStatusOfCurrentWeek_SGCasesResult>("EXEC @returnValue = [usp].[GetStatusOfCurrentWeek_SGCases]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> imp_BeginLODImportAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[imp_BeginLODImport]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<imp_BeginUserDataImportResult>> imp_BeginUserDataImportAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<imp_BeginUserDataImportResult>("EXEC @returnValue = [dbo].[imp_BeginUserDataImport]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> imp_create_userAsync(string? inputname, OutputParameter<int?> newId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameternewId = new SqlParameter
            {
                ParameterName = "newId",
                Direction = ParameterDirection.InputOutput,
                Value = newId?.Value ?? Convert.DBNull,
                SqlDbType = SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "inputname",
                    Size = 400,
                    Value = inputname ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                parameternewId,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[imp_create_user] @inputname = @inputname, @newId = @newId OUTPUT", sqlParameters, cancellationToken);

            newId?.SetValue(parameternewId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> imp_CreateLODMappingAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[imp_CreateLODMapping]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> imp_CreateUserRolesAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[imp_CreateUserRoles]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<imp_CreateUsersResult>> imp_CreateUsersAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<imp_CreateUsersResult>("EXEC @returnValue = [dbo].[imp_CreateUsers]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<imp_CreateUsers_backResult>> imp_CreateUsers_backAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<imp_CreateUsers_backResult>("EXEC @returnValue = [dbo].[imp_CreateUsers_back]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<imp_CreateUsers_back_2Result>> imp_CreateUsers_back_2Async(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<imp_CreateUsers_back_2Result>("EXEC @returnValue = [dbo].[imp_CreateUsers_back_2]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> imp_CreateUsers_printAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[imp_CreateUsers_print]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> imp_Importform261Async(int? lod_id, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "lod_id",
                    Value = lod_id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[imp_Importform261] @lod_id = @lod_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<imp_ImportLodsResult>> imp_ImportLodsAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<imp_ImportLodsResult>("EXEC @returnValue = [dbo].[imp_ImportLods]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> imp_ImportSigDatesAsync(int? lod_id, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "lod_id",
                    Value = lod_id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[imp_ImportSigDates ] @lod_id = @lod_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> imp_InsertErrorRecordAsync(int? err, string? updateType, string? storedproc, string? msg, int? lod_id, string? errMsg, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "err",
                    Value = err ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "updateType",
                    Size = 200,
                    Value = updateType ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "storedproc",
                    Size = 200,
                    Value = storedproc ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "msg",
                    Size = 200,
                    Value = msg ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lod_id",
                    Value = lod_id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "errMsg",
                    Size = 4000,
                    Value = errMsg ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[imp_InsertErrorRecord] @err = @err, @updateType = @updateType, @storedproc = @storedproc, @msg = @msg, @lod_id = @lod_id, @errMsg = @errMsg", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> imp_InsertFindingRecordAsync(int? new_lod_id, int? pType, int? lod_PERS_ID, int? lod_CreatedBy, string? lod_DECISION, string? lod_EXPLANATION, string? lod_NAME, string? lod_RANK, string? lod_GRADE, string? lod_UNIT, DateTime? lod_modified_date, string? lod_APPROVED_YN, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "new_lod_id",
                    Value = new_lod_id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pType",
                    Value = pType ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "lod_PERS_ID",
                    Value = lod_PERS_ID ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "lod_CreatedBy",
                    Value = lod_CreatedBy ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "lod_DECISION",
                    Size = 2000,
                    Value = lod_DECISION ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lod_EXPLANATION",
                    Size = -1,
                    Value = lod_EXPLANATION ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lod_NAME",
                    Size = 200,
                    Value = lod_NAME ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lod_RANK",
                    Size = 200,
                    Value = lod_RANK ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lod_GRADE",
                    Size = 200,
                    Value = lod_GRADE ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lod_UNIT",
                    Size = 200,
                    Value = lod_UNIT ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lod_modified_date",
                    Value = lod_modified_date ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "lod_APPROVED_YN",
                    Size = 5,
                    Value = lod_APPROVED_YN ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[imp_InsertFindingRecord] @new_lod_id = @new_lod_id, @pType = @pType, @lod_PERS_ID = @lod_PERS_ID, @lod_CreatedBy = @lod_CreatedBy, @lod_DECISION = @lod_DECISION, @lod_EXPLANATION = @lod_EXPLANATION, @lod_NAME = @lod_NAME, @lod_RANK = @lod_RANK, @lod_GRADE = @lod_GRADE, @lod_UNIT = @lod_UNIT, @lod_modified_date = @lod_modified_date, @lod_APPROVED_YN = @lod_APPROVED_YN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> imp_InsertFindingRecord_ForFinalDecisionAsync(int? new_lod_id, int? pType, int? lod_PERS_ID, byte? lod_findingId, string? lod_EXPLANATION, string? lod_NAME, string? lod_RANK, string? lod_GRADE, string? lod_UNIT, DateTime? lod_modified_date, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "new_lod_id",
                    Value = new_lod_id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pType",
                    Value = pType ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "lod_PERS_ID",
                    Value = lod_PERS_ID ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "lod_findingId",
                    Value = lod_findingId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "lod_EXPLANATION",
                    Size = -1,
                    Value = lod_EXPLANATION ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lod_NAME",
                    Size = 200,
                    Value = lod_NAME ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lod_RANK",
                    Size = 200,
                    Value = lod_RANK ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lod_GRADE",
                    Size = 200,
                    Value = lod_GRADE ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lod_UNIT",
                    Size = 200,
                    Value = lod_UNIT ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lod_modified_date",
                    Value = lod_modified_date ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[imp_InsertFindingRecord_ForFinalDecision] @new_lod_id = @new_lod_id, @pType = @pType, @lod_PERS_ID = @lod_PERS_ID, @lod_findingId = @lod_findingId, @lod_EXPLANATION = @lod_EXPLANATION, @lod_NAME = @lod_NAME, @lod_RANK = @lod_RANK, @lod_GRADE = @lod_GRADE, @lod_UNIT = @lod_UNIT, @lod_modified_date = @lod_modified_date", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> imp_OtherPersonalsAsync(int? lod_id, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "lod_id",
                    Value = lod_id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[imp_OtherPersonals] @lod_id = @lod_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> imp_ReplaceTildaAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[imp_ReplaceTilda]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> imp_RWOAAsync(int? lod_id, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "lod_id",
                    Value = lod_id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[imp_RWOA] @lod_id = @lod_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> imp_update_LODStatusAsync(int? lod_id, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "lod_id",
                    Value = lod_id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[imp_update_LODStatus] @lod_id = @lod_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> imp_updateCaseIdsAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[imp_updateCaseIds]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> imp_updateCoreStatusTrackingAsync(int? lod_id, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "lod_id",
                    Value = lod_id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[imp_updateCoreStatusTracking] @lod_id = @lod_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> imp_UpdatePersonTypesFindingsAsync(int? lod_id, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "lod_id",
                    Value = lod_id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[imp_UpdatePersonTypesFindings] @lod_id = @lod_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> import_finaldecisionAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[import_finaldecision]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> import_finalFindingsAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[import_finalFindings]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<lod_sp_AccessHeaderResult>> lod_sp_AccessHeaderAsync(int? lodid, string? chain_type, int? userId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "lodid",
                    Value = lodid ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "chain_type",
                    Size = 20,
                    Value = chain_type ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<lod_sp_AccessHeaderResult>("EXEC @returnValue = [dbo].[lod_sp_AccessHeader] @lodid = @lodid, @chain_type = @chain_type, @userId = @userId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<lod_sp_ChangeStatusResult>> lod_sp_ChangeStatusAsync(int? refId, byte? statusIn, byte? statusOut, int? userId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "statusIn",
                    Value = statusIn ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "statusOut",
                    Value = statusOut ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<lod_sp_ChangeStatusResult>("EXEC @returnValue = [dbo].[lod_sp_ChangeStatus] @refId = @refId, @statusIn = @statusIn, @statusOut = @statusOut, @userId = @userId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<lod_sp_ChangeToFormalResult>> lod_sp_ChangeToFormalAsync(int? refId, byte? statusIn, int? userId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "statusIn",
                    Value = statusIn ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<lod_sp_ChangeToFormalResult>("EXEC @returnValue = [dbo].[lod_sp_ChangeToFormal] @refId = @refId, @statusIn = @statusIn, @userId = @userId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<lod_sp_GetLastStatusResult>> lod_sp_GetLastStatusAsync(int? refId, byte? module, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "module",
                    Value = module ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<lod_sp_GetLastStatusResult>("EXEC @returnValue = [dbo].[lod_sp_GetLastStatus] @refId = @refId, @module = @module", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<lod_sp_GetNumberOfLessonsLearnedResult>> lod_sp_GetNumberOfLessonsLearnedAsync(int? refId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<lod_sp_GetNumberOfLessonsLearnedResult>("EXEC @returnValue = [dbo].[lod_sp_GetNumberOfLessonsLearned] @refId = @refId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<lod_sp_InitiateResult>> lod_sp_InitiateAsync(int? userId, byte? workflow, string? memberName, string? memberSSN, string? memberGrade, string? memberUnit, int? memberUnitId, DateTime? memberDoB, string? memberCompo, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "workflow",
                    Value = workflow ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "memberName",
                    Size = 200,
                    Value = memberName ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "memberSSN",
                    Size = 9,
                    Value = memberSSN ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "memberGrade",
                    Size = 8,
                    Value = memberGrade ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "memberUnit",
                    Size = 200,
                    Value = memberUnit ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "memberUnitId",
                    Value = memberUnitId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "memberDoB",
                    Value = memberDoB ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "memberCompo",
                    Size = 1,
                    Value = memberCompo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<lod_sp_InitiateResult>("EXEC @returnValue = [dbo].[lod_sp_Initiate] @userId = @userId, @workflow = @workflow, @memberName = @memberName, @memberSSN = @memberSSN, @memberGrade = @memberGrade, @memberUnit = @memberUnit, @memberUnitId = @memberUnitId, @memberDoB = @memberDoB, @memberCompo = @memberCompo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<lod_sp_InsertRWOAResult>> lod_sp_InsertRWOAAsync(int? refId, byte? wfId, byte? statusIn, byte? statusOut, string? sentTo, int? userId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "wfId",
                    Value = wfId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "statusIn",
                    Value = statusIn ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "statusOut",
                    Value = statusOut ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "sentTo",
                    Size = 100,
                    Value = sentTo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<lod_sp_InsertRWOAResult>("EXEC @returnValue = [dbo].[lod_sp_InsertRWOA] @refId = @refId, @wfId = @wfId, @statusIn = @statusIn, @statusOut = @statusOut, @sentTo = @sentTo, @userId = @userId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> lod_sp_updateGroupIdAsync(int? refId, int? groupId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "groupId",
                    Value = groupId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[lod_sp_updateGroupId] @refId = @refId, @groupId = @groupId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<lod_sp_UserHasAccessResult>> lod_sp_UserHasAccessAsync(int? userId, int? refId, int? moduleId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "moduleId",
                    Value = moduleId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<lod_sp_UserHasAccessResult>("EXEC @returnValue = [dbo].[lod_sp_UserHasAccess] @userId = @userId, @refId = @refId, @moduleId = @moduleId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<member_sp_findBySSNResult>> member_sp_findBySSNAsync(string? sSN, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SSN",
                    Size = 9,
                    Value = sSN ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<member_sp_findBySSNResult>("EXEC @returnValue = [dbo].[member_sp_findBySSN] @SSN = @SSN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<member_sp_GetMembersByNameResult>> member_sp_GetMembersByNameAsync(string? lastName, string? firstName, string? middleName, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "lastName",
                    Size = 50,
                    Value = lastName ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "firstName",
                    Size = 50,
                    Value = firstName ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "middleName",
                    Size = 60,
                    Value = middleName ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<member_sp_GetMembersByNameResult>("EXEC @returnValue = [dbo].[member_sp_GetMembersByName] @lastName = @lastName, @firstName = @firstName, @middleName = @middleName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<member_sp_GetMILPDSChangeHistoryBySSNResult>> member_sp_GetMILPDSChangeHistoryBySSNAsync(string? memberSSN, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "memberSSN",
                    Size = 11,
                    Value = memberSSN ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<member_sp_GetMILPDSChangeHistoryBySSNResult>("EXEC @returnValue = [dbo].[member_sp_GetMILPDSChangeHistoryBySSN] @memberSSN = @memberSSN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<member_sp_GetSystemAdminChangeHistoryBySSNResult>> member_sp_GetSystemAdminChangeHistoryBySSNAsync(string? memberSSN, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "memberSSN",
                    Size = 11,
                    Value = memberSSN ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<member_sp_GetSystemAdminChangeHistoryBySSNResult>("EXEC @returnValue = [dbo].[member_sp_GetSystemAdminChangeHistoryBySSN] @memberSSN = @memberSSN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> memberData_ImportAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[memberData_Import]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<memo_sp_AGRCertificationResult>> memo_sp_AGRCertificationAsync(int? refId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<memo_sp_AGRCertificationResult>("EXEC @returnValue = [dbo].[memo_sp_AGRCertification] @refId = @refId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<memo_sp_AppealRequestResult>> memo_sp_AppealRequestAsync(int? refId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<memo_sp_AppealRequestResult>("EXEC @returnValue = [dbo].[memo_sp_AppealRequest] @refId = @refId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<memo_sp_Appoint_IOResult>> memo_sp_Appoint_IOAsync(int? refId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<memo_sp_Appoint_IOResult>("EXEC @returnValue = [dbo].[memo_sp_Appoint_IO] @refId = @refId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<memo_sp_GetMemoTemplateIdResult>> memo_sp_GetMemoTemplateIdAsync(string? title, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "title",
                    Size = 100,
                    Value = title ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<memo_sp_GetMemoTemplateIdResult>("EXEC @returnValue = [dbo].[memo_sp_GetMemoTemplateId] @title = @title", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<memo_sp_GetPSCDMemoResult>> memo_sp_GetPSCDMemoAsync(int? refId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<memo_sp_GetPSCDMemoResult>("EXEC @returnValue = [dbo].[memo_sp_GetPSCDMemo] @refId = @refId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<memo_sp_IRILOResult>> memo_sp_IRILOAsync(int? refId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<memo_sp_IRILOResult>("EXEC @returnValue = [dbo].[memo_sp_IRILO] @refId = @refId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<memo_sp_Lod_DeterminationResult>> memo_sp_Lod_DeterminationAsync(int? refId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<memo_sp_Lod_DeterminationResult>("EXEC @returnValue = [dbo].[memo_sp_Lod_Determination] @refId = @refId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<memo_sp_Lod_Determination_DeathResult>> memo_sp_Lod_Determination_DeathAsync(int? refId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<memo_sp_Lod_Determination_DeathResult>("EXEC @returnValue = [dbo].[memo_sp_Lod_Determination_Death] @refId = @refId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<memo_sp_Lod_Determination_ILOD_DeathResult>> memo_sp_Lod_Determination_ILOD_DeathAsync(int? refId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<memo_sp_Lod_Determination_ILOD_DeathResult>("EXEC @returnValue = [dbo].[memo_sp_Lod_Determination_ILOD_Death] @refId = @refId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<memo_sp_Lod_Determination_NILOD_InformalResult>> memo_sp_Lod_Determination_NILOD_InformalAsync(int? refId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<memo_sp_Lod_Determination_NILOD_InformalResult>("EXEC @returnValue = [dbo].[memo_sp_Lod_Determination_NILOD_Informal] @refId = @refId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<memo_sp_Lod_Determination_NLODResult>> memo_sp_Lod_Determination_NLODAsync(int? refId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<memo_sp_Lod_Determination_NLODResult>("EXEC @returnValue = [dbo].[memo_sp_Lod_Determination_NLOD] @refId = @refId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<memo_sp_Medical_Evaluation_BoardResult>> memo_sp_Medical_Evaluation_BoardAsync(int? refId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<memo_sp_Medical_Evaluation_BoardResult>("EXEC @returnValue = [dbo].[memo_sp_Medical_Evaluation_Board] @refId = @refId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<memo_sp_NILOD_Determination_Death_InformalResult>> memo_sp_NILOD_Determination_Death_InformalAsync(int? refId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<memo_sp_NILOD_Determination_Death_InformalResult>("EXEC @returnValue = [dbo].[memo_sp_NILOD_Determination_Death_Informal] @refId = @refId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<memo_sp_ParticipationWaiverResult>> memo_sp_ParticipationWaiverAsync(int? refId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<memo_sp_ParticipationWaiverResult>("EXEC @returnValue = [dbo].[memo_sp_ParticipationWaiver] @refId = @refId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<memo_sp_PSC_DeterminationResult>> memo_sp_PSC_DeterminationAsync(int? refId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<memo_sp_PSC_DeterminationResult>("EXEC @returnValue = [dbo].[memo_sp_PSC_Determination] @refId = @refId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<memo_sp_RecruitingServicesResult>> memo_sp_RecruitingServicesAsync(int? refId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<memo_sp_RecruitingServicesResult>("EXEC @returnValue = [dbo].[memo_sp_RecruitingServices] @refId = @refId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<memo_sp_ReinvestigationRequestResult>> memo_sp_ReinvestigationRequestAsync(int? refId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<memo_sp_ReinvestigationRequestResult>("EXEC @returnValue = [dbo].[memo_sp_ReinvestigationRequest] @refId = @refId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<memo_sp_RetentionWaiverResult>> memo_sp_RetentionWaiverAsync(int? refId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<memo_sp_RetentionWaiverResult>("EXEC @returnValue = [dbo].[memo_sp_RetentionWaiver] @refId = @refId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<memo_sp_SARC_DeterminationResult>> memo_sp_SARC_DeterminationAsync(int? refId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<memo_sp_SARC_DeterminationResult>("EXEC @returnValue = [dbo].[memo_sp_SARC_Determination] @refId = @refId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<memo_sp_SARCAppealRequestResult>> memo_sp_SARCAppealRequestAsync(int? refId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<memo_sp_SARCAppealRequestResult>("EXEC @returnValue = [dbo].[memo_sp_SARCAppealRequest] @refId = @refId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<memo_sp_WorldWideDutyResult>> memo_sp_WorldWideDutyAsync(int? refId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<memo_sp_WorldWideDutyResult>("EXEC @returnValue = [dbo].[memo_sp_WorldWideDuty] @refId = @refId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<OverrideCase_GetAvailableStatusesResult>> OverrideCase_GetAvailableStatusesAsync(string? caseNumber, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CaseNumber",
                    Size = 50,
                    Value = caseNumber ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<OverrideCase_GetAvailableStatusesResult>("EXEC @returnValue = [dbo].[OverrideCase_GetAvailableStatuses] @CaseNumber = @CaseNumber", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<OverrideCase_GetAvailableStatusesRRResult>> OverrideCase_GetAvailableStatusesRRAsync(string? caseNumber, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CaseNumber",
                    Size = 50,
                    Value = caseNumber ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<OverrideCase_GetAvailableStatusesRRResult>("EXEC @returnValue = [dbo].[OverrideCase_GetAvailableStatusesRR] @CaseNumber = @CaseNumber", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<OverrideCase_SetToNewStatusResult>> OverrideCase_SetToNewStatusAsync(string? caseNumber, int? newStatus, int? userId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CaseNumber",
                    Size = 50,
                    Value = caseNumber ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "newStatus",
                    Value = newStatus ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<OverrideCase_SetToNewStatusResult>("EXEC @returnValue = [dbo].[OverrideCase_SetToNewStatus] @CaseNumber = @CaseNumber, @newStatus = @newStatus, @userId = @userId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<OverrideCase_SetToNewStatusRRResult>> OverrideCase_SetToNewStatusRRAsync(string? caseNumber, int? newStatus, int? userId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CaseNumber",
                    Size = 50,
                    Value = caseNumber ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "newStatus",
                    Value = newStatus ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<OverrideCase_SetToNewStatusRRResult>("EXEC @returnValue = [dbo].[OverrideCase_SetToNewStatusRR] @CaseNumber = @CaseNumber, @newStatus = @newStatus, @userId = @userId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> pascode_importAsync(int? logId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "logId",
                    Value = logId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[pascode_import] @logId = @logId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Retrieves all PH field records from the database.
        /// </summary>
        /// <param name="returnValue">Output parameter that returns the stored procedure execution status.</param>
        /// <param name="cancellationToken">Optional cancellation token to cancel the operation.</param>
        /// <returns>A list of PH_Field_sp_GetAllResult objects containing all field records.</returns>
        /// <exception cref="OperationCanceledException">Thrown when the operation is cancelled via the cancellation token.</exception>
        /// <remarks>
        /// Executes the stored procedure [dbo].[PH_Field_sp_GetAll] to retrieve all field records.
        /// The return value indicates the success or failure of the operation.
        /// </remarks>
        public virtual async Task<List<PH_Field_sp_GetAllResult>> PH_Field_sp_GetAllAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<PH_Field_sp_GetAllResult>("EXEC @returnValue = [dbo].[PH_Field_sp_GetAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Retrieves a specific PH field record by its ID.
        /// </summary>
        /// <param name="id">The unique identifier of the field record to retrieve.</param>
        /// <param name="returnValue">Output parameter that returns the stored procedure execution status.</param>
        /// <param name="cancellationToken">Optional cancellation token to cancel the operation.</param>
        /// <returns>A list of PH_Field_sp_GetByIdResult objects containing the specified field record.</returns>
        /// <exception cref="OperationCanceledException">Thrown when the operation is cancelled via the cancellation token.</exception>
        /// <remarks>
        /// Executes the stored procedure [dbo].[PH_Field_sp_GetById] with the specified ID parameter.
        /// Returns an empty list if no record is found with the given ID.
        /// The return value indicates the success or failure of the operation.
        /// </remarks>
        public virtual async Task<List<PH_Field_sp_GetByIdResult>> PH_Field_sp_GetByIdAsync(int? id, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<PH_Field_sp_GetByIdResult>("EXEC @returnValue = [dbo].[PH_Field_sp_GetById] @id = @id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Inserts a new PH field record into the database.
        /// </summary>
        /// <param name="name">The name of the field to insert (maximum 200 characters).</param>
        /// <param name="returnValue">Output parameter that returns the stored procedure execution status.</param>
        /// <param name="cancellationToken">Optional cancellation token to cancel the operation.</param>
        /// <returns>The number of rows affected by the insert operation.</returns>
        /// <exception cref="OperationCanceledException">Thrown when the operation is cancelled via the cancellation token.</exception>
        /// <remarks>
        /// Executes the stored procedure [dbo].[PH_Field_sp_Insert] to create a new field record.
        /// The name parameter is required and must not exceed 200 characters.
        /// The return value indicates the success or failure of the operation.
        /// </remarks>
        public virtual async Task<int> PH_Field_sp_InsertAsync(string? name, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "name",
                    Size = 200,
                    Value = name ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[PH_Field_sp_Insert] @name = @name", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Updates an existing PH field record in the database.
        /// </summary>
        /// <param name="id">The unique identifier of the field record to update.</param>
        /// <param name="name">The new name for the field (maximum 200 characters).</param>
        /// <param name="returnValue">Output parameter that returns the stored procedure execution status.</param>
        /// <param name="cancellationToken">Optional cancellation token to cancel the operation.</param>
        /// <returns>The number of rows affected by the update operation.</returns>
        /// <exception cref="OperationCanceledException">Thrown when the operation is cancelled via the cancellation token.</exception>
        /// <remarks>
        /// Executes the stored procedure [dbo].[PH_Field_sp_Update] to modify an existing field record.
        /// Both id and name parameters are required. The name must not exceed 200 characters.
        /// The return value indicates the success or failure of the operation.
        /// </remarks>
        public virtual async Task<int> PH_Field_sp_UpdateAsync(int? id, string? name, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "name",
                    Size = 200,
                    Value = name ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[PH_Field_sp_Update] @id = @id, @name = @name", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Retrieves all PH field type records from the database.
        /// </summary>
        /// <param name="returnValue">Output parameter that returns the stored procedure execution status.</param>
        /// <param name="cancellationToken">Optional cancellation token to cancel the operation.</param>
        /// <returns>A list of PH_FieldType_sp_GetAllResult objects containing all field type records.</returns>
        /// <exception cref="OperationCanceledException">Thrown when the operation is cancelled via the cancellation token.</exception>
        /// <remarks>
        /// Executes the stored procedure [dbo].[PH_FieldType_sp_GetAll] to retrieve all field type records.
        /// The return value indicates the success or failure of the operation.
        /// </remarks>
        public virtual async Task<List<PH_FieldType_sp_GetAllResult>> PH_FieldType_sp_GetAllAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<PH_FieldType_sp_GetAllResult>("EXEC @returnValue = [dbo].[PH_FieldType_sp_GetAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Retrieves a specific PH field type record by its ID.
        /// </summary>
        /// <param name="id">The unique identifier of the field type record to retrieve.</param>
        /// <param name="returnValue">Output parameter that returns the stored procedure execution status.</param>
        /// <param name="cancellationToken">Optional cancellation token to cancel the operation.</param>
        /// <returns>A list of PH_FieldType_sp_GetByIdResult objects containing the specified field type record.</returns>
        /// <exception cref="OperationCanceledException">Thrown when the operation is cancelled via the cancellation token.</exception>
        /// <remarks>
        /// Executes the stored procedure [dbo].[PH_FieldType_sp_GetById] with the specified ID parameter.
        /// Returns an empty list if no record is found with the given ID.
        /// The return value indicates the success or failure of the operation.
        /// </remarks>
        public virtual async Task<List<PH_FieldType_sp_GetByIdResult>> PH_FieldType_sp_GetByIdAsync(int? id, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<PH_FieldType_sp_GetByIdResult>("EXEC @returnValue = [dbo].[PH_FieldType_sp_GetById] @id = @id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Inserts a new PH field type record into the database.
        /// </summary>
        /// <param name="name">The name of the field type (maximum 200 characters).</param>
        /// <param name="dataTypeId">The ID of the associated data type.</param>
        /// <param name="datasource">The datasource configuration for the field type (maximum 200 characters).</param>
        /// <param name="placeholder">The placeholder text for the field type (maximum 50 characters).</param>
        /// <param name="color">The color configuration for the field type (maximum 100 characters).</param>
        /// <param name="length">The maximum length constraint for the field type.</param>
        /// <param name="returnValue">Output parameter that returns the stored procedure execution status.</param>
        /// <param name="cancellationToken">Optional cancellation token to cancel the operation.</param>
        /// <returns>The number of rows affected by the insert operation.</returns>
        /// <exception cref="OperationCanceledException">Thrown when the operation is cancelled via the cancellation token.</exception>
        /// <remarks>
        /// Executes the stored procedure [dbo].[PH_FieldType_sp_Insert] to create a new field type record.
        /// The name parameter is required and must not exceed 200 characters.
        /// Other parameters are optional but provide additional configuration for the field type.
        /// The return value indicates the success or failure of the operation.
        /// </remarks>
        public virtual async Task<int> PH_FieldType_sp_InsertAsync(string? name, int? dataTypeId, string? datasource, string? placeholder, string? color, int? length, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "name",
                    Size = 200,
                    Value = name ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "dataTypeId",
                    Value = dataTypeId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "datasource",
                    Size = 200,
                    Value = datasource ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "placeholder",
                    Size = 50,
                    Value = placeholder ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "color",
                    Size = 100,
                    Value = color ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "length",
                    Value = length ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[PH_FieldType_sp_Insert] @name = @name, @dataTypeId = @dataTypeId, @datasource = @datasource, @placeholder = @placeholder, @color = @color, @length = @length", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Updates an existing PH field type record in the database.
        /// </summary>
        /// <param name="id">The unique identifier of the field type record to update.</param>
        /// <param name="name">The new name for the field type (maximum 200 characters).</param>
        /// <param name="dataTypeId">The new data type ID for the field type.</param>
        /// <param name="datasource">The new datasource configuration (maximum 200 characters).</param>
        /// <param name="placeholder">The new placeholder text (maximum 50 characters).</param>
        /// <param name="color">The new color configuration (maximum 100 characters).</param>
        /// <param name="length">The new maximum length constraint.</param>
        /// <param name="returnValue">Output parameter that returns the stored procedure execution status.</param>
        /// <param name="cancellationToken">Optional cancellation token to cancel the operation.</param>
        /// <returns>The number of rows affected by the update operation.</returns>
        /// <exception cref="OperationCanceledException">Thrown when the operation is cancelled via the cancellation token.</exception>
        /// <remarks>
        /// Executes the stored procedure [dbo].[PH_FieldType_sp_Update] to modify an existing field type record.
        /// The id parameter is required to identify the record to update.
        /// All other parameters are optional and will update their respective fields if provided.
        /// The return value indicates the success or failure of the operation.
        /// </remarks>
        public virtual async Task<int> PH_FieldType_sp_UpdateAsync(int? id, string? name, int? dataTypeId, string? datasource, string? placeholder, string? color, int? length, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "name",
                    Size = 200,
                    Value = name ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "dataTypeId",
                    Value = dataTypeId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "datasource",
                    Size = 200,
                    Value = datasource ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "placeholder",
                    Size = 50,
                    Value = placeholder ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "color",
                    Size = 100,
                    Value = color ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "length",
                    Value = length ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[PH_FieldType_sp_Update] @id = @id, @name = @name, @dataTypeId = @dataTypeId, @datasource = @datasource, @placeholder = @placeholder, @color = @color, @length = @length", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Deletes a PH form field record from the database.
        /// </summary>
        /// <param name="sectionId">The ID of the section containing the field.</param>
        /// <param name="fieldId">The ID of the field to delete.</param>
        /// <param name="fieldTypeId">The ID of the field type to delete.</param>
        /// <param name="returnValue">Output parameter that returns the stored procedure execution status.</param>
        /// <param name="cancellationToken">Optional cancellation token to cancel the operation.</param>
        /// <returns>The number of rows affected by the delete operation.</returns>
        /// <exception cref="OperationCanceledException">Thrown when the operation is cancelled via the cancellation token.</exception>
        /// <remarks>
        /// Executes the stored procedure [dbo].[PH_FormField_sp_Delete] to remove a form field record.
        /// All three ID parameters (sectionId, fieldId, fieldTypeId) are required to uniquely identify the record to delete.
        /// The return value indicates the success or failure of the operation.
        /// </remarks>
        public virtual async Task<int> PH_FormField_sp_DeleteAsync(int? sectionId, int? fieldId, int? fieldTypeId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "sectionId",
                    Value = sectionId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "fieldId",
                    Value = fieldId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "fieldTypeId",
                    Value = fieldTypeId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[PH_FormField_sp_Delete] @sectionId = @sectionId, @fieldId = @fieldId, @fieldTypeId = @fieldTypeId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Retrieves all PH form field records from the database.
        /// </summary>
        /// <param name="returnValue">Output parameter that returns the stored procedure execution status.</param>
        /// <param name="cancellationToken">Optional cancellation token to cancel the operation.</param>
        /// <returns>A list of PH_FormField_sp_GetAllResult objects containing all form field records.</returns>
        /// <exception cref="OperationCanceledException">Thrown when the operation is cancelled via the cancellation token.</exception>
        /// <remarks>
        /// Executes the stored procedure [dbo].[PH_FormField_sp_GetAll] to retrieve all form field records.
        /// This method returns comprehensive information about all form fields across all sections.
        /// The return value indicates the success or failure of the operation.
        /// </remarks>
        public virtual async Task<List<PH_FormField_sp_GetAllResult>> PH_FormField_sp_GetAllAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<PH_FormField_sp_GetAllResult>("EXEC @returnValue = [dbo].[PH_FormField_sp_GetAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Retrieves specific PH form field records by section, field, and field type IDs.
        /// </summary>
        /// <param name="sectionId">The ID of the section to filter by.</param>
        /// <param name="fieldId">The ID of the field to filter by.</param>
        /// <param name="fieldTypeId">The ID of the field type to filter by.</param>
        /// <param name="returnValue">Output parameter that returns the stored procedure execution status.</param>
        /// <param name="cancellationToken">Optional cancellation token to cancel the operation.</param>
        /// <returns>A list of PH_FormField_sp_GetByIdsResult objects matching the specified criteria.</returns>
        /// <exception cref="OperationCanceledException">Thrown when the operation is cancelled via the cancellation token.</exception>
        /// <remarks>
        /// Executes the stored procedure [dbo].[PH_FormField_sp_GetByIds] with the specified filter parameters.
        /// Use this method to retrieve form field records that match specific section, field, and field type combinations.
        /// Returns an empty list if no records match the specified criteria.
        /// The return value indicates the success or failure of the operation.
        /// </remarks>
        public virtual async Task<List<PH_FormField_sp_GetByIdsResult>> PH_FormField_sp_GetByIdsAsync(int? sectionId, int? fieldId, int? fieldTypeId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "sectionId",
                    Value = sectionId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "fieldId",
                    Value = fieldId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "fieldTypeId",
                    Value = fieldTypeId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<PH_FormField_sp_GetByIdsResult>("EXEC @returnValue = [dbo].[PH_FormField_sp_GetByIds] @sectionId = @sectionId, @fieldId = @fieldId, @fieldTypeId = @fieldTypeId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Retrieves field types associated with a specific section and field combination.
        /// </summary>
        /// <param name="sectionId">The ID of the section to query.</param>
        /// <param name="fieldId">The ID of the field to query.</param>
        /// <param name="returnValue">Output parameter that returns the stored procedure execution status.</param>
        /// <param name="cancellationToken">Optional cancellation token to cancel the operation.</param>
        /// <returns>A list of PH_FormField_sp_GetFieldTypesResult objects containing field type information.</returns>
        /// <exception cref="OperationCanceledException">Thrown when the operation is cancelled via the cancellation token.</exception>
        /// <remarks>
        /// Executes the stored procedure [dbo].[PH_FormField_sp_GetFieldTypes] to retrieve field types for a specific section and field.
        /// This method is useful for understanding what field types are available for a particular field within a section.
        /// Returns an empty list if no field types are found for the specified section and field combination.
        /// The return value indicates the success or failure of the operation.
        /// </remarks>
        public virtual async Task<List<PH_FormField_sp_GetFieldTypesResult>> PH_FormField_sp_GetFieldTypesAsync(int? sectionId, int? fieldId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "sectionId",
                    Value = sectionId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "fieldId",
                    Value = fieldId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<PH_FormField_sp_GetFieldTypesResult>("EXEC @returnValue = [dbo].[PH_FormField_sp_GetFieldTypes] @sectionId = @sectionId, @fieldId = @fieldId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Inserts a new PH form field record into the database.
        /// </summary>
        /// <param name="sectionId">The ID of the section where the field will be added.</param>
        /// <param name="fieldId">The ID of the field to be added.</param>
        /// <param name="fieldTypeId">The ID of the field type for the field.</param>
        /// <param name="fieldDisplayOrder">The display order for the field within the section.</param>
        /// <param name="fieldTypeDisplayOrder">The display order for the field type within the field.</param>
        /// <param name="toolTip">The tooltip text for the field (maximum 200 characters).</param>
        /// <param name="returnValue">Output parameter that returns the stored procedure execution status.</param>
        /// <param name="cancellationToken">Optional cancellation token to cancel the operation.</param>
        /// <returns>The number of rows affected by the insert operation.</returns>
        /// <exception cref="OperationCanceledException">Thrown when the operation is cancelled via the cancellation token.</exception>
        /// <remarks>
        /// Executes the stored procedure [dbo].[PH_FormField_sp_Insert] to create a new form field record.
        /// The sectionId, fieldId, and fieldTypeId parameters are required to establish the relationship.
        /// Display order parameters control the visual arrangement of fields and field types.
        /// The tooltip parameter provides additional help text for users (limited to 200 characters).
        /// The return value indicates the success or failure of the operation.
        /// </remarks>
        public virtual async Task<int> PH_FormField_sp_InsertAsync(int? sectionId, int? fieldId, int? fieldTypeId, int? fieldDisplayOrder, int? fieldTypeDisplayOrder, string? toolTip, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "sectionId",
                    Value = sectionId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "fieldId",
                    Value = fieldId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "fieldTypeId",
                    Value = fieldTypeId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "fieldDisplayOrder",
                    Value = fieldDisplayOrder ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "fieldTypeDisplayOrder",
                    Value = fieldTypeDisplayOrder ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "toolTip",
                    Size = 200,
                    Value = toolTip ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[PH_FormField_sp_Insert] @sectionId = @sectionId, @fieldId = @fieldId, @fieldTypeId = @fieldTypeId, @fieldDisplayOrder = @fieldDisplayOrder, @fieldTypeDisplayOrder = @fieldTypeDisplayOrder, @toolTip = @toolTip", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Updates an existing PH form field record in the database.
        /// </summary>
        /// <param name="oldSectionId">The current section ID of the record to update.</param>
        /// <param name="oldFieldId">The current field ID of the record to update.</param>
        /// <param name="oldFieldTypeId">The current field type ID of the record to update.</param>
        /// <param name="newSectionId">The new section ID for the record.</param>
        /// <param name="newFieldId">The new field ID for the record.</param>
        /// <param name="newFieldTypeId">The new field type ID for the record.</param>
        /// <param name="oldFieldDisplayOrder">The current field display order.</param>
        /// <param name="oldFieldTypeDisplayOrder">The current field type display order.</param>
        /// <param name="newFieldDisplayOrder">The new field display order.</param>
        /// <param name="newFieldTypeDisplayOrder">The new field type display order.</param>
        /// <param name="oldToolTip">The current tooltip text.</param>
        /// <param name="newToolTip">The new tooltip text (maximum 200 characters).</param>
        /// <param name="returnValue">Output parameter that returns the stored procedure execution status.</param>
        /// <param name="cancellationToken">Optional cancellation token to cancel the operation.</param>
        /// <returns>The number of rows affected by the update operation.</returns>
        /// <exception cref="OperationCanceledException">Thrown when the operation is cancelled via the cancellation token.</exception>
        /// <remarks>
        /// Executes the stored procedure [dbo].[PH_FormField_sp_Update] to modify an existing form field record.
        /// The old parameters identify the existing record, while the new parameters specify the updated values.
        /// This method allows comprehensive updates to all aspects of a form field including its relationships and display properties.
        /// The tooltip parameter is limited to 200 characters.
        /// The return value indicates the success or failure of the operation.
        /// </remarks>
        public virtual async Task<int> PH_FormField_sp_UpdateAsync(int? oldSectionId, int? oldFieldId, int? oldFieldTypeId, int? newSectionId, int? newFieldId, int? newFieldTypeId, int? oldFieldDisplayOrder, int? oldFieldTypeDisplayOrder, int? newFieldDisplayOrder, int? newFieldTypeDisplayOrder, string? oldToolTip, string? newToolTip, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "oldSectionId",
                    Value = oldSectionId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "oldFieldId",
                    Value = oldFieldId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "oldFieldTypeId",
                    Value = oldFieldTypeId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "newSectionId",
                    Value = newSectionId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "newFieldId",
                    Value = newFieldId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "newFieldTypeId",
                    Value = newFieldTypeId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "oldFieldDisplayOrder",
                    Value = oldFieldDisplayOrder ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "oldFieldTypeDisplayOrder",
                    Value = oldFieldTypeDisplayOrder ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "newFieldDisplayOrder",
                    Value = newFieldDisplayOrder ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "newFieldTypeDisplayOrder",
                    Value = newFieldTypeDisplayOrder ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "oldToolTip",
                    Size = 200,
                    Value = oldToolTip ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "newToolTip",
                    Size = 200,
                    Value = newToolTip ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[PH_FormField_sp_Update] @oldSectionId = @oldSectionId, @oldFieldId = @oldFieldId, @oldFieldTypeId = @oldFieldTypeId, @newSectionId = @newSectionId, @newFieldId = @newFieldId, @newFieldTypeId = @newFieldTypeId, @oldFieldDisplayOrder = @oldFieldDisplayOrder, @oldFieldTypeDisplayOrder = @oldFieldTypeDisplayOrder, @newFieldDisplayOrder = @newFieldDisplayOrder, @newFieldTypeDisplayOrder = @newFieldTypeDisplayOrder, @oldToolTip = @oldToolTip, @newToolTip = @newToolTip", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Updates the display order of fields within a section.
        /// </summary>
        /// <param name="sectionId">The ID of the section containing the fields.</param>
        /// <param name="fieldId">The ID of the field whose display order is being updated.</param>
        /// <param name="oldOrder">The current display order value.</param>
        /// <param name="newOrder">The new display order value.</param>
        /// <param name="filter">Filter parameter to control the scope of the update operation.</param>
        /// <param name="returnValue">Output parameter that returns the stored procedure execution status.</param>
        /// <param name="cancellationToken">Optional cancellation token to cancel the operation.</param>
        /// <returns>The number of rows affected by the update operation.</returns>
        /// <exception cref="OperationCanceledException">Thrown when the operation is cancelled via the cancellation token.</exception>
        /// <remarks>
        /// Executes the stored procedure [dbo].[PH_FormField_sp_UpdateFieldDisplayOrders] to reorder fields within a section.
        /// This method is used to change the visual arrangement of fields by updating their display order values.
        /// The filter parameter can be used to limit the scope of the reordering operation.
        /// The return value indicates the success or failure of the operation.
        /// </remarks>
        public virtual async Task<int> PH_FormField_sp_UpdateFieldDisplayOrdersAsync(int? sectionId, int? fieldId, int? oldOrder, int? newOrder, byte? filter, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "sectionId",
                    Value = sectionId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "fieldId",
                    Value = fieldId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "oldOrder",
                    Value = oldOrder ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "newOrder",
                    Value = newOrder ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "filter",
                    Value = filter ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[PH_FormField_sp_UpdateFieldDisplayOrders] @sectionId = @sectionId, @fieldId = @fieldId, @oldOrder = @oldOrder, @newOrder = @newOrder, @filter = @filter", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Updates the display order of field types within a specific field and section.
        /// </summary>
        /// <param name="sectionId">The ID of the section containing the field.</param>
        /// <param name="fieldId">The ID of the field containing the field types.</param>
        /// <param name="fieldTypeId">The ID of the field type whose display order is being updated.</param>
        /// <param name="oldOrder">The current display order value of the field type.</param>
        /// <param name="newOrder">The new display order value for the field type.</param>
        /// <param name="filter">Filter parameter to control the scope of the update operation.</param>
        /// <param name="returnValue">Output parameter that returns the stored procedure execution status.</param>
        /// <param name="cancellationToken">Optional cancellation token to cancel the operation.</param>
        /// <returns>The number of rows affected by the update operation.</returns>
        /// <exception cref="OperationCanceledException">Thrown when the operation is cancelled via the cancellation token.</exception>
        /// <remarks>
        /// Executes the stored procedure [dbo].[PH_FormField_sp_UpdateFieldTypeDisplayOrders] to reorder field types within a field.
        /// This method allows fine-grained control over the display order of different field types associated with a specific field.
        /// The filter parameter can be used to limit the scope of the reordering operation.
        /// The return value indicates the success or failure of the operation.
        /// </remarks>
        public virtual async Task<int> PH_FormField_sp_UpdateFieldTypeDisplayOrdersAsync(int? sectionId, int? fieldId, int? fieldTypeId, int? oldOrder, int? newOrder, byte? filter, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "sectionId",
                    Value = sectionId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "fieldId",
                    Value = fieldId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "fieldTypeId",
                    Value = fieldTypeId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "oldOrder",
                    Value = oldOrder ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "newOrder",
                    Value = newOrder ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "filter",
                    Value = filter ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[PH_FormField_sp_UpdateFieldTypeDisplayOrders] @sectionId = @sectionId, @fieldId = @fieldId, @fieldTypeId = @fieldTypeId, @oldOrder = @oldOrder, @newOrder = @newOrder, @filter = @filter", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Deletes PH form value records from the database based on reference, section, field, and field type IDs.
        /// </summary>
        /// <param name="refId">The reference ID associated with the form values to delete.</param>
        /// <param name="sectionId">The section ID of the form values to delete.</param>
        /// <param name="fieldId">The field ID of the form values to delete.</param>
        /// <param name="fieldTypeId">The field type ID of the form values to delete.</param>
        /// <param name="returnValue">Output parameter that returns the stored procedure execution status.</param>
        /// <param name="cancellationToken">Optional cancellation token to cancel the operation.</param>
        /// <returns>A list of PH_FormValue_sp_DeleteResult objects containing information about deleted records.</returns>
        /// <exception cref="OperationCanceledException">Thrown when the operation is cancelled via the cancellation token.</exception>
        /// <remarks>
        /// Executes the stored procedure [dbo].[PH_FormValue_sp_Delete] to remove form value records.
        /// All four ID parameters (refId, sectionId, fieldId, fieldTypeId) are used to identify the specific records to delete.
        /// This method returns information about the records that were deleted.
        /// The return value indicates the success or failure of the operation.
        /// </remarks>
        public virtual async Task<List<PH_FormValue_sp_DeleteResult>> PH_FormValue_sp_DeleteAsync(int? refId, int? sectionId, int? fieldId, int? fieldTypeId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sectionId",
                    Value = sectionId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "fieldId",
                    Value = fieldId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "fieldTypeId",
                    Value = fieldTypeId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<PH_FormValue_sp_DeleteResult>("EXEC @returnValue = [dbo].[PH_FormValue_sp_Delete] @refId = @refId, @sectionId = @sectionId, @fieldId = @fieldId, @fieldTypeId = @fieldTypeId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Retrieves PH form value records by reference ID.
        /// </summary>
        /// <param name="refId">The reference ID to filter form values by.</param>
        /// <param name="returnValue">Output parameter that returns the stored procedure execution status.</param>
        /// <param name="cancellationToken">Optional cancellation token to cancel the operation.</param>
        /// <returns>A list of PH_FormValue_sp_GetByRefIdResult objects containing form values for the specified reference.</returns>
        /// <exception cref="OperationCanceledException">Thrown when the operation is cancelled via the cancellation token.</exception>
        /// <remarks>
        /// Executes the stored procedure [dbo].[PH_FormValue_sp_GetByRefId] to retrieve all form values associated with a specific reference ID.
        /// This method is useful for retrieving all the form data entered for a particular reference or case.
        /// Returns an empty list if no form values are found for the specified reference ID.
        /// The return value indicates the success or failure of the operation.
        /// </remarks>
        public virtual async Task<List<PH_FormValue_sp_GetByRefIdResult>> PH_FormValue_sp_GetByRefIdAsync(int? refId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<PH_FormValue_sp_GetByRefIdResult>("EXEC @returnValue = [dbo].[PH_FormValue_sp_GetByRefId] @refId = @refId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Inserts a new PH form value record into the database.
        /// </summary>
        /// <param name="refId">The reference ID to associate with the form value.</param>
        /// <param name="sectionId">The section ID where the form value belongs.</param>
        /// <param name="fieldId">The field ID for which the value is being entered.</param>
        /// <param name="fieldTypeId">The field type ID defining the data type of the value.</param>
        /// <param name="value">The actual value to store (maximum 1000 characters).</param>
        /// <param name="returnValue">Output parameter that returns the stored procedure execution status.</param>
        /// <param name="cancellationToken">Optional cancellation token to cancel the operation.</param>
        /// <returns>A list of PH_FormValue_sp_InsertResult objects containing information about the inserted record.</returns>
        /// <exception cref="OperationCanceledException">Thrown when the operation is cancelled via the cancellation token.</exception>
        /// <remarks>
        /// Executes the stored procedure [dbo].[PH_FormValue_sp_Insert] to create a new form value record.
        /// All parameters except returnValue and cancellationToken are required to establish the complete relationship and store the value.
        /// The value parameter is limited to 1000 characters to accommodate various data types and content.
        /// This method returns information about the record that was inserted.
        /// The return value indicates the success or failure of the operation.
        /// </remarks>
        public virtual async Task<List<PH_FormValue_sp_InsertResult>> PH_FormValue_sp_InsertAsync(int? refId, int? sectionId, int? fieldId, int? fieldTypeId, string? value, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sectionId",
                    Value = sectionId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "fieldId",
                    Value = fieldId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "fieldTypeId",
                    Value = fieldTypeId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "value",
                    Size = 1000,
                    Value = value ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<PH_FormValue_sp_InsertResult>("EXEC @returnValue = [dbo].[PH_FormValue_sp_Insert] @refId = @refId, @sectionId = @sectionId, @fieldId = @fieldId, @fieldTypeId = @fieldTypeId, @value = @value", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Updates an existing PH form value record in the database.
        /// </summary>
        /// <param name="refId">The reference ID of the form value to update.</param>
        /// <param name="sectionId">The section ID of the form value to update.</param>
        /// <param name="fieldId">The field ID of the form value to update.</param>
        /// <param name="fieldTypeId">The field type ID of the form value to update.</param>
        /// <param name="newValue">The new value to store (maximum 1000 characters).</param>
        /// <param name="returnValue">Output parameter that returns the stored procedure execution status.</param>
        /// <param name="cancellationToken">Optional cancellation token to cancel the operation.</param>
        /// <returns>A list of PH_FormValue_sp_UpdateResult objects containing information about the updated record.</returns>
        /// <exception cref="OperationCanceledException">Thrown when the operation is cancelled via the cancellation token.</exception>
        /// <remarks>
        /// Executes the stored procedure [dbo].[PH_FormValue_sp_Update] to modify an existing form value record.
        /// The first four parameters (refId, sectionId, fieldId, fieldTypeId) identify the existing record to update.
        /// The newValue parameter specifies the updated content, limited to 1000 characters.
        /// This method returns information about the record that was updated.
        /// The return value indicates the success or failure of the operation.
        /// </remarks>
        public virtual async Task<List<PH_FormValue_sp_UpdateResult>> PH_FormValue_sp_UpdateAsync(int? refId, int? sectionId, int? fieldId, int? fieldTypeId, string? newValue, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sectionId",
                    Value = sectionId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "fieldId",
                    Value = fieldId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "fieldTypeId",
                    Value = fieldTypeId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "newValue",
                    Size = 1000,
                    Value = newValue ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<PH_FormValue_sp_UpdateResult>("EXEC @returnValue = [dbo].[PH_FormValue_sp_Update] @refId = @refId, @sectionId = @sectionId, @fieldId = @fieldId, @fieldTypeId = @fieldTypeId, @newValue = @newValue", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ph_query_param_sp_UpdateExecuteOrdersAsync(int? clauseId, int? paramId, int? newOrder, int? oldOrder, int? filter, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "clauseId",
                    Value = clauseId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "paramId",
                    Value = paramId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "newOrder",
                    Value = newOrder ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "oldOrder",
                    Value = oldOrder ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "filter",
                    Value = filter ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[ph_query_param_sp_UpdateExecuteOrders] @clauseId = @clauseId, @paramId = @paramId, @newOrder = @newOrder, @oldOrder = @oldOrder, @filter = @filter", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PH_Report_sp_GetSmallestReportingPeriodYearResult>> PH_Report_sp_GetSmallestReportingPeriodYearAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<PH_Report_sp_GetSmallestReportingPeriodYearResult>("EXEC @returnValue = [dbo].[PH_Report_sp_GetSmallestReportingPeriodYear]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> PH_Section_sp_AddChildAsync(int? parentId, int? childId, int? displayOrder, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "parentId",
                    Value = parentId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "childId",
                    Value = childId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "displayOrder",
                    Value = displayOrder ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[PH_Section_sp_AddChild] @parentId = @parentId, @childId = @childId, @displayOrder = @displayOrder", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PH_Section_sp_GetAllResult>> PH_Section_sp_GetAllAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<PH_Section_sp_GetAllResult>("EXEC @returnValue = [dbo].[PH_Section_sp_GetAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PH_Section_sp_GetByIdResult>> PH_Section_sp_GetByIdAsync(int? id, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<PH_Section_sp_GetByIdResult>("EXEC @returnValue = [dbo].[PH_Section_sp_GetById] @id = @id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PH_Section_sp_GetChildrenResult>> PH_Section_sp_GetChildrenAsync(int? parentId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "parentId",
                    Value = parentId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<PH_Section_sp_GetChildrenResult>("EXEC @returnValue = [dbo].[PH_Section_sp_GetChildren] @parentId = @parentId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> PH_Section_sp_InsertAsync(string? name, string? parentName, int? fieldColumns, bool? isTopLevel, bool? hasPageBreak, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "name",
                    Size = 200,
                    Value = name ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "parentName",
                    Size = 200,
                    Value = parentName ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "fieldColumns",
                    Value = fieldColumns ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "isTopLevel",
                    Value = isTopLevel ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "hasPageBreak",
                    Value = hasPageBreak ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[PH_Section_sp_Insert] @name = @name, @parentName = @parentName, @fieldColumns = @fieldColumns, @isTopLevel = @isTopLevel, @hasPageBreak = @hasPageBreak", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> PH_Section_sp_RemoveChildAsync(int? parentId, int? childId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "parentId",
                    Value = parentId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "childId",
                    Value = childId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[PH_Section_sp_RemoveChild] @parentId = @parentId, @childId = @childId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> PH_Section_sp_UpdateAsync(int? id, string? name, int? parentId, int? fieldColumns, bool? isTopLevel, int? displayOrder, bool? hasPageBreak, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "name",
                    Size = 200,
                    Value = name ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "parentId",
                    Value = parentId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "fieldColumns",
                    Value = fieldColumns ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "isTopLevel",
                    Value = isTopLevel ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "displayOrder",
                    Value = displayOrder ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "hasPageBreak",
                    Value = hasPageBreak ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[PH_Section_sp_Update] @id = @id, @name = @name, @parentId = @parentId, @fieldColumns = @fieldColumns, @isTopLevel = @isTopLevel, @displayOrder = @displayOrder, @hasPageBreak = @hasPageBreak", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> PH_Section_sp_UpdateDisplayOrdersAsync(int? sectionId, int? parentId, int? oldOrder, int? newOrder, bool? isTopLevel, byte? filter, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "sectionId",
                    Value = sectionId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "parentId",
                    Value = parentId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "oldOrder",
                    Value = oldOrder ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "newOrder",
                    Value = newOrder ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "isTopLevel",
                    Value = isTopLevel ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "filter",
                    Value = filter ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[PH_Section_sp_UpdateDisplayOrders] @sectionId = @sectionId, @parentId = @parentId, @oldOrder = @oldOrder, @newOrder = @newOrder, @isTopLevel = @isTopLevel, @filter = @filter", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PH_Workflow_sp_ExecuteCollectionProcessResult>> PH_Workflow_sp_ExecuteCollectionProcessAsync(int? year, int? previousMonth, string? systemIPAddress, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "year",
                    Value = year ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "previousMonth",
                    Value = previousMonth ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "systemIPAddress",
                    Size = 20,
                    Value = systemIPAddress ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<PH_Workflow_sp_ExecuteCollectionProcessResult>("EXEC @returnValue = [dbo].[PH_Workflow_sp_ExecuteCollectionProcess] @year = @year, @previousMonth = @previousMonth, @systemIPAddress = @systemIPAddress", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PH_Workflow_sp_GetCaseIdForReportingPeriodResult>> PH_Workflow_sp_GetCaseIdForReportingPeriodAsync(DateTime? reportingPeriod, int? wingRMUId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "reportingPeriod",
                    Value = reportingPeriod ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "wingRMUId",
                    Value = wingRMUId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<PH_Workflow_sp_GetCaseIdForReportingPeriodResult>("EXEC @returnValue = [dbo].[PH_Workflow_sp_GetCaseIdForReportingPeriod] @reportingPeriod = @reportingPeriod, @wingRMUId = @wingRMUId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PH_Workflow_sp_GetCasesByWingRMUResult>> PH_Workflow_sp_GetCasesByWingRMUAsync(int? wingRMUId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "wingRMUId",
                    Value = wingRMUId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<PH_Workflow_sp_GetCasesByWingRMUResult>("EXEC @returnValue = [dbo].[PH_Workflow_sp_GetCasesByWingRMU] @wingRMUId = @wingRMUId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PH_Workflow_sp_GetPushReportEmailsResult>> PH_Workflow_sp_GetPushReportEmailsAsync(int? executionYear, int? executionMonth, int? userGroupId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "executionYear",
                    Value = executionYear ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "executionMonth",
                    Value = executionMonth ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "userGroupId",
                    Value = userGroupId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<PH_Workflow_sp_GetPushReportEmailsResult>("EXEC @returnValue = [dbo].[PH_Workflow_sp_GetPushReportEmails] @executionYear = @executionYear, @executionMonth = @executionMonth, @userGroupId = @userGroupId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PH_Workflow_sp_GetPushReportUnitsResult>> PH_Workflow_sp_GetPushReportUnitsAsync(int? executionYear, int? executionMonth, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "executionYear",
                    Value = executionYear ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "executionMonth",
                    Value = executionMonth ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<PH_Workflow_sp_GetPushReportUnitsResult>("EXEC @returnValue = [dbo].[PH_Workflow_sp_GetPushReportUnits] @executionYear = @executionYear, @executionMonth = @executionMonth", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PH_Workflow_sp_GetSevenDayWarningEmailsResult>> PH_Workflow_sp_GetSevenDayWarningEmailsAsync(int? executionYear, int? executionMonth, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "executionYear",
                    Value = executionYear ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "executionMonth",
                    Value = executionMonth ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<PH_Workflow_sp_GetSevenDayWarningEmailsResult>("EXEC @returnValue = [dbo].[PH_Workflow_sp_GetSevenDayWarningEmails] @executionYear = @executionYear, @executionMonth = @executionMonth", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PH_Workflow_sp_SearchResult>> PH_Workflow_sp_SearchAsync(string? caseID, byte? status, int? userId, byte? rptView, string? compo, int? maxCount, byte? moduleId, int? unitId, int? reportingMonth, int? reportingYear, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "caseID",
                    Size = 50,
                    Value = caseID ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Value = status ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rptView",
                    Value = rptView ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "compo",
                    Size = 10,
                    Value = compo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "maxCount",
                    Value = maxCount ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "moduleId",
                    Value = moduleId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "unitId",
                    Value = unitId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reportingMonth",
                    Value = reportingMonth ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reportingYear",
                    Value = reportingYear ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<PH_Workflow_sp_SearchResult>("EXEC @returnValue = [dbo].[PH_Workflow_sp_Search] @caseID = @caseID, @status = @status, @userId = @userId, @rptView = @rptView, @compo = @compo, @maxCount = @maxCount, @moduleId = @moduleId, @unitId = @unitId, @reportingMonth = @reportingMonth, @reportingYear = @reportingYear", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Print_sp_Form348Result>> Print_sp_Form348Async(int? lodId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "lodId",
                    Value = lodId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<Print_sp_Form348Result>("EXEC @returnValue = [dbo].[Print_sp_Form348] @lodId = @lodId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<print_sp_GetDocumentDetailsResult>> print_sp_GetDocumentDetailsAsync(int? docId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "docId",
                    Value = docId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<print_sp_GetDocumentDetailsResult>("EXEC @returnValue = [dbo].[print_sp_GetDocumentDetails] @docId = @docId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Print_sp_GetFormFieldParserResult>> Print_sp_GetFormFieldParserAsync(int? parserId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "parserId",
                    Value = parserId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<Print_sp_GetFormFieldParserResult>("EXEC @returnValue = [dbo].[Print_sp_GetFormFieldParser] @parserId = @parserId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> query_param_sp_UpdateExecuteOrdersAsync(int? clauseId, int? paramId, int? newOrder, int? oldOrder, int? filter, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "clauseId",
                    Value = clauseId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "paramId",
                    Value = paramId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "newOrder",
                    Value = newOrder ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "oldOrder",
                    Value = oldOrder ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "filter",
                    Value = filter ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[query_param_sp_UpdateExecuteOrders] @clauseId = @clauseId, @paramId = @paramId, @newOrder = @newOrder, @oldOrder = @oldOrder, @filter = @filter", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<RecentlyAddedDocs_sp_GetByIdsResult>> RecentlyAddedDocs_sp_GetByIdsAsync(int? refId, long? docGroupId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "docGroupId",
                    Value = docGroupId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<RecentlyAddedDocs_sp_GetByIdsResult>("EXEC @returnValue = [dbo].[RecentlyAddedDocs_sp_GetByIds] @refId = @refId, @docGroupId = @docGroupId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> RecentlyAddedDocs_sp_InsertAsync(int? refId, long? docGroupId, long? docId, int? docTypeId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "docGroupId",
                    Value = docGroupId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "docId",
                    Value = docId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "docTypeId",
                    Value = docTypeId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[RecentlyAddedDocs_sp_Insert] @refId = @refId, @docGroupId = @docGroupId, @docId = @docId, @docTypeId = @docTypeId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> RecentlyAddedDocs_sp_RemoveAsync(int? refId, long? docGroupId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "docGroupId",
                    Value = docGroupId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[RecentlyAddedDocs_sp_Remove] @refId = @refId, @docGroupId = @docGroupId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ReminderDisableInactiveAccountAsync(int? puserId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "puserId",
                    Value = puserId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[ReminderDisableInactiveAccount] @puserId = @puserId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ReminderEmailAddSettingsByStatusAsync(long? pworkflowId, long? pstatusId, long? pcompo, long? pgroupId, long? ptemplateId, int? pinterval, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pworkflowId",
                    Value = pworkflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "pstatusId",
                    Value = pstatusId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "pcompo",
                    Value = pcompo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "pgroupId",
                    Value = pgroupId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ptemplateId",
                    Value = ptemplateId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "pinterval",
                    Value = pinterval ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[ReminderEmailAddSettingsByStatus] @pworkflowId = @pworkflowId, @pstatusId = @pstatusId, @pcompo = @pcompo, @pgroupId = @pgroupId, @ptemplateId = @ptemplateId, @pinterval = @pinterval", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ReminderEmailGetListResult>> ReminderEmailGetListAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<ReminderEmailGetListResult>("EXEC @returnValue = [dbo].[ReminderEmailGetList]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ReminderEmailGetSettingsByStatusResult>> ReminderEmailGetSettingsByStatusAsync(long? pworkflowId, long? pstatusId, long? pcompo, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pworkflowId",
                    Value = pworkflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "pstatusId",
                    Value = pstatusId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "pcompo",
                    Value = pcompo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<ReminderEmailGetSettingsByStatusResult>("EXEC @returnValue = [dbo].[ReminderEmailGetSettingsByStatus] @pworkflowId = @pworkflowId, @pstatusId = @pstatusId, @pcompo = @pcompo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ReminderEmailInitialStepAsync(long? pId, long? pworkStatusId, string? pcaseType, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pId",
                    Value = pId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "pworkStatusId",
                    Value = pworkStatusId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "pcaseType",
                    Size = 10,
                    Value = pcaseType ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[ReminderEmailInitialStep] @pId = @pId, @pworkStatusId = @pworkStatusId, @pcaseType = @pcaseType", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ReminderEmailsAddAsync(long? psettingId, long? pworkStatusId, long? pworkflowId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "psettingId",
                    Value = psettingId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "pworkStatusId",
                    Value = pworkStatusId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "pworkflowId",
                    Value = pworkflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[ReminderEmailsAdd] @psettingId = @psettingId, @pworkStatusId = @pworkStatusId, @pworkflowId = @pworkflowId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ReminderEmailSettingsDeleteAsync(long? pid, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pid",
                    Value = pid ?? Convert.DBNull,
                    SqlDbType = SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[ReminderEmailSettingsDelete] @pid = @pid", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ReminderEmailSettingsDeleteByStatusAsync(long? pworkflowId, long? pstatusId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pworkflowId",
                    Value = pworkflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "pstatusId",
                    Value = pstatusId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[ReminderEmailSettingsDeleteByStatus] @pworkflowId = @pworkflowId, @pstatusId = @pstatusId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ReminderEmailUpdateAsync(long? pId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pId",
                    Value = pId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[ReminderEmailUpdate] @pId = @pId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ReminderEmailUpdateStatusChangeAsync(long? poldWorkStatusId, long? pnewworkStatusId, string? pcaseId, string? pcaseType, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "poldWorkStatusId",
                    Value = poldWorkStatusId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "pnewworkStatusId",
                    Value = pnewworkStatusId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "pcaseId",
                    Size = 128,
                    Value = pcaseId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pcaseType",
                    Size = 5,
                    Value = pcaseType ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[ReminderEmailUpdateStatusChange] @poldWorkStatusId = @poldWorkStatusId, @pnewworkStatusId = @pnewworkStatusId, @pcaseId = @pcaseId, @pcaseType = @pcaseType", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ReminderGetInactiveEmailsResult>> ReminderGetInactiveEmailsAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<ReminderGetInactiveEmailsResult>("EXEC @returnValue = [dbo].[ReminderGetInactiveEmails]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ReminderGetInactiveSettingsResult>> ReminderGetInactiveSettingsAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<ReminderGetInactiveSettingsResult>("EXEC @returnValue = [dbo].[ReminderGetInactiveSettings]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ReminderGetUsersToDisableResult>> ReminderGetUsersToDisableAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<ReminderGetUsersToDisableResult>("EXEC @returnValue = [dbo].[ReminderGetUsersToDisable]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ReminderUpdateInactiveSettingsAsync(int? pinterval, int? pnotificationInterval, int? ptemplateId, bool? pactive, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pinterval",
                    Value = pinterval ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pnotificationInterval",
                    Value = pnotificationInterval ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ptemplateId",
                    Value = ptemplateId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pactive",
                    Value = pactive ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[ReminderUpdateInactiveSettings] @pinterval = @pinterval, @pnotificationInterval = @pnotificationInterval, @ptemplateId = @ptemplateId, @pactive = @pactive", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<report_OpenStatusCountResult>> report_OpenStatusCountAsync(int? cs_id, int? vIEW, DateTime? beginDate, DateTime? endDate, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cs_id",
                    Value = cs_id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "VIEW",
                    Value = vIEW ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "beginDate",
                    Value = beginDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "endDate",
                    Value = endDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<report_OpenStatusCountResult>("EXEC @returnValue = [dbo].[report_OpenStatusCount] @cs_id = @cs_id, @VIEW = @VIEW, @beginDate = @beginDate, @endDate = @endDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<report_OpenStatusDetailResult>> report_OpenStatusDetailAsync(int? csId, int? view, DateTime? beginDate, DateTime? endDate, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "csId",
                    Value = csId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "view",
                    Value = view ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "beginDate",
                    Value = beginDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "endDate",
                    Value = endDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<report_OpenStatusDetailResult>("EXEC @returnValue = [dbo].[report_OpenStatusDetail] @csId = @csId, @view = @view, @beginDate = @beginDate, @endDate = @endDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<report_pkgLogResult>> report_pkgLogAsync(DateTime? beginDate, DateTime? endDate, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "beginDate",
                    Value = beginDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "endDate",
                    Value = endDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<report_pkgLogResult>("EXEC @returnValue = [dbo].[report_pkgLog] @beginDate = @beginDate, @endDate = @endDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<report_RowaCountResult>> report_RowaCountAsync(DateTime? beginDate, DateTime? endDate, string? compo, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "beginDate",
                    Value = beginDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "endDate",
                    Value = endDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "compo",
                    Size = 10,
                    Value = compo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<report_RowaCountResult>("EXEC @returnValue = [dbo].[report_RowaCount] @beginDate = @beginDate, @endDate = @endDate, @compo = @compo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<report_RowaDetailResult>> report_RowaDetailAsync(int? rwoaId, DateTime? beginDate, DateTime? endDate, string? compo, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "rwoaId",
                    Value = rwoaId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "beginDate",
                    Value = beginDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "endDate",
                    Value = endDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "compo",
                    Size = 10,
                    Value = compo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<report_RowaDetailResult>("EXEC @returnValue = [dbo].[report_RowaDetail] @rwoaId = @rwoaId, @beginDate = @beginDate, @endDate = @endDate, @compo = @compo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> report_sp_DeleteAllStoredResultAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[report_sp_DeleteAllStoredResult]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<report_sp_DetailConflictStatResult>> report_sp_DetailConflictStatAsync(int? userId, DateTime? beginDate, DateTime? endDate, string? category, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "beginDate",
                    Value = beginDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "endDate",
                    Value = endDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "category",
                    Size = 50,
                    Value = category ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<report_sp_DetailConflictStatResult>("EXEC @returnValue = [dbo].[report_sp_DetailConflictStat] @userId = @userId, @beginDate = @beginDate, @endDate = @endDate, @category = @category", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<report_sp_DetailStatisticsResult>> report_sp_DetailStatisticsAsync(int? userId, DateTime? beginDate, DateTime? endDate, string? category, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "beginDate",
                    Value = beginDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "endDate",
                    Value = endDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "category",
                    Size = 50,
                    Value = category ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<report_sp_DetailStatisticsResult>("EXEC @returnValue = [dbo].[report_sp_DetailStatistics] @userId = @userId, @beginDate = @beginDate, @endDate = @endDate, @category = @category", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> report_sp_GetConflictFindingsAsync(int? cs_id, int? chain_type, DateTime? beginDate, DateTime? endDate, int? firstPtype, int? secondPtype, OutputParameter<int?> returnVal, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnVal = new SqlParameter
            {
                ParameterName = "returnVal",
                Direction = ParameterDirection.InputOutput,
                Value = returnVal?.Value ?? Convert.DBNull,
                SqlDbType = SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cs_id",
                    Value = cs_id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "chain_type",
                    Value = chain_type ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "beginDate",
                    Value = beginDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "endDate",
                    Value = endDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "firstPtype",
                    Value = firstPtype ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "secondPtype",
                    Value = secondPtype ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnVal,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[report_sp_GetConflictFindings] @cs_id = @cs_id, @chain_type = @chain_type, @beginDate = @beginDate, @endDate = @endDate, @firstPtype = @firstPtype, @secondPtype = @secondPtype, @returnVal = @returnVal OUTPUT", sqlParameters, cancellationToken);

            returnVal?.SetValue(parameterreturnVal.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<report_sp_GetDetailDisapprovedLodResult>> report_sp_GetDetailDisapprovedLodAsync(int? userId, DateTime? beginDate, DateTime? endDate, int? ptype, int? finding, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "beginDate",
                    Value = beginDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "endDate",
                    Value = endDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ptype",
                    Value = ptype ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "finding",
                    Value = finding ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<report_sp_GetDetailDisapprovedLodResult>("EXEC @returnValue = [dbo].[report_sp_GetDetailDisapprovedLod] @userId = @userId, @beginDate = @beginDate, @endDate = @endDate, @ptype = @ptype, @finding = @finding", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<report_sp_GetDetailLodByUnitIdResult>> report_sp_GetDetailLodByUnitIdAsync(int? csId, DateTime? beginDate, DateTime? endDate, byte? isComplete, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "csId",
                    Value = csId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "beginDate",
                    Value = beginDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "endDate",
                    Value = endDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "isComplete",
                    Value = isComplete ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<report_sp_GetDetailLodByUnitIdResult>("EXEC @returnValue = [dbo].[report_sp_GetDetailLodByUnitId] @csId = @csId, @beginDate = @beginDate, @endDate = @endDate, @isComplete = @isComplete", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<report_sp_GetDisapprovedLodResult>> report_sp_GetDisapprovedLodAsync(int? userId, DateTime? beginDate, DateTime? endDate, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "beginDate",
                    Value = beginDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "endDate",
                    Value = endDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<report_sp_GetDisapprovedLodResult>("EXEC @returnValue = [dbo].[report_sp_GetDisapprovedLod] @userId = @userId, @beginDate = @beginDate, @endDate = @endDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<report_sp_GetDispositionResult>> report_sp_GetDispositionAsync(int? cs_id, string? ssn, int? view, DateTime? beginDate, DateTime? endDate, byte? isComplete, bool? includeSubordinate, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cs_id",
                    Value = cs_id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ssn",
                    Size = 10,
                    Value = ssn ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "view",
                    Value = view ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "beginDate",
                    Value = beginDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "endDate",
                    Value = endDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "isComplete",
                    Value = isComplete ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "includeSubordinate",
                    Value = includeSubordinate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<report_sp_GetDispositionResult>("EXEC @returnValue = [dbo].[report_sp_GetDisposition] @cs_id = @cs_id, @ssn = @ssn, @view = @view, @beginDate = @beginDate, @endDate = @endDate, @isComplete = @isComplete, @includeSubordinate = @includeSubordinate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<report_sp_GetLodCategoryCountsResult>> report_sp_GetLodCategoryCountsAsync(int? cs_id, int? vIEW, DateTime? beginDate, DateTime? endDate, byte? isComplete, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cs_id",
                    Value = cs_id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "VIEW",
                    Value = vIEW ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "beginDate",
                    Value = beginDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "endDate",
                    Value = endDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "isComplete",
                    Value = isComplete ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<report_sp_GetLodCategoryCountsResult>("EXEC @returnValue = [dbo].[report_sp_GetLodCategoryCounts] @cs_id = @cs_id, @VIEW = @VIEW, @beginDate = @beginDate, @endDate = @endDate, @isComplete = @isComplete", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<report_sp_GetLODDaysToCompleteResult>> report_sp_GetLODDaysToCompleteAsync(DateTime? pbeginDate, DateTime? pendDate, bool? pisFormal, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pbeginDate",
                    Value = pbeginDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "pendDate",
                    Value = pendDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "pisFormal",
                    Value = pisFormal ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<report_sp_GetLODDaysToCompleteResult>("EXEC @returnValue = [dbo].[report_sp_GetLODDaysToComplete] @pbeginDate = @pbeginDate, @pendDate = @pendDate, @pisFormal = @pisFormal", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<report_sp_GetLodMetricsResult>> report_sp_GetLodMetricsAsync(int? cs_id, int? viewType, string? ssn, DateTime? beginDate, DateTime? endDate, byte? isComplete, bool? includeSubordinate, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cs_id",
                    Value = cs_id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "viewType",
                    Value = viewType ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ssn",
                    Size = 10,
                    Value = ssn ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "beginDate",
                    Value = beginDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "endDate",
                    Value = endDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "isComplete",
                    Value = isComplete ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "includeSubordinate",
                    Value = includeSubordinate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<report_sp_GetLodMetricsResult>("EXEC @returnValue = [dbo].[report_sp_GetLodMetrics] @cs_id = @cs_id, @viewType = @viewType, @ssn = @ssn, @beginDate = @beginDate, @endDate = @endDate, @isComplete = @isComplete, @includeSubordinate = @includeSubordinate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<report_sp_GetLODStatisticsResult>> report_sp_GetLODStatisticsAsync(int? userId, DateTime? beginDate, DateTime? endDate, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "beginDate",
                    Value = beginDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "endDate",
                    Value = endDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<report_sp_GetLODStatisticsResult>("EXEC @returnValue = [dbo].[report_sp_GetLODStatistics] @userId = @userId, @beginDate = @beginDate, @endDate = @endDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<report_sp_GetLODStatistics_oldResult>> report_sp_GetLODStatistics_oldAsync(int? userId, DateTime? beginDate, DateTime? endDate, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "beginDate",
                    Value = beginDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "endDate",
                    Value = endDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<report_sp_GetLODStatistics_oldResult>("EXEC @returnValue = [dbo].[report_sp_GetLODStatistics_old] @userId = @userId, @beginDate = @beginDate, @endDate = @endDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<report_sp_GetMetricsCountResult>> report_sp_GetMetricsCountAsync(int? cs_id, int? chain_type, string? ssn, DateTime? beginDate, DateTime? endDate, byte? isComplete, bool? includeSubordinate, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cs_id",
                    Value = cs_id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "chain_type",
                    Value = chain_type ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ssn",
                    Size = 10,
                    Value = ssn ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "beginDate",
                    Value = beginDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "endDate",
                    Value = endDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "isComplete",
                    Value = isComplete ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "includeSubordinate",
                    Value = includeSubordinate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<report_sp_GetMetricsCountResult>("EXEC @returnValue = [dbo].[report_sp_GetMetricsCount] @cs_id = @cs_id, @chain_type = @chain_type, @ssn = @ssn, @beginDate = @beginDate, @endDate = @endDate, @isComplete = @isComplete, @includeSubordinate = @includeSubordinate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<report_sp_GetPALDocumentsForMemberResult>> report_sp_GetPALDocumentsForMemberAsync(string? lastName, string? last4SSN, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "LastName",
                    Size = 50,
                    Value = lastName ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Last4SSN",
                    Size = 4,
                    Value = last4SSN ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<report_sp_GetPALDocumentsForMemberResult>("EXEC @returnValue = [dbo].[report_sp_GetPALDocumentsForMember] @LastName = @LastName, @Last4SSN = @Last4SSN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<report_sp_GetParticipationWaiversResult>> report_sp_GetParticipationWaiversAsync(int? unitId, string? ssn, DateTime? beginDate, DateTime? endDate, byte? interval, int? groupId, bool? includeSubordinate, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "unitId",
                    Value = unitId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ssn",
                    Size = 12,
                    Value = ssn ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "beginDate",
                    Value = beginDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "endDate",
                    Value = endDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "interval",
                    Value = interval ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "groupId",
                    Value = groupId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "includeSubordinate",
                    Value = includeSubordinate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<report_sp_GetParticipationWaiversResult>("EXEC @returnValue = [dbo].[report_sp_GetParticipationWaivers] @unitId = @unitId, @ssn = @ssn, @beginDate = @beginDate, @endDate = @endDate, @interval = @interval, @groupId = @groupId, @includeSubordinate = @includeSubordinate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<report_sp_GetPhsicianCanceledLODResult>> report_sp_GetPhsicianCanceledLODAsync(int? cs_id, int? viewType, string? ssn, DateTime? beginDate, DateTime? endDate, bool? includeSubordinate, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cs_id",
                    Value = cs_id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "viewType",
                    Value = viewType ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ssn",
                    Size = 10,
                    Value = ssn ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "beginDate",
                    Value = beginDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "endDate",
                    Value = endDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "includeSubordinate",
                    Value = includeSubordinate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<report_sp_GetPhsicianCanceledLODResult>("EXEC @returnValue = [dbo].[report_sp_GetPhsicianCanceledLOD] @cs_id = @cs_id, @viewType = @viewType, @ssn = @ssn, @beginDate = @beginDate, @endDate = @endDate, @includeSubordinate = @includeSubordinate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<report_sp_GetRSDispositionResult>> report_sp_GetRSDispositionAsync(int? cs_id, string? ssn, int? view, DateTime? beginDate, DateTime? endDate, byte? isComplete, bool? includeSubordinate, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cs_id",
                    Value = cs_id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ssn",
                    Size = 10,
                    Value = ssn ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "view",
                    Value = view ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "beginDate",
                    Value = beginDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "endDate",
                    Value = endDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "isComplete",
                    Value = isComplete ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "includeSubordinate",
                    Value = includeSubordinate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<report_sp_GetRSDispositionResult>("EXEC @returnValue = [dbo].[report_sp_GetRSDisposition] @cs_id = @cs_id, @ssn = @ssn, @view = @view, @beginDate = @beginDate, @endDate = @endDate, @isComplete = @isComplete, @includeSubordinate = @includeSubordinate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<report_sp_GetSpecialCasesRFAByGroupResult>> report_sp_GetSpecialCasesRFAByGroupAsync(DateTime? beginDate, DateTime? endDate, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "beginDate",
                    Value = beginDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "endDate",
                    Value = endDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<report_sp_GetSpecialCasesRFAByGroupResult>("EXEC @returnValue = [dbo].[report_sp_GetSpecialCasesRFAByGroup] @beginDate = @beginDate, @endDate = @endDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<report_sp_GetSpecialCasesRFAByUnitResult>> report_sp_GetSpecialCasesRFAByUnitAsync(DateTime? beginDate, DateTime? endDate, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "beginDate",
                    Value = beginDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "endDate",
                    Value = endDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<report_sp_GetSpecialCasesRFAByUnitResult>("EXEC @returnValue = [dbo].[report_sp_GetSpecialCasesRFAByUnit] @beginDate = @beginDate, @endDate = @endDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<report_sp_GetStoredResultResult>> report_sp_GetStoredResultAsync(int? userId, string? reportTitle, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reportTitle",
                    Size = 200,
                    Value = reportTitle ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<report_sp_GetStoredResultResult>("EXEC @returnValue = [dbo].[report_sp_GetStoredResult] @userId = @userId, @reportTitle = @reportTitle", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<report_sp_LODActivityResult>> report_sp_LODActivityAsync(int? cs_id, int? view, DateTime? beginDate, DateTime? endDate, byte? isComplete, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cs_id",
                    Value = cs_id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "view",
                    Value = view ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "beginDate",
                    Value = beginDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "endDate",
                    Value = endDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "isComplete",
                    Value = isComplete ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<report_sp_LODActivityResult>("EXEC @returnValue = [dbo].[report_sp_LODActivity] @cs_id = @cs_id, @view = @view, @beginDate = @beginDate, @endDate = @endDate, @isComplete = @isComplete", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<report_sp_LODActivity_countsResult>> report_sp_LODActivity_countsAsync(int? cs_id, int? viewType, DateTime? beginDate, DateTime? endDate, byte? isComplete, bool? includeSubordinate, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cs_id",
                    Value = cs_id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "viewType",
                    Value = viewType ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "beginDate",
                    Value = beginDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "endDate",
                    Value = endDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "isComplete",
                    Value = isComplete ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "includeSubordinate",
                    Value = includeSubordinate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<report_sp_LODActivity_countsResult>("EXEC @returnValue = [dbo].[report_sp_LODActivity_counts] @cs_id = @cs_id, @viewType = @viewType, @beginDate = @beginDate, @endDate = @endDate, @isComplete = @isComplete, @includeSubordinate = @includeSubordinate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<report_sp_LODComplianceResult>> report_sp_LODComplianceAsync(int? quarter, int? year, int? unitId, int? rptView, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "quarter",
                    Value = quarter ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "year",
                    Value = year ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "unitId",
                    Value = unitId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rptView",
                    Value = rptView ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<report_sp_LODComplianceResult>("EXEC @returnValue = [dbo].[report_sp_LODCompliance] @quarter = @quarter, @year = @year, @unitId = @unitId, @rptView = @rptView", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<report_sp_LODCompliance_QualityResult>> report_sp_LODCompliance_QualityAsync(DataTable? refIds, int? unitId, bool? groupByChildUnits, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "refIds",
                    Value = refIds ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Structured,
                    TypeName = "[dbo].[tblIntegerList]",
                },
                new SqlParameter
                {
                    ParameterName = "unitId",
                    Value = unitId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "groupByChildUnits",
                    Value = groupByChildUnits ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<report_sp_LODCompliance_QualityResult>("EXEC @returnValue = [dbo].[report_sp_LODCompliance_Quality] @refIds = @refIds, @unitId = @unitId, @groupByChildUnits = @groupByChildUnits", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<report_sp_LODCompliance_TimelinessResult>> report_sp_LODCompliance_TimelinessAsync(DataTable? refIds, int? unitId, bool? groupByChildUnits, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "refIds",
                    Value = refIds ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Structured,
                    TypeName = "[dbo].[tblIntegerList]",
                },
                new SqlParameter
                {
                    ParameterName = "unitId",
                    Value = unitId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "groupByChildUnits",
                    Value = groupByChildUnits ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<report_sp_LODCompliance_TimelinessResult>("EXEC @returnValue = [dbo].[report_sp_LODCompliance_Timeliness] @refIds = @refIds, @unitId = @unitId, @groupByChildUnits = @groupByChildUnits", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<report_sp_LODComplianceAccuracyResult>> report_sp_LODComplianceAccuracyAsync(DataTable? refIds, int? unitId, bool? groupByChildUnits, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "refIds",
                    Value = refIds ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Structured,
                    TypeName = "[dbo].[tblIntegerList]",
                },
                new SqlParameter
                {
                    ParameterName = "unitId",
                    Value = unitId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "groupByChildUnits",
                    Value = groupByChildUnits ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<report_sp_LODComplianceAccuracyResult>("EXEC @returnValue = [dbo].[report_sp_LODComplianceAccuracy] @refIds = @refIds, @unitId = @unitId, @groupByChildUnits = @groupByChildUnits", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<report_sp_LODProgramStatusResult>> report_sp_LODProgramStatusAsync(int? quarter, int? year, int? unitId, int? rptView, bool? groupByChildUnits, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "quarter",
                    Value = quarter ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "year",
                    Value = year ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "unitId",
                    Value = unitId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rptView",
                    Value = rptView ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "groupByChildUnits",
                    Value = groupByChildUnits ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<report_sp_LODProgramStatusResult>("EXEC @returnValue = [dbo].[report_sp_LODProgramStatus] @quarter = @quarter, @year = @year, @unitId = @unitId, @rptView = @rptView, @groupByChildUnits = @groupByChildUnits", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<report_sp_LODSARCCasesResult>> report_sp_LODSARCCasesAsync(DateOnly? beginDate, DateOnly? endDate, int? restrictionStatus, int? completionStatus, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "beginDate",
                    Value = beginDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "endDate",
                    Value = endDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "restrictionStatus",
                    Value = restrictionStatus ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "completionStatus",
                    Value = completionStatus ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<report_sp_LODSARCCasesResult>("EXEC @returnValue = [dbo].[report_sp_LODSARCCases] @beginDate = @beginDate, @endDate = @endDate, @restrictionStatus = @restrictionStatus, @completionStatus = @completionStatus", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<report_sp_LODSuspsenseMonitoringResult>> report_sp_LODSuspsenseMonitoringAsync(int? unitId, int? rptView, bool? groupByChildUnits, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "unitId",
                    Value = unitId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rptView",
                    Value = rptView ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "groupByChildUnits",
                    Value = groupByChildUnits ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<report_sp_LODSuspsenseMonitoringResult>("EXEC @returnValue = [dbo].[report_sp_LODSuspsenseMonitoring] @unitId = @unitId, @rptView = @rptView, @groupByChildUnits = @groupByChildUnits", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<report_sp_PHAdHocTotalsQueryResult>> report_sp_PHAdHocTotalsQueryAsync(int? phQueryId, int? userId, int? scope, int? userUnit, int? rptView, string? workflowConditions, string? phFormConditions, string? phFormSortField, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "phQueryId",
                    Value = phQueryId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "scope",
                    Value = scope ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "userUnit",
                    Value = userUnit ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rptView",
                    Value = rptView ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "workflowConditions",
                    Size = -1,
                    Value = workflowConditions ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "phFormConditions",
                    Size = -1,
                    Value = phFormConditions ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "phFormSortField",
                    Size = -1,
                    Value = phFormSortField ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<report_sp_PHAdHocTotalsQueryResult>("EXEC @returnValue = [dbo].[report_sp_PHAdHocTotalsQuery] @phQueryId = @phQueryId, @userId = @userId, @scope = @scope, @userUnit = @userUnit, @rptView = @rptView, @workflowConditions = @workflowConditions, @phFormConditions = @phFormConditions, @phFormSortField = @phFormSortField", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<report_sp_PHTotalsCommentsReportResult>> report_sp_PHTotalsCommentsReportAsync(int? unitId, bool? includeSubUnits, byte? collocated, int? rptView, DateTime? beginReportingPeriod, DateTime? endReportingPeriod, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "unitId",
                    Value = unitId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "includeSubUnits",
                    Value = includeSubUnits ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "collocated",
                    Value = collocated ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "rptView",
                    Value = rptView ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "beginReportingPeriod",
                    Value = beginReportingPeriod ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "endReportingPeriod",
                    Value = endReportingPeriod ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<report_sp_PHTotalsCommentsReportResult>("EXEC @returnValue = [dbo].[report_sp_PHTotalsCommentsReport] @unitId = @unitId, @includeSubUnits = @includeSubUnits, @collocated = @collocated, @rptView = @rptView, @beginReportingPeriod = @beginReportingPeriod, @endReportingPeriod = @endReportingPeriod", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<report_sp_PHTotalsReportResult>> report_sp_PHTotalsReportAsync(int? unitId, bool? includeSubUnits, byte? collocated, int? rptView, DateTime? beginReportingPeriod, DateTime? endReportingPeriod, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "unitId",
                    Value = unitId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "includeSubUnits",
                    Value = includeSubUnits ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "collocated",
                    Value = collocated ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "rptView",
                    Value = rptView ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "beginReportingPeriod",
                    Value = beginReportingPeriod ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "endReportingPeriod",
                    Value = endReportingPeriod ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<report_sp_PHTotalsReportResult>("EXEC @returnValue = [dbo].[report_sp_PHTotalsReport] @unitId = @unitId, @includeSubUnits = @includeSubUnits, @collocated = @collocated, @rptView = @rptView, @beginReportingPeriod = @beginReportingPeriod, @endReportingPeriod = @endReportingPeriod", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<report_sp_PHTotalsStringValuesReportResult>> report_sp_PHTotalsStringValuesReportAsync(int? unitId, bool? includeSubUnits, byte? collocated, int? rptView, DateTime? beginReportingPeriod, DateTime? endReportingPeriod, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "unitId",
                    Value = unitId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "includeSubUnits",
                    Value = includeSubUnits ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "collocated",
                    Value = collocated ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "rptView",
                    Value = rptView ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "beginReportingPeriod",
                    Value = beginReportingPeriod ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "endReportingPeriod",
                    Value = endReportingPeriod ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<report_sp_PHTotalsStringValuesReportResult>("EXEC @returnValue = [dbo].[report_sp_PHTotalsStringValuesReport] @unitId = @unitId, @includeSubUnits = @includeSubUnits, @collocated = @collocated, @rptView = @rptView, @beginReportingPeriod = @beginReportingPeriod, @endReportingPeriod = @endReportingPeriod", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<report_sp_PHTotalsSuicideMethodsReportResult>> report_sp_PHTotalsSuicideMethodsReportAsync(int? unitId, bool? includeSubUnits, byte? collocated, int? rptView, DateTime? beginReportingPeriod, DateTime? endReportingPeriod, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "unitId",
                    Value = unitId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "includeSubUnits",
                    Value = includeSubUnits ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "collocated",
                    Value = collocated ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "rptView",
                    Value = rptView ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "beginReportingPeriod",
                    Value = beginReportingPeriod ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "endReportingPeriod",
                    Value = endReportingPeriod ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<report_sp_PHTotalsSuicideMethodsReportResult>("EXEC @returnValue = [dbo].[report_sp_PHTotalsSuicideMethodsReport] @unitId = @unitId, @includeSubUnits = @includeSubUnits, @collocated = @collocated, @rptView = @rptView, @beginReportingPeriod = @beginReportingPeriod, @endReportingPeriod = @endReportingPeriod", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> report_sp_SaveStoredResultAsync(int? userId, string? reportTitle, string? resultData, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reportTitle",
                    Size = 200,
                    Value = reportTitle ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "resultData",
                    Size = -1,
                    Value = resultData ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[report_sp_SaveStoredResult] @userId = @userId, @reportTitle = @reportTitle, @resultData = @resultData", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> RS_ChangeCaseTypeAsync(string? caseid, string? caseType, string? caseTypeOther, string? subCaseType, string? subCaseTypeOther, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "caseid",
                    Size = 50,
                    Value = caseid ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "caseType",
                    Size = 50,
                    Value = caseType ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "caseTypeOther",
                    Size = 50,
                    Value = caseTypeOther ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "subCaseType",
                    Size = 50,
                    Value = subCaseType ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "subCaseTypeOther",
                    Size = 50,
                    Value = subCaseTypeOther ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[RS_ChangeCaseType] @caseid = @caseid, @caseType = @caseType, @caseTypeOther = @caseTypeOther, @subCaseType = @subCaseType, @subCaseTypeOther = @subCaseTypeOther", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SearchDBForStringResult>> SearchDBForStringAsync(string? dataToFind, bool? exactMatch, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "DataToFind",
                    Size = 8000,
                    Value = dataToFind ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ExactMatch",
                    Value = exactMatch ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<SearchDBForStringResult>("EXEC @returnValue = [usp].[SearchDBForString] @DataToFind = @DataToFind, @ExactMatch = @ExactMatch", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SearchinallResult>> SearchinallAsync(string? strFind, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "strFind",
                    Size = -1,
                    Value = strFind ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<SearchinallResult>("EXEC @returnValue = [usp].[Searchinall] @strFind = @strFind", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_core_user_sp_GetPendingCountResult>> sp_core_user_sp_GetPendingCountAsync(int? userId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<sp_core_user_sp_GetPendingCountResult>("EXEC @returnValue = [dbo].[sp_core_user_sp_GetPendingCount] @userId = @userId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SpecialCaseRFAResult>> SpecialCaseRFAAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<SpecialCaseRFAResult>("EXEC @returnValue = [dbo].[SpecialCaseRFA]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SpecialCaseRFA2Result>> SpecialCaseRFA2Async(DateTime? beginDate, DateTime? endDate, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "beginDate",
                    Value = beginDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "endDate",
                    Value = endDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<SpecialCaseRFA2Result>("EXEC @returnValue = [dbo].[SpecialCaseRFA2] @beginDate = @beginDate, @endDate = @endDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SpecialCaseRFAByUnitResult>> SpecialCaseRFAByUnitAsync(DateTime? beginDate, DateTime? endDate, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "beginDate",
                    Value = beginDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "endDate",
                    Value = endDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<SpecialCaseRFAByUnitResult>("EXEC @returnValue = [dbo].[SpecialCaseRFAByUnit] @beginDate = @beginDate, @endDate = @endDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SpecialCaseRFAByUnitTESTResult>> SpecialCaseRFAByUnitTESTAsync(DateTime? beginDate, DateTime? endDate, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "beginDate",
                    Value = beginDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "endDate",
                    Value = endDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<SpecialCaseRFAByUnitTESTResult>("EXEC @returnValue = [dbo].[SpecialCaseRFAByUnitTEST] @beginDate = @beginDate, @endDate = @endDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SpecialCaseRFAGroupResult>> SpecialCaseRFAGroupAsync(DateTime? beginDate, DateTime? endDate, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "beginDate",
                    Value = beginDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "endDate",
                    Value = endDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<SpecialCaseRFAGroupResult>("EXEC @returnValue = [dbo].[SpecialCaseRFAGroup] @beginDate = @beginDate, @endDate = @endDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SuicideMethod_sp_GetAllResult>> SuicideMethod_sp_GetAllAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<SuicideMethod_sp_GetAllResult>("EXEC @returnValue = [dbo].[SuicideMethod_sp_GetAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TempGetAppIDResult>> TempGetAppIDAsync(string? appName, OutputParameter<int?> appId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterappId = new SqlParameter
            {
                ParameterName = "appId",
                Direction = ParameterDirection.InputOutput,
                Value = appId?.Value ?? Convert.DBNull,
                SqlDbType = SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "appName",
                    Size = 280,
                    Value = appName ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterappId,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<TempGetAppIDResult>("EXEC @returnValue = [dbo].[TempGetAppID] @appName = @appName, @appId = @appId OUTPUT", sqlParameters, cancellationToken);

            appId?.SetValue(parameterappId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TempGetStateItemResult>> TempGetStateItemAsync(string? id, OutputParameter<byte[]> itemShort, OutputParameter<bool?> locked, OutputParameter<DateTime?> lockDate, OutputParameter<int?> lockCookie, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameteritemShort = new SqlParameter
            {
                ParameterName = "itemShort",
                Size = 7000,
                Direction = ParameterDirection.InputOutput,
                Value = itemShort?.Value ?? Convert.DBNull,
                SqlDbType = SqlDbType.VarBinary,
            };
            var parameterlocked = new SqlParameter
            {
                ParameterName = "locked",
                Direction = ParameterDirection.InputOutput,
                Value = locked?.Value ?? Convert.DBNull,
                SqlDbType = SqlDbType.Bit,
            };
            var parameterlockDate = new SqlParameter
            {
                ParameterName = "lockDate",
                Direction = ParameterDirection.InputOutput,
                Value = lockDate?.Value ?? Convert.DBNull,
                SqlDbType = SqlDbType.DateTime,
            };
            var parameterlockCookie = new SqlParameter
            {
                ParameterName = "lockCookie",
                Direction = ParameterDirection.InputOutput,
                Value = lockCookie?.Value ?? Convert.DBNull,
                SqlDbType = SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Size = 176,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                parameteritemShort,
                parameterlocked,
                parameterlockDate,
                parameterlockCookie,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<TempGetStateItemResult>("EXEC @returnValue = [dbo].[TempGetStateItem] @id = @id, @itemShort = @itemShort OUTPUT, @locked = @locked OUTPUT, @lockDate = @lockDate OUTPUT, @lockCookie = @lockCookie OUTPUT", sqlParameters, cancellationToken);

            itemShort?.SetValue(parameteritemShort.Value);
            locked?.SetValue(parameterlocked.Value);
            lockDate?.SetValue(parameterlockDate.Value);
            lockCookie?.SetValue(parameterlockCookie.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TempGetStateItem2Result>> TempGetStateItem2Async(string? id, OutputParameter<byte[]> itemShort, OutputParameter<bool?> locked, OutputParameter<int?> lockAge, OutputParameter<int?> lockCookie, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameteritemShort = new SqlParameter
            {
                ParameterName = "itemShort",
                Size = 7000,
                Direction = ParameterDirection.InputOutput,
                Value = itemShort?.Value ?? Convert.DBNull,
                SqlDbType = SqlDbType.VarBinary,
            };
            var parameterlocked = new SqlParameter
            {
                ParameterName = "locked",
                Direction = ParameterDirection.InputOutput,
                Value = locked?.Value ?? Convert.DBNull,
                SqlDbType = SqlDbType.Bit,
            };
            var parameterlockAge = new SqlParameter
            {
                ParameterName = "lockAge",
                Direction = ParameterDirection.InputOutput,
                Value = lockAge?.Value ?? Convert.DBNull,
                SqlDbType = SqlDbType.Int,
            };
            var parameterlockCookie = new SqlParameter
            {
                ParameterName = "lockCookie",
                Direction = ParameterDirection.InputOutput,
                Value = lockCookie?.Value ?? Convert.DBNull,
                SqlDbType = SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Size = 176,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                parameteritemShort,
                parameterlocked,
                parameterlockAge,
                parameterlockCookie,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<TempGetStateItem2Result>("EXEC @returnValue = [dbo].[TempGetStateItem2] @id = @id, @itemShort = @itemShort OUTPUT, @locked = @locked OUTPUT, @lockAge = @lockAge OUTPUT, @lockCookie = @lockCookie OUTPUT", sqlParameters, cancellationToken);

            itemShort?.SetValue(parameteritemShort.Value);
            locked?.SetValue(parameterlocked.Value);
            lockAge?.SetValue(parameterlockAge.Value);
            lockCookie?.SetValue(parameterlockCookie.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TempGetStateItem3Result>> TempGetStateItem3Async(string? id, OutputParameter<byte[]> itemShort, OutputParameter<bool?> locked, OutputParameter<int?> lockAge, OutputParameter<int?> lockCookie, OutputParameter<int?> actionFlags, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameteritemShort = new SqlParameter
            {
                ParameterName = "itemShort",
                Size = 7000,
                Direction = ParameterDirection.InputOutput,
                Value = itemShort?.Value ?? Convert.DBNull,
                SqlDbType = SqlDbType.VarBinary,
            };
            var parameterlocked = new SqlParameter
            {
                ParameterName = "locked",
                Direction = ParameterDirection.InputOutput,
                Value = locked?.Value ?? Convert.DBNull,
                SqlDbType = SqlDbType.Bit,
            };
            var parameterlockAge = new SqlParameter
            {
                ParameterName = "lockAge",
                Direction = ParameterDirection.InputOutput,
                Value = lockAge?.Value ?? Convert.DBNull,
                SqlDbType = SqlDbType.Int,
            };
            var parameterlockCookie = new SqlParameter
            {
                ParameterName = "lockCookie",
                Direction = ParameterDirection.InputOutput,
                Value = lockCookie?.Value ?? Convert.DBNull,
                SqlDbType = SqlDbType.Int,
            };
            var parameteractionFlags = new SqlParameter
            {
                ParameterName = "actionFlags",
                Direction = ParameterDirection.InputOutput,
                Value = actionFlags?.Value ?? Convert.DBNull,
                SqlDbType = SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Size = 176,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                parameteritemShort,
                parameterlocked,
                parameterlockAge,
                parameterlockCookie,
                parameteractionFlags,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<TempGetStateItem3Result>("EXEC @returnValue = [dbo].[TempGetStateItem3] @id = @id, @itemShort = @itemShort OUTPUT, @locked = @locked OUTPUT, @lockAge = @lockAge OUTPUT, @lockCookie = @lockCookie OUTPUT, @actionFlags = @actionFlags OUTPUT", sqlParameters, cancellationToken);

            itemShort?.SetValue(parameteritemShort.Value);
            locked?.SetValue(parameterlocked.Value);
            lockAge?.SetValue(parameterlockAge.Value);
            lockCookie?.SetValue(parameterlockCookie.Value);
            actionFlags?.SetValue(parameteractionFlags.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TempGetStateItemExclusiveResult>> TempGetStateItemExclusiveAsync(string? id, OutputParameter<byte[]> itemShort, OutputParameter<bool?> locked, OutputParameter<DateTime?> lockDate, OutputParameter<int?> lockCookie, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameteritemShort = new SqlParameter
            {
                ParameterName = "itemShort",
                Size = 7000,
                Direction = ParameterDirection.InputOutput,
                Value = itemShort?.Value ?? Convert.DBNull,
                SqlDbType = SqlDbType.VarBinary,
            };
            var parameterlocked = new SqlParameter
            {
                ParameterName = "locked",
                Direction = ParameterDirection.InputOutput,
                Value = locked?.Value ?? Convert.DBNull,
                SqlDbType = SqlDbType.Bit,
            };
            var parameterlockDate = new SqlParameter
            {
                ParameterName = "lockDate",
                Direction = ParameterDirection.InputOutput,
                Value = lockDate?.Value ?? Convert.DBNull,
                SqlDbType = SqlDbType.DateTime,
            };
            var parameterlockCookie = new SqlParameter
            {
                ParameterName = "lockCookie",
                Direction = ParameterDirection.InputOutput,
                Value = lockCookie?.Value ?? Convert.DBNull,
                SqlDbType = SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Size = 176,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                parameteritemShort,
                parameterlocked,
                parameterlockDate,
                parameterlockCookie,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<TempGetStateItemExclusiveResult>("EXEC @returnValue = [dbo].[TempGetStateItemExclusive] @id = @id, @itemShort = @itemShort OUTPUT, @locked = @locked OUTPUT, @lockDate = @lockDate OUTPUT, @lockCookie = @lockCookie OUTPUT", sqlParameters, cancellationToken);

            itemShort?.SetValue(parameteritemShort.Value);
            locked?.SetValue(parameterlocked.Value);
            lockDate?.SetValue(parameterlockDate.Value);
            lockCookie?.SetValue(parameterlockCookie.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TempGetStateItemExclusive2Result>> TempGetStateItemExclusive2Async(string? id, OutputParameter<byte[]> itemShort, OutputParameter<bool?> locked, OutputParameter<int?> lockAge, OutputParameter<int?> lockCookie, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameteritemShort = new SqlParameter
            {
                ParameterName = "itemShort",
                Size = 7000,
                Direction = ParameterDirection.InputOutput,
                Value = itemShort?.Value ?? Convert.DBNull,
                SqlDbType = SqlDbType.VarBinary,
            };
            var parameterlocked = new SqlParameter
            {
                ParameterName = "locked",
                Direction = ParameterDirection.InputOutput,
                Value = locked?.Value ?? Convert.DBNull,
                SqlDbType = SqlDbType.Bit,
            };
            var parameterlockAge = new SqlParameter
            {
                ParameterName = "lockAge",
                Direction = ParameterDirection.InputOutput,
                Value = lockAge?.Value ?? Convert.DBNull,
                SqlDbType = SqlDbType.Int,
            };
            var parameterlockCookie = new SqlParameter
            {
                ParameterName = "lockCookie",
                Direction = ParameterDirection.InputOutput,
                Value = lockCookie?.Value ?? Convert.DBNull,
                SqlDbType = SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Size = 176,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                parameteritemShort,
                parameterlocked,
                parameterlockAge,
                parameterlockCookie,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<TempGetStateItemExclusive2Result>("EXEC @returnValue = [dbo].[TempGetStateItemExclusive2] @id = @id, @itemShort = @itemShort OUTPUT, @locked = @locked OUTPUT, @lockAge = @lockAge OUTPUT, @lockCookie = @lockCookie OUTPUT", sqlParameters, cancellationToken);

            itemShort?.SetValue(parameteritemShort.Value);
            locked?.SetValue(parameterlocked.Value);
            lockAge?.SetValue(parameterlockAge.Value);
            lockCookie?.SetValue(parameterlockCookie.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TempGetStateItemExclusive3Result>> TempGetStateItemExclusive3Async(string? id, OutputParameter<byte[]> itemShort, OutputParameter<bool?> locked, OutputParameter<int?> lockAge, OutputParameter<int?> lockCookie, OutputParameter<int?> actionFlags, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameteritemShort = new SqlParameter
            {
                ParameterName = "itemShort",
                Size = 7000,
                Direction = ParameterDirection.InputOutput,
                Value = itemShort?.Value ?? Convert.DBNull,
                SqlDbType = SqlDbType.VarBinary,
            };
            var parameterlocked = new SqlParameter
            {
                ParameterName = "locked",
                Direction = ParameterDirection.InputOutput,
                Value = locked?.Value ?? Convert.DBNull,
                SqlDbType = SqlDbType.Bit,
            };
            var parameterlockAge = new SqlParameter
            {
                ParameterName = "lockAge",
                Direction = ParameterDirection.InputOutput,
                Value = lockAge?.Value ?? Convert.DBNull,
                SqlDbType = SqlDbType.Int,
            };
            var parameterlockCookie = new SqlParameter
            {
                ParameterName = "lockCookie",
                Direction = ParameterDirection.InputOutput,
                Value = lockCookie?.Value ?? Convert.DBNull,
                SqlDbType = SqlDbType.Int,
            };
            var parameteractionFlags = new SqlParameter
            {
                ParameterName = "actionFlags",
                Direction = ParameterDirection.InputOutput,
                Value = actionFlags?.Value ?? Convert.DBNull,
                SqlDbType = SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Size = 176,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                parameteritemShort,
                parameterlocked,
                parameterlockAge,
                parameterlockCookie,
                parameteractionFlags,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<TempGetStateItemExclusive3Result>("EXEC @returnValue = [dbo].[TempGetStateItemExclusive3] @id = @id, @itemShort = @itemShort OUTPUT, @locked = @locked OUTPUT, @lockAge = @lockAge OUTPUT, @lockCookie = @lockCookie OUTPUT, @actionFlags = @actionFlags OUTPUT", sqlParameters, cancellationToken);

            itemShort?.SetValue(parameteritemShort.Value);
            locked?.SetValue(parameterlocked.Value);
            lockAge?.SetValue(parameterlockAge.Value);
            lockCookie?.SetValue(parameterlockCookie.Value);
            actionFlags?.SetValue(parameteractionFlags.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> TempGetVersionAsync(OutputParameter<string> ver, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterver = new SqlParameter
            {
                ParameterName = "ver",
                Size = 10,
                Direction = ParameterDirection.InputOutput,
                Value = ver?.Value ?? Convert.DBNull,
                SqlDbType = SqlDbType.Char,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterver,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[TempGetVersion] @ver = @ver OUTPUT", sqlParameters, cancellationToken);

            ver?.SetValue(parameterver.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> TempInsertStateItemLongAsync(string? id, byte[]? itemLong, int? timeout, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Size = 176,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "itemLong",
                    Value = itemLong ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Image,
                },
                new SqlParameter
                {
                    ParameterName = "timeout",
                    Value = timeout ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[TempInsertStateItemLong] @id = @id, @itemLong = @itemLong, @timeout = @timeout", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> TempInsertStateItemShortAsync(string? id, byte[]? itemShort, int? timeout, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Size = 176,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "itemShort",
                    Size = 7000,
                    Value = itemShort ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarBinary,
                },
                new SqlParameter
                {
                    ParameterName = "timeout",
                    Value = timeout ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[TempInsertStateItemShort] @id = @id, @itemShort = @itemShort, @timeout = @timeout", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> TempInsertUninitializedItemAsync(string? id, byte[]? itemShort, int? timeout, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Size = 176,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "itemShort",
                    Size = 7000,
                    Value = itemShort ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarBinary,
                },
                new SqlParameter
                {
                    ParameterName = "timeout",
                    Value = timeout ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[TempInsertUninitializedItem] @id = @id, @itemShort = @itemShort, @timeout = @timeout", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> TempReleaseStateItemExclusiveAsync(string? id, int? lockCookie, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Size = 176,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lockCookie",
                    Value = lockCookie ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[TempReleaseStateItemExclusive] @id = @id, @lockCookie = @lockCookie", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> TempRemoveStateItemAsync(string? id, int? lockCookie, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Size = 176,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lockCookie",
                    Value = lockCookie ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[TempRemoveStateItem] @id = @id, @lockCookie = @lockCookie", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> TempResetTimeoutAsync(string? id, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Size = 176,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[TempResetTimeout] @id = @id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> TempUpdateStateItemLongAsync(string? id, byte[]? itemLong, int? timeout, int? lockCookie, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Size = 176,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "itemLong",
                    Value = itemLong ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Image,
                },
                new SqlParameter
                {
                    ParameterName = "timeout",
                    Value = timeout ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "lockCookie",
                    Value = lockCookie ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[TempUpdateStateItemLong] @id = @id, @itemLong = @itemLong, @timeout = @timeout, @lockCookie = @lockCookie", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> TempUpdateStateItemLongNullShortAsync(string? id, byte[]? itemLong, int? timeout, int? lockCookie, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Size = 176,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "itemLong",
                    Value = itemLong ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Image,
                },
                new SqlParameter
                {
                    ParameterName = "timeout",
                    Value = timeout ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "lockCookie",
                    Value = lockCookie ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[TempUpdateStateItemLongNullShort] @id = @id, @itemLong = @itemLong, @timeout = @timeout, @lockCookie = @lockCookie", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> TempUpdateStateItemShortAsync(string? id, byte[]? itemShort, int? timeout, int? lockCookie, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Size = 176,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "itemShort",
                    Size = 7000,
                    Value = itemShort ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarBinary,
                },
                new SqlParameter
                {
                    ParameterName = "timeout",
                    Value = timeout ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "lockCookie",
                    Value = lockCookie ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[TempUpdateStateItemShort] @id = @id, @itemShort = @itemShort, @timeout = @timeout, @lockCookie = @lockCookie", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> TempUpdateStateItemShortNullLongAsync(string? id, byte[]? itemShort, int? timeout, int? lockCookie, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Size = 176,
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "itemShort",
                    Size = 7000,
                    Value = itemShort ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarBinary,
                },
                new SqlParameter
                {
                    ParameterName = "timeout",
                    Value = timeout ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "lockCookie",
                    Value = lockCookie ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[TempUpdateStateItemShortNullLong] @id = @id, @itemShort = @itemShort, @timeout = @timeout, @lockCookie = @lockCookie", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<tmp_report_RowaCountResult>> tmp_report_RowaCountAsync(DateTime? beginDate, DateTime? endDate, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "beginDate",
                    Value = beginDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "endDate",
                    Value = endDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<tmp_report_RowaCountResult>("EXEC @returnValue = [dbo].[tmp_report_RowaCount] @beginDate = @beginDate, @endDate = @endDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<tmp1_report_sp_GetDisapprovedLodResult>> tmp1_report_sp_GetDisapprovedLodAsync(DateTime? beginDate, DateTime? endDate, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "beginDate",
                    Value = beginDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "endDate",
                    Value = endDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<tmp1_report_sp_GetDisapprovedLodResult>("EXEC @returnValue = [dbo].[tmp1_report_sp_GetDisapprovedLod] @beginDate = @beginDate, @endDate = @endDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<UpdatePreviousDaysSGCASESResult>> UpdatePreviousDaysSGCASESAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<UpdatePreviousDaysSGCASESResult>("EXEC @returnValue = [usp].[UpdatePreviousDaysSGCASES]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> UpdatePreviousWeekECTCASESAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [usp].[UpdatePreviousWeekECTCASES]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Utility_AddReminderEmailSettingAsync(int? pworkflowId, string? pstatus, string? pcompo, string? pgroup, string? ptemplate, int? pinterval, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pworkflowId",
                    Value = pworkflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pstatus",
                    Size = 256,
                    Value = pstatus ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pcompo",
                    Size = 128,
                    Value = pcompo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pgroup",
                    Size = 128,
                    Value = pgroup ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ptemplate",
                    Size = 128,
                    Value = ptemplate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pinterval",
                    Value = pinterval ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Utility_AddReminderEmailSetting] @pworkflowId = @pworkflowId, @pstatus = @pstatus, @pcompo = @pcompo, @pgroup = @pgroup, @ptemplate = @ptemplate, @pinterval = @pinterval", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> utility_delete_documentCategoryViewAsync(string? categoryDesc, int? docViewId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "categoryDesc",
                    Size = 100,
                    Value = categoryDesc ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "docViewId",
                    Value = docViewId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[utility_delete_documentCategoryView] @categoryDesc = @categoryDesc, @docViewId = @docViewId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> utility_insert_document_categoryAsync(int? id, string? catDescr, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "catDescr",
                    Size = 50,
                    Value = catDescr ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[utility_insert_document_category] @Id = @Id, @catDescr = @catDescr", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> utility_insert_documentCategoryViewAsync(string? categoryDesc, int? docViewId, int? sortOrder, bool? isRedacted, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "categoryDesc",
                    Size = 100,
                    Value = categoryDesc ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "docViewId",
                    Value = docViewId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "isRedacted",
                    Value = isRedacted ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[utility_insert_documentCategoryView] @categoryDesc = @categoryDesc, @docViewId = @docViewId, @sortOrder = @sortOrder, @isRedacted = @isRedacted", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> utility_pascode_sp_UpdateUnitChainRecordAsync(int? userId, string? chainType, int? csId, int? parentCSCId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "chainType",
                    Size = 40,
                    Value = chainType ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "csId",
                    Value = csId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "parentCSCId",
                    Value = parentCSCId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[utility_pascode_sp_UpdateUnitChainRecord] @userId = @userId, @chainType = @chainType, @csId = @csId, @parentCSCId = @parentCSCId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> utility_rename_document_categoryAsync(string? oldDescription, string? newDescription, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "oldDescription",
                    Size = 150,
                    Value = oldDescription ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "newDescription",
                    Size = 150,
                    Value = newDescription ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[utility_rename_document_category] @oldDescription = @oldDescription, @newDescription = @newDescription", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> utility_rpt_sp_InsertQueryFieldAsync(string? fieldName, string? queryType, int? sortOrder, string? tableName, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "fieldName",
                    Size = 50,
                    Value = fieldName ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "queryType",
                    Size = 20,
                    Value = queryType ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "tableName",
                    Size = 50,
                    Value = tableName ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[utility_rpt_sp_InsertQueryField] @fieldName = @fieldName, @queryType = @queryType, @sortOrder = @sortOrder, @tableName = @tableName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> utility_rpt_sp_InsertQuerySourceAsync(string? displayName, string? fieldName, string? tableName, string? dataType, string? lookupSource, string? lookupValue, string? lookupText, string? lookupSort, string? lookupWhere, string? lookupWhereValue, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "displayName",
                    Size = 50,
                    Value = displayName ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "fieldName",
                    Size = 50,
                    Value = fieldName ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "tableName",
                    Size = 50,
                    Value = tableName ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "dataType",
                    Size = 1,
                    Value = dataType ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "lookupSource",
                    Size = 50,
                    Value = lookupSource ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lookupValue",
                    Size = 50,
                    Value = lookupValue ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lookupText",
                    Size = 50,
                    Value = lookupText ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lookupSort",
                    Size = 50,
                    Value = lookupSort ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lookupWhere",
                    Size = 50,
                    Value = lookupWhere ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lookupWhereValue",
                    Size = 50,
                    Value = lookupWhereValue ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[utility_rpt_sp_InsertQuerySource] @displayName = @displayName, @fieldName = @fieldName, @tableName = @tableName, @dataType = @dataType, @lookupSource = @lookupSource, @lookupValue = @lookupValue, @lookupText = @lookupText, @lookupSort = @lookupSort, @lookupWhere = @lookupWhere, @lookupWhereValue = @lookupWhereValue", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> utility_rpt_sp_InsertUserQueryAsync(int? userId, string? queryTitle, DateTime? createdDate, DateTime? modifiedDate, bool? transient, bool? shared, string? outputFields, string? sortFields, OutputParameter<int?> out_queryId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterout_queryId = new SqlParameter
            {
                ParameterName = "out_queryId",
                Direction = ParameterDirection.InputOutput,
                Value = out_queryId?.Value ?? Convert.DBNull,
                SqlDbType = SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "queryTitle",
                    Size = 50,
                    Value = queryTitle ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "createdDate",
                    Value = createdDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "modifiedDate",
                    Value = modifiedDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "transient",
                    Value = transient ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "shared",
                    Value = shared ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "outputFields",
                    Size = -1,
                    Value = outputFields ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortFields",
                    Size = -1,
                    Value = sortFields ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterout_queryId,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[utility_rpt_sp_InsertUserQuery] @userId = @userId, @queryTitle = @queryTitle, @createdDate = @createdDate, @modifiedDate = @modifiedDate, @transient = @transient, @shared = @shared, @outputFields = @outputFields, @sortFields = @sortFields, @out_queryId = @out_queryId OUTPUT", sqlParameters, cancellationToken);

            out_queryId?.SetValue(parameterout_queryId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> utility_rpt_sp_InsertUserQueryClauseAsync(int? queryId, string? whereType, OutputParameter<int?> out_clauseId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterout_clauseId = new SqlParameter
            {
                ParameterName = "out_clauseId",
                Direction = ParameterDirection.InputOutput,
                Value = out_clauseId?.Value ?? Convert.DBNull,
                SqlDbType = SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "queryId",
                    Value = queryId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "whereType",
                    Size = 3,
                    Value = whereType ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterout_clauseId,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[utility_rpt_sp_InsertUserQueryClause] @queryId = @queryId, @whereType = @whereType, @out_clauseId = @out_clauseId OUTPUT", sqlParameters, cancellationToken);

            out_clauseId?.SetValue(parameterout_clauseId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<utility_rpt_sp_InsertUserQueryParamResult>> utility_rpt_sp_InsertUserQueryParamAsync(int? clauseId, string? sourceDisplayName, string? sourceTableName, string? operatorType, string? whereType, string? startValue, string? startDisplay, string? endValue, string? endDisplay, int? executeOrder, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "clauseId",
                    Value = clauseId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sourceDisplayName",
                    Size = 50,
                    Value = sourceDisplayName ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sourceTableName",
                    Size = 50,
                    Value = sourceTableName ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "operatorType",
                    Size = 50,
                    Value = operatorType ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "whereType",
                    Size = 3,
                    Value = whereType ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "startValue",
                    Size = 100,
                    Value = startValue ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "startDisplay",
                    Size = 100,
                    Value = startDisplay ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "endValue",
                    Size = 100,
                    Value = endValue ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "endDisplay",
                    Size = 100,
                    Value = endDisplay ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "executeOrder",
                    Value = executeOrder ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<utility_rpt_sp_InsertUserQueryParamResult>("EXEC @returnValue = [dbo].[utility_rpt_sp_InsertUserQueryParam] @clauseId = @clauseId, @sourceDisplayName = @sourceDisplayName, @sourceTableName = @sourceTableName, @operatorType = @operatorType, @whereType = @whereType, @startValue = @startValue, @startDisplay = @startDisplay, @endValue = @endValue, @endDisplay = @endDisplay, @executeOrder = @executeOrder", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> utility_workflow_sp_DeleteOptionAsync(int? workflowId, string? statusInTitle, string? statusOutTitle, string? optionText, bool? active, byte? sortOrder, string? templateTitle, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "workflowId",
                    Value = workflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "statusInTitle",
                    Size = 50,
                    Value = statusInTitle ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "statusOutTitle",
                    Size = 50,
                    Value = statusOutTitle ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "optionText",
                    Size = 100,
                    Value = optionText ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "active",
                    Value = active ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "templateTitle",
                    Size = 50,
                    Value = templateTitle ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[utility_workflow_sp_DeleteOption] @workflowId = @workflowId, @statusInTitle = @statusInTitle, @statusOutTitle = @statusOutTitle, @optionText = @optionText, @active = @active, @sortOrder = @sortOrder, @templateTitle = @templateTitle", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> utility_workflow_sp_DeleteOptionActionAsync(int? workflowId, string? statusDescription, string? optionText, string? actionName, string? actionTarget, string? actionData, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "workflowId",
                    Value = workflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "statusDescription",
                    Size = 50,
                    Value = statusDescription ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "optionText",
                    Size = 100,
                    Value = optionText ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "actionName",
                    Size = 50,
                    Value = actionName ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "actionTarget",
                    Size = 50,
                    Value = actionTarget ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "actionData",
                    Size = 50,
                    Value = actionData ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[utility_workflow_sp_DeleteOptionAction] @workflowId = @workflowId, @statusDescription = @statusDescription, @optionText = @optionText, @actionName = @actionName, @actionTarget = @actionTarget, @actionData = @actionData", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> utility_workflow_sp_DeleteOptionRuleAsync(int? workflowId, string? statusDescription, string? optionText, string? ruleName, string? ruleType, string? ruleData, bool? checkAll, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "workflowId",
                    Value = workflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "statusDescription",
                    Size = 50,
                    Value = statusDescription ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "optionText",
                    Size = 100,
                    Value = optionText ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ruleName",
                    Size = 50,
                    Value = ruleName ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ruleType",
                    Size = 50,
                    Value = ruleType ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ruleData",
                    Size = 1000,
                    Value = ruleData ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "checkAll",
                    Value = checkAll ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[utility_workflow_sp_DeleteOptionRule] @workflowId = @workflowId, @statusDescription = @statusDescription, @optionText = @optionText, @ruleName = @ruleName, @ruleType = @ruleType, @ruleData = @ruleData, @checkAll = @checkAll", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> utility_workflow_sp_DeleteOptionsAsync(int? workflowId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "workflowId",
                    Value = workflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[utility_workflow_sp_DeleteOptions] @workflowId = @workflowId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<utility_workflow_sp_GetPageAccessPermsStatementsResult>> utility_workflow_sp_GetPageAccessPermsStatementsAsync(int? workflowId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "workflowId",
                    Value = workflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<utility_workflow_sp_GetPageAccessPermsStatementsResult>("EXEC @returnValue = [dbo].[utility_workflow_sp_GetPageAccessPermsStatements] @workflowId = @workflowId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> utility_workflow_sp_Insert_Special_RuleAsync(int? workflowId, string? statusDescription, string? optionText, string? ruleName, string? ruleType, string? ruleData, bool? checkAll, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "workflowId",
                    Value = workflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "statusDescription",
                    Size = 50,
                    Value = statusDescription ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "optionText",
                    Size = 100,
                    Value = optionText ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ruleName",
                    Size = 50,
                    Value = ruleName ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ruleType",
                    Size = 50,
                    Value = ruleType ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ruleData",
                    Size = 1000,
                    Value = ruleData ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "checkAll",
                    Value = checkAll ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[utility_workflow_sp_Insert_Special_Rule] @workflowId = @workflowId, @statusDescription = @statusDescription, @optionText = @optionText, @ruleName = @ruleName, @ruleType = @ruleType, @ruleData = @ruleData, @checkAll = @checkAll", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<utility_workflow_sp_InsertGroupPermissionResult>> utility_workflow_sp_InsertGroupPermissionAsync(string? groupName, string? permName, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "groupName",
                    Size = 100,
                    Value = groupName ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "permName",
                    Size = 50,
                    Value = permName ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<utility_workflow_sp_InsertGroupPermissionResult>("EXEC @returnValue = [dbo].[utility_workflow_sp_InsertGroupPermission] @groupName = @groupName, @permName = @permName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> utility_workflow_sp_InsertOptionAsync(int? workflowId, string? statusInTitle, string? statusOutTitle, string? optionText, bool? active, byte? sortOrder, string? templateTitle, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "workflowId",
                    Value = workflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "statusInTitle",
                    Size = 50,
                    Value = statusInTitle ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "statusOutTitle",
                    Size = 50,
                    Value = statusOutTitle ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "optionText",
                    Size = 100,
                    Value = optionText ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "active",
                    Value = active ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "templateTitle",
                    Size = 50,
                    Value = templateTitle ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[utility_workflow_sp_InsertOption] @workflowId = @workflowId, @statusInTitle = @statusInTitle, @statusOutTitle = @statusOutTitle, @optionText = @optionText, @active = @active, @sortOrder = @sortOrder, @templateTitle = @templateTitle", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> utility_workflow_sp_InsertOptionActionAsync(int? workflowId, string? statusDescription, string? optionDisplayText, string? actionTypeText, string? targetName, string? dataTitle, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "workflowId",
                    Value = workflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "statusDescription",
                    Size = 50,
                    Value = statusDescription ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "optionDisplayText",
                    Size = 100,
                    Value = optionDisplayText ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "actionTypeText",
                    Size = 50,
                    Value = actionTypeText ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "targetName",
                    Size = 100,
                    Value = targetName ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "dataTitle",
                    Size = 50,
                    Value = dataTitle ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[utility_workflow_sp_InsertOptionAction] @workflowId = @workflowId, @statusDescription = @statusDescription, @optionDisplayText = @optionDisplayText, @actionTypeText = @actionTypeText, @targetName = @targetName, @dataTitle = @dataTitle", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> utility_workflow_sp_InsertOptionRuleAsync(int? workflowId, string? statusDescription, string? optionText, string? ruleName, string? ruleType, string? ruleData, bool? checkAll, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "workflowId",
                    Value = workflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "statusDescription",
                    Size = 50,
                    Value = statusDescription ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "optionText",
                    Size = 100,
                    Value = optionText ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ruleName",
                    Size = 50,
                    Value = ruleName ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ruleType",
                    Size = 50,
                    Value = ruleType ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ruleData",
                    Size = 1000,
                    Value = ruleData ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "checkAll",
                    Value = checkAll ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[utility_workflow_sp_InsertOptionRule] @workflowId = @workflowId, @statusDescription = @statusDescription, @optionText = @optionText, @ruleName = @ruleName, @ruleType = @ruleType, @ruleData = @ruleData, @checkAll = @checkAll", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<utility_workflow_sp_InsertPageResult>> utility_workflow_sp_InsertPageAsync(short? pageId, string? title, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pageId",
                    Value = pageId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "title",
                    Size = 50,
                    Value = title ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<utility_workflow_sp_InsertPageResult>("EXEC @returnValue = [dbo].[utility_workflow_sp_InsertPage] @pageId = @pageId, @title = @title", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<utility_workflow_sp_InsertPermissionResult>> utility_workflow_sp_InsertPermissionAsync(short? permId, string? permName, string? permDesc, bool? exclude, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "permId",
                    Value = permId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "permName",
                    Size = 50,
                    Value = permName ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "permDesc",
                    Size = 100,
                    Value = permDesc ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "exclude",
                    Value = exclude ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<utility_workflow_sp_InsertPermissionResult>("EXEC @returnValue = [dbo].[utility_workflow_sp_InsertPermission] @permId = @permId, @permName = @permName, @permDesc = @permDesc, @exclude = @exclude", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<utility_workflow_sp_InsertStatusCodeResult>> utility_workflow_sp_InsertStatusCodeAsync(int? statusId, string? description, string? moduleName, string? compo, string? groupName, bool? isFinal, bool? isApproved, bool? canAppeal, string? filter, byte? displayOrder, bool? isCancel, bool? isDisposition, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "statusId",
                    Value = statusId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 50,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "moduleName",
                    Size = 50,
                    Value = moduleName ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "compo",
                    Size = 1,
                    Value = compo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "groupName",
                    Size = 50,
                    Value = groupName ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "isFinal",
                    Value = isFinal ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "isApproved",
                    Value = isApproved ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "canAppeal",
                    Value = canAppeal ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "filter",
                    Size = 50,
                    Value = filter ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "displayOrder",
                    Value = displayOrder ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "isCancel",
                    Value = isCancel ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "isDisposition",
                    Value = isDisposition ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<utility_workflow_sp_InsertStatusCodeResult>("EXEC @returnValue = [dbo].[utility_workflow_sp_InsertStatusCode] @statusId = @statusId, @description = @description, @moduleName = @moduleName, @compo = @compo, @groupName = @groupName, @isFinal = @isFinal, @isApproved = @isApproved, @canAppeal = @canAppeal, @filter = @filter, @displayOrder = @displayOrder, @isCancel = @isCancel, @isDisposition = @isDisposition", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> utility_workflow_sp_InsertWorkflowAsync(byte? workflowId, byte? moduleId, string? compo, string? title, bool? formal, bool? active, int? initialStatus, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "workflowId",
                    Value = workflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "moduleId",
                    Value = moduleId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "compo",
                    Size = 1,
                    Value = compo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "title",
                    Size = 50,
                    Value = title ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "formal",
                    Value = formal ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "active",
                    Value = active ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "initialStatus",
                    Value = initialStatus ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[utility_workflow_sp_InsertWorkflow] @workflowId = @workflowId, @moduleId = @moduleId, @compo = @compo, @title = @title, @formal = @formal, @active = @active, @initialStatus = @initialStatus", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<utility_workflow_sp_InsertWorkflowPermissionResult>> utility_workflow_sp_InsertWorkflowPermissionAsync(string? workflow, string? permName, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "workflow",
                    Size = 100,
                    Value = workflow ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "permName",
                    Size = 50,
                    Value = permName ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<utility_workflow_sp_InsertWorkflowPermissionResult>("EXEC @returnValue = [dbo].[utility_workflow_sp_InsertWorkflowPermission] @workflow = @workflow, @permName = @permName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<utility_workflow_sp_InsertWorkflowViewResult>> utility_workflow_sp_InsertWorkflowViewAsync(string? workflow, string? page, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "workflow",
                    Size = 50,
                    Value = workflow ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "page",
                    Size = 50,
                    Value = page ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<utility_workflow_sp_InsertWorkflowViewResult>("EXEC @returnValue = [dbo].[utility_workflow_sp_InsertWorkflowView] @workflow = @workflow, @page = @page", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<utility_workflow_sp_InsertWorkflowViewByWorkflowIdResult>> utility_workflow_sp_InsertWorkflowViewByWorkflowIdAsync(int? workflowId, string? page, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "workflowId",
                    Value = workflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "page",
                    Size = 50,
                    Value = page ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<utility_workflow_sp_InsertWorkflowViewByWorkflowIdResult>("EXEC @returnValue = [dbo].[utility_workflow_sp_InsertWorkflowViewByWorkflowId] @workflowId = @workflowId, @page = @page", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<utility_workflow_sp_InsertWorkStatusResult>> utility_workflow_sp_InsertWorkStatusAsync(int? ws_id, string? workflowTitle, string? statusTitle, byte? sortOrder, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ws_id",
                    Value = ws_id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "workflowTitle",
                    Size = 50,
                    Value = workflowTitle ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "statusTitle",
                    Size = 50,
                    Value = statusTitle ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<utility_workflow_sp_InsertWorkStatusResult>("EXEC @returnValue = [dbo].[utility_workflow_sp_InsertWorkStatus] @ws_id = @ws_id, @workflowTitle = @workflowTitle, @statusTitle = @statusTitle, @sortOrder = @sortOrder", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<utility_workflow_sp_InsertWorkStatusByWorkflowIdResult>> utility_workflow_sp_InsertWorkStatusByWorkflowIdAsync(int? ws_id, int? moduleId, int? workflowId, string? statusTitle, byte? sortOrder, bool? isBoardStatus, bool? isHolding, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ws_id",
                    Value = ws_id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "moduleId",
                    Value = moduleId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "workflowId",
                    Value = workflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "statusTitle",
                    Size = 50,
                    Value = statusTitle ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "isBoardStatus",
                    Value = isBoardStatus ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "isHolding",
                    Value = isHolding ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<utility_workflow_sp_InsertWorkStatusByWorkflowIdResult>("EXEC @returnValue = [dbo].[utility_workflow_sp_InsertWorkStatusByWorkflowId] @ws_id = @ws_id, @moduleId = @moduleId, @workflowId = @workflowId, @statusTitle = @statusTitle, @sortOrder = @sortOrder, @isBoardStatus = @isBoardStatus, @isHolding = @isHolding", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> utility_workflow_sp_Page_Access_PermissionsAsync(int? workflowId, string? statusTitle, string? userGroup, string? pageTitle, int? access, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "workflowId",
                    Value = workflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "statusTitle",
                    Size = 50,
                    Value = statusTitle ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "userGroup",
                    Size = 50,
                    Value = userGroup ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pageTitle",
                    Size = 50,
                    Value = pageTitle ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "access",
                    Value = access ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[utility_workflow_sp_Page_Access_Permissions] @workflowId = @workflowId, @statusTitle = @statusTitle, @userGroup = @userGroup, @pageTitle = @pageTitle, @access = @access", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> utility_workflow_sp_Update_Page_Access_PermissionsAsync(string? workFlowTitle, string? statusTitle, string? userGroup, string? pageTitle, int? access, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "workFlowTitle",
                    Size = 50,
                    Value = workFlowTitle ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "statusTitle",
                    Size = 50,
                    Value = statusTitle ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "userGroup",
                    Size = 50,
                    Value = userGroup ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pageTitle",
                    Size = 50,
                    Value = pageTitle ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "access",
                    Value = access ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[utility_workflow_sp_Update_Page_Access_Permissions] @workFlowTitle = @workFlowTitle, @statusTitle = @statusTitle, @userGroup = @userGroup, @pageTitle = @pageTitle, @access = @access", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> utility_workflow_sp_UpdateOptionAsync(int? workflowId, string? statusInTitle, string? statusOutTitle, string? optionText, string? newStatusOutTitle, string? newOptionText, bool? newActive, byte? newSortOrder, string? newTemplateTitle, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "workflowId",
                    Value = workflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "statusInTitle",
                    Size = 50,
                    Value = statusInTitle ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "statusOutTitle",
                    Size = 50,
                    Value = statusOutTitle ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "optionText",
                    Size = 100,
                    Value = optionText ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "newStatusOutTitle",
                    Size = 50,
                    Value = newStatusOutTitle ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "newOptionText",
                    Size = 100,
                    Value = newOptionText ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "newActive",
                    Value = newActive ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "newSortOrder",
                    Value = newSortOrder ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "newTemplateTitle",
                    Size = 50,
                    Value = newTemplateTitle ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[utility_workflow_sp_UpdateOption] @workflowId = @workflowId, @statusInTitle = @statusInTitle, @statusOutTitle = @statusOutTitle, @optionText = @optionText, @newStatusOutTitle = @newStatusOutTitle, @newOptionText = @newOptionText, @newActive = @newActive, @newSortOrder = @newSortOrder, @newTemplateTitle = @newTemplateTitle", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> utility_workflow_sp_UpdateOptionActiveFlagAsync(int? workflowId, string? statusInTitle, string? statusOutTitle, string? optionText, bool? active, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "workflowId",
                    Value = workflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "statusInTitle",
                    Size = 50,
                    Value = statusInTitle ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "statusOutTitle",
                    Size = 50,
                    Value = statusOutTitle ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "optionText",
                    Size = 100,
                    Value = optionText ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "active",
                    Value = active ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[utility_workflow_sp_UpdateOptionActiveFlag] @workflowId = @workflowId, @statusInTitle = @statusInTitle, @statusOutTitle = @statusOutTitle, @optionText = @optionText, @active = @active", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        #endregion

        #region Workflow Methods

        public virtual async Task<List<workflow_sp_GetInitStatusResult>> workflow_sp_GetInitStatusAsync(int? userId, byte? workflow, int? groupId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "workflow",
                    Value = workflow ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "groupId",
                    Value = groupId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<workflow_sp_GetInitStatusResult>("EXEC @returnValue = [dbo].[workflow_sp_GetInitStatus] @userId = @userId, @workflow = @workflow, @groupId = @groupId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Gets current users for a workflow reference.
        /// </summary>
        /// <param name="refId">The reference ID (LOD ID).</param>
        /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
        /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
        /// <returns>A list of workflow_sp_GetCurrentUsersResult objects containing user information.</returns>
        /// <remarks>This method executes the stored procedure [dbo].[workflow_sp_GetCurrentUsers].</remarks>
        public virtual async Task<List<workflow_sp_GetCurrentUsersResult>> workflow_sp_GetCurrentUsersAsync(int? refId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<workflow_sp_GetCurrentUsersResult>("EXEC @returnValue = [dbo].[workflow_sp_GetCurrentUsers] @refId = @refId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Gets current users for a Request for Reconsideration workflow reference.
        /// </summary>
        /// <param name="refId">The reference ID (RR request ID).</param>
        /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
        /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
        /// <returns>A list of workflow_sp_GetCurrentUsers_ForRRResult objects containing user information.</returns>
        /// <remarks>This method executes the stored procedure [dbo].[workflow_sp_GetCurrentUsers_ForRR].</remarks>
        public virtual async Task<List<workflow_sp_GetCurrentUsers_ForRRResult>> workflow_sp_GetCurrentUsers_ForRRAsync(int? refId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<workflow_sp_GetCurrentUsers_ForRRResult>("EXEC @returnValue = [dbo].[workflow_sp_GetCurrentUsers_ForRR] @refId = @refId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Gets current users for a Special Case workflow reference.
        /// </summary>
        /// <param name="refId">The reference ID (SC ID).</param>
        /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
        /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
        /// <returns>A list of workflow_sp_GetCurrentUsers_ForSCResult objects containing user information.</returns>
        /// <remarks>This method executes the stored procedure [dbo].[workflow_sp_GetCurrentUsers_ForSC].</remarks>
        public virtual async Task<List<workflow_sp_GetCurrentUsers_ForSCResult>> workflow_sp_GetCurrentUsers_ForSCAsync(int? refId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<workflow_sp_GetCurrentUsers_ForSCResult>("EXEC @returnValue = [dbo].[workflow_sp_GetCurrentUsers_ForSC] @refId = @refId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<workflow_sp_Tracking_GetCurrentUsersResult>> workflow_sp_Tracking_GetCurrentUsersAsync(int? refId, int? moduleId, int? wsstatus, int? member_unit_id, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "moduleId",
                    Value = moduleId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "wsstatus",
                    Value = wsstatus ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "member_unit_id",
                    Value = member_unit_id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<workflow_sp_Tracking_GetCurrentUsersResult>("EXEC @returnValue = [dbo].[workflow_sp_Tracking_GetCurrentUsers] @refId = @refId, @moduleId = @moduleId, @wsstatus = @wsstatus, @member_unit_id = @member_unit_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> workstatus_sp_UpdateTrackingAsync(int? refId, int? workStatus, byte? module, int? userId, int? workflow, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "workStatus",
                    Value = workStatus ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "module",
                    Value = module ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "workflow",
                    Value = workflow ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[workstatus_sp_UpdateTracking] @refId = @refId, @workStatus = @workStatus, @module = @module, @userId = @userId, @workflow = @workflow", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> workstatus_sp_UpdateTracking2Async(int? refId, int? workStatus, byte? module, int? userId, int? updateType, DateTime? transDate, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "workStatus",
                    Value = workStatus ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "module",
                    Value = module ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "updateType",
                    Value = updateType ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "transDate",
                    Value = transDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[workstatus_sp_UpdateTracking2] @refId = @refId, @workStatus = @workStatus, @module = @module, @userId = @userId, @updateType = @updateType, @transDate = @transDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_workflow_sp_GetWorkflowById stored procedure.
        /// </summary>
        public virtual async Task<List<core_workflow_sp_GetWorkflowByIdResult>> core_workflow_sp_GetWorkflowByIdAsync(int? workflowId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "workflowId",
                    Value = workflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_workflow_sp_GetWorkflowByIdResult>("EXEC @returnValue = [dbo].[core_workflow_sp_GetWorkflowById] @workflowId = @workflowId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_workflow_sp_GetWorkflowsByRefId stored procedure.
        /// </summary>
        public virtual async Task<List<core_workflow_sp_GetWorkflowsByRefIdResult>> core_workflow_sp_GetWorkflowsByRefIdAsync(int? refId, byte? module, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "module",
                    Value = module ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_workflow_sp_GetWorkflowsByRefIdResult>("EXEC @returnValue = [dbo].[core_workflow_sp_GetWorkflowsByRefId] @refId = @refId, @module = @module", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_workflow_sp_GetWorkflowsByRefIdAndType stored procedure.
        /// </summary>
        public virtual async Task<List<core_workflow_sp_GetWorkflowsByRefIdAndTypeResult>> core_workflow_sp_GetWorkflowsByRefIdAndTypeAsync(int? refId, byte? module, int? workflowType, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "module",
                    Value = module ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "workflowType",
                    Value = workflowType ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_workflow_sp_GetWorkflowsByRefIdAndTypeResult>("EXEC @returnValue = [dbo].[core_workflow_sp_GetWorkflowsByRefIdAndType] @refId = @refId, @module = @module, @workflowType = @workflowType", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_workflow_sp_GetWorkflowTypes stored procedure.
        /// </summary>
        public virtual async Task<List<core_workflow_sp_GetWorkflowTypesResult>> core_workflow_sp_GetWorkflowTypesAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_workflow_sp_GetWorkflowTypesResult>("EXEC @returnValue = [dbo].[core_workflow_sp_GetWorkflowTypes]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_workflow_sp_InsertWorkflow stored procedure.
        /// </summary>
        public virtual async Task<int> core_workflow_sp_InsertWorkflowAsync(int? refId, byte? module, int? workflowType, string? workflowText, int? userId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "module",
                    Value = module ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "workflowType",
                    Value = workflowType ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "workflowText",
                    Size = -1,
                    Value = workflowText ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_workflow_sp_InsertWorkflow] @refId = @refId, @module = @module, @workflowType = @workflowType, @workflowText = @workflowText, @userId = @userId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_workflow_sp_UpdateWorkflow stored procedure.
        /// </summary>
        public virtual async Task<int> core_workflow_sp_UpdateWorkflowAsync(int? workflowId, string? workflowText, int? userId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "workflowId",
                    Value = workflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "workflowText",
                    Size = -1,
                    Value = workflowText ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_workflow_sp_UpdateWorkflow] @workflowId = @workflowId, @workflowText = @workflowText, @userId = @userId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the workflow_sp_GetWorkflowById stored procedure.
        /// </summary>
        public virtual async Task<List<workflow_sp_GetWorkflowByIdResult>> workflow_sp_GetWorkflowByIdAsync(int? workflowId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "workflowId",
                    Value = workflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<workflow_sp_GetWorkflowByIdResult>("EXEC @returnValue = [dbo].[workflow_sp_GetWorkflowById] @workflowId = @workflowId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the workflow_sp_GetWorkflowsByRefId stored procedure.
        /// </summary>
        public virtual async Task<List<workflow_sp_GetWorkflowsByRefIdResult>> workflow_sp_GetWorkflowsByRefIdAsync(int? refId, byte? module, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "module",
                    Value = module ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<workflow_sp_GetWorkflowsByRefIdResult>("EXEC @returnValue = [dbo].[workflow_sp_GetWorkflowsByRefId] @refId = @refId, @module = @module", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the workflow_sp_GetWorkflowsByRefIdAndType stored procedure.
        /// </summary>
        public virtual async Task<List<workflow_sp_GetWorkflowsByRefIdAndTypeResult>> workflow_sp_GetWorkflowsByRefIdAndTypeAsync(int? refId, byte? module, int? workflowType, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "module",
                    Value = module ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "workflowType",
                    Value = workflowType ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<workflow_sp_GetWorkflowsByRefIdAndTypeResult>("EXEC @returnValue = [dbo].[workflow_sp_GetWorkflowsByRefIdAndType] @refId = @refId, @module = @module, @workflowType = @workflowType", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the workflow_sp_GetWorkflowTypes stored procedure.
        /// </summary>
        public virtual async Task<List<workflow_sp_GetWorkflowTypesResult>> workflow_sp_GetWorkflowTypesAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<workflow_sp_GetWorkflowTypesResult>("EXEC @returnValue = [dbo].[workflow_sp_GetWorkflowTypes]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the workflow_sp_InsertWorkflow stored procedure.
        /// </summary>
        public virtual async Task<int> workflow_sp_InsertWorkflowAsync(int? refId, byte? module, int? workflowType, string? workflowText, int? userId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "module",
                    Value = module ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "workflowType",
                    Value = workflowType ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "workflowText",
                    Size = -1,
                    Value = workflowText ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[workflow_sp_InsertWorkflow] @refId = @refId, @module = @module, @workflowType = @workflowType, @workflowText = @workflowText, @userId = @userId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the workflow_sp_UpdateWorkflow stored procedure.
        /// </summary>
        public virtual async Task<int> workflow_sp_UpdateWorkflowAsync(int? workflowId, string? workflowText, int? userId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "workflowId",
                    Value = workflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "workflowText",
                    Size = -1,
                    Value = workflowText ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[workflow_sp_UpdateWorkflow] @workflowId = @workflowId, @workflowText = @workflowText, @userId = @userId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        #endregion

        #region Workstatus Methods

        /// <summary>
        /// Asynchronously executes the workstatus_sp_GetWorkstatusById stored procedure.
        /// </summary>
        public virtual async Task<List<workstatus_sp_GetWorkstatusByIdResult>> workstatus_sp_GetWorkstatusByIdAsync(int? workstatusId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "workstatusId",
                    Value = workstatusId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<workstatus_sp_GetWorkstatusByIdResult>("EXEC @returnValue = [dbo].[workstatus_sp_GetWorkstatusById] @workstatusId = @workstatusId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the workstatus_sp_GetWorkstatusesByRefId stored procedure.
        /// </summary>
        public virtual async Task<List<workstatus_sp_GetWorkstatusesByRefIdResult>> workstatus_sp_GetWorkstatusesByRefIdAsync(int? refId, byte? module, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "module",
                    Value = module ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<workstatus_sp_GetWorkstatusesByRefIdResult>("EXEC @returnValue = [dbo].[workstatus_sp_GetWorkstatusesByRefId] @refId = @refId, @module = @module", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the workstatus_sp_GetWorkstatusesByRefIdAndType stored procedure.
        /// </summary>
        public virtual async Task<List<workstatus_sp_GetWorkstatusesByRefIdAndTypeResult>> workstatus_sp_GetWorkstatusesByRefIdAndTypeAsync(int? refId, byte? module, int? workstatusType, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "module",
                    Value = module ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "workstatusType",
                    Value = workstatusType ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<workstatus_sp_GetWorkstatusesByRefIdAndTypeResult>("EXEC @returnValue = [dbo].[workstatus_sp_GetWorkstatusesByRefIdAndType] @refId = @refId, @module = @module, @workstatusType = @workstatusType", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the workstatus_sp_GetWorkstatusTypes stored procedure.
        /// </summary>
        public virtual async Task<List<workstatus_sp_GetWorkstatusTypesResult>> workstatus_sp_GetWorkstatusTypesAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<workstatus_sp_GetWorkstatusTypesResult>("EXEC @returnValue = [dbo].[workstatus_sp_GetWorkstatusTypes]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the workstatus_sp_InsertWorkstatus stored procedure.
        /// </summary>
        public virtual async Task<int> workstatus_sp_InsertWorkstatusAsync(int? refId, byte? module, int? workstatusType, string? workstatusText, int? userId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "module",
                    Value = module ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "workstatusType",
                    Value = workstatusType ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "workstatusText",
                    Size = -1,
                    Value = workstatusText ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[workstatus_sp_InsertWorkstatus] @refId = @refId, @module = @module, @workstatusType = @workstatusType, @workstatusText = @workstatusText, @userId = @userId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the workstatus_sp_UpdateWorkstatus stored procedure.
        /// </summary>
        public virtual async Task<int> workstatus_sp_UpdateWorkstatusAsync(int? workstatusId, string? workstatusText, int? userId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "workstatusId",
                    Value = workstatusId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "workstatusText",
                    Size = -1,
                    Value = workstatusText ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[workstatus_sp_UpdateWorkstatus] @workstatusId = @workstatusId, @workstatusText = @workstatusText, @userId = @userId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Retrieves special cases.
        /// </summary>
        /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
        /// <returns>A list of special cases results.</returns>
        public virtual async Task<List<core_lod_sp_GetSpecialCasesResult>> core_lod_sp_GetSpecialCasesAsync(CancellationToken? cancellationToken = default)
        {
            var _ = await _context.SqlQueryToListAsync<core_lod_sp_GetSpecialCasesResult>("EXEC [dbo].[core_lod_sp_GetSpecialCases]", null, cancellationToken);
            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_CaseDialogueComments_UpdateComment stored procedure.
        /// </summary>
        public virtual async Task<int> core_CaseDialogueComments_UpdateCommentAsync(int? id, string? comment, DateTime? createdDate, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "comment",
                    Size = -1,
                    Value = comment ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "createdDate",
                    Value = createdDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_CaseDialogueComments_UpdateComment] @id = @id, @comment = @comment, @createdDate = @createdDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_email_sp_Insert stored procedure.
        /// </summary>
        public virtual async Task<int> core_email_sp_InsertAsync(string? compo, string? subject, string? body, string? title, string? dataProc, int? status, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "compo",
                    Size = 50,
                    Value = compo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "subject",
                    Size = 500,
                    Value = subject ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "body",
                    Size = -1,
                    Value = body ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "title",
                    Size = 200,
                    Value = title ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "dataProc",
                    Size = 100,
                    Value = dataProc ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Value = status ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_email_sp_Insert] @compo = @compo, @subject = @subject, @body = @body, @title = @title, @dataProc = @dataProc, @status = @status", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_lookups_sp_GetMemberComponentsByWorkflow stored procedure.
        /// </summary>
        public virtual async Task<List<core_lookups_sp_GetMemberComponentsByWorkflowResult>> core_lookups_sp_GetMemberComponentsByWorkflowAsync(int? workflowId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "workflowId",
                    Value = workflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_lookups_sp_GetMemberComponentsByWorkflowResult>("EXEC @returnValue = [dbo].[core_lookups_sp_GetMemberComponentsByWorkflow] @workflowId = @workflowId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_lookUps_sp_GetPEPPDispositions stored procedure.
        /// </summary>
        public virtual async Task<List<core_lookUps_sp_GetPEPPDispositionsResult>> core_lookUps_sp_GetPEPPDispositionsAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_lookUps_sp_GetPEPPDispositionsResult>("EXEC @returnValue = [dbo].[core_lookUps_sp_GetPEPPDispositions]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_lookUps_sp_GetPEPPRatings stored procedure.
        /// </summary>
        public virtual async Task<List<core_lookUps_sp_GetPEPPRatingsResult>> core_lookUps_sp_GetPEPPRatingsAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_lookUps_sp_GetPEPPRatingsResult>("EXEC @returnValue = [dbo].[core_lookUps_sp_GetPEPPRatings]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_lookUps_sp_GetPEPPTypes stored procedure.
        /// </summary>
        public virtual async Task<List<core_lookUps_sp_GetPEPPTypesResult>> core_lookUps_sp_GetPEPPTypesAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_lookUps_sp_GetPEPPTypesResult>("EXEC @returnValue = [dbo].[core_lookUps_sp_GetPEPPTypes]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_lookups_sp_Insert_MAJCOM stored procedure.
        /// </summary>
        public virtual async Task<int> core_lookups_sp_Insert_MAJCOMAsync(string? majcom, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "majcom",
                    Size = 100,
                    Value = majcom ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_lookups_sp_Insert_MAJCOM] @majcom = @majcom", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_lookups_sp_Insert_PEPPDisposition stored procedure.
        /// </summary>
        public virtual async Task<int> core_lookups_sp_Insert_PEPPDispositionAsync(string? disposition, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "disposition",
                    Size = 200,
                    Value = disposition ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_lookups_sp_Insert_PEPPDisposition] @disposition = @disposition", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_lookups_sp_Insert_PEPPRating stored procedure.
        /// </summary>
        public virtual async Task<int> core_lookups_sp_Insert_PEPPRatingAsync(string? rating, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "rating",
                    Size = 200,
                    Value = rating ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_lookups_sp_Insert_PEPPRating] @rating = @rating", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_lookups_sp_Insert_PEPPType stored procedure.
        /// </summary>
        public virtual async Task<int> core_lookups_sp_Insert_PEPPTypeAsync(string? type, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "type",
                    Size = 200,
                    Value = type ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_lookups_sp_Insert_PEPPType] @type = @type", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_lookups_sp_Insert_RMU stored procedure.
        /// </summary>
        public virtual async Task<int> core_lookups_sp_Insert_RMUAsync(string? rmu, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "rmu",
                    Size = 100,
                    Value = rmu ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_lookups_sp_Insert_RMU] @rmu = @rmu", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_lookups_GetAllModules_pagination stored procedure.
        /// </summary>
        public virtual async Task<List<core_lookups_GetAllModulesResult>> core_lookups_GetAllModules_paginationAsync(int? pageNumber = 1, int? pageSize = 10, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pageNumber",
                    Value = pageNumber ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_lookups_GetAllModulesResult>("EXEC @returnValue = [dbo].[core_lookups_GetAllModules_pagination] @pageNumber = @pageNumber, @pageSize = @pageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_lookups_sp_GetAllRMUs_pagination stored procedure.
        /// </summary>
        public virtual async Task<List<core_lookups_sp_GetAllRMUsResult>> core_lookups_sp_GetAllRMUs_paginationAsync(int? pageNumber = 1, int? pageSize = 10, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pageNumber",
                    Value = pageNumber ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_lookups_sp_GetAllRMUsResult>("EXEC @returnValue = [dbo].[core_lookups_sp_GetAllRMUs_pagination] @pageNumber = @pageNumber, @pageSize = @pageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_lookUps_sp_GetAllSpecialistsRequiredForManagement_pagination stored procedure.
        /// </summary>
        public virtual async Task<List<core_lookUps_sp_GetAllSpecialistsRequiredForManagementResult>> core_lookUps_sp_GetAllSpecialistsRequiredForManagement_paginationAsync(int? pageNumber = 1, int? pageSize = 10, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pageNumber",
                    Value = pageNumber ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_lookUps_sp_GetAllSpecialistsRequiredForManagementResult>("EXEC @returnValue = [dbo].[core_lookUps_sp_GetAllSpecialistsRequiredForManagement_pagination] @pageNumber = @pageNumber, @pageSize = @pageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_lookUps_sp_GetAllSuddenIncapaciationRisks_pagination stored procedure.
        /// </summary>
        public virtual async Task<List<core_lookUps_sp_GetAllSuddenIncapaciationRisksResult>> core_lookUps_sp_GetAllSuddenIncapaciationRisks_paginationAsync(int? pageNumber = 1, int? pageSize = 10, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pageNumber",
                    Value = pageNumber ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_lookUps_sp_GetAllSuddenIncapaciationRisksResult>("EXEC @returnValue = [dbo].[core_lookUps_sp_GetAllSuddenIncapaciationRisks_pagination] @pageNumber = @pageNumber, @pageSize = @pageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_lookUps_sp_GetAllYearsSatisfactoryService_pagination stored procedure.
        /// </summary>
        public virtual async Task<List<core_lookUps_sp_GetAllYearsSatisfactoryServiceResult>> core_lookUps_sp_GetAllYearsSatisfactoryService_paginationAsync(int? pageNumber = 1, int? pageSize = 10, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pageNumber",
                    Value = pageNumber ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_lookUps_sp_GetAllYearsSatisfactoryServiceResult>("EXEC @returnValue = [dbo].[core_lookUps_sp_GetAllYearsSatisfactoryService_pagination] @pageNumber = @pageNumber, @pageSize = @pageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_lookUps_sp_InsertCategory stored procedure.
        /// </summary>
        public virtual async Task<int> core_lookUps_sp_InsertCategoryAsync(string? category, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "category",
                    Size = 200,
                    Value = category ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_lookUps_sp_InsertCategory] @category = @category", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_lookUps_sp_InsertComponent stored procedure.
        /// </summary>
        public virtual async Task<int> core_lookUps_sp_InsertComponentAsync(string? component, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "component",
                    Size = 50,
                    Value = component ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_lookUps_sp_InsertComponent] @component = @component", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_lookUps_sp_InsertDutyStatus stored procedure.
        /// </summary>
        public virtual async Task<int> core_lookUps_sp_InsertDutyStatusAsync(string? dutyStatus, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "dutyStatus",
                    Size = 200,
                    Value = dutyStatus ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_lookUps_sp_InsertDutyStatus] @dutyStatus = @dutyStatus", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_lookUps_sp_InsertFacility stored procedure.
        /// </summary>
        public virtual async Task<int> core_lookUps_sp_InsertFacilityAsync(string? facility, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "facility",
                    Size = 200,
                    Value = facility ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_lookUps_sp_InsertFacility] @facility = @facility", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_lookUps_sp_InsertFromLocation stored procedure.
        /// </summary>
        public virtual async Task<int> core_lookUps_sp_InsertFromLocationAsync(string? fromLocation, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "fromLocation",
                    Size = 200,
                    Value = fromLocation ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_lookUps_sp_InsertFromLocation] @fromLocation = @fromLocation", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_lookUps_sp_InsertInfluence stored procedure.
        /// </summary>
        public virtual async Task<int> core_lookUps_sp_InsertInfluenceAsync(string? influence, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "influence",
                    Size = 200,
                    Value = influence ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_lookUps_sp_InsertInfluence] @influence = @influence", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_lookUps_sp_InsertInfoSource stored procedure.
        /// </summary>
        public virtual async Task<int> core_lookUps_sp_InsertInfoSourceAsync(string? infoSource, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "infoSource",
                    Size = 200,
                    Value = infoSource ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_lookUps_sp_InsertInfoSource] @infoSource = @infoSource", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_lookUps_sp_InsertOccurrence stored procedure.
        /// </summary>
        public virtual async Task<int> core_lookUps_sp_InsertOccurrenceAsync(string? occurrence, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "occurrence",
                    Size = 200,
                    Value = occurrence ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_lookUps_sp_InsertOccurrence] @occurrence = @occurrence", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_lookUps_sp_InsertProximate stored procedure.
        /// </summary>
        public virtual async Task<int> core_lookUps_sp_InsertProximateAsync(string? proximate, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "proximate",
                    Size = 200,
                    Value = proximate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_lookUps_sp_InsertProximate] @proximate = @proximate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_lookUps_sp_InsertStatus stored procedure.
        /// </summary>
        public virtual async Task<int> core_lookUps_sp_InsertStatusAsync(string? status, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 200,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_lookUps_sp_InsertStatus] @status = @status", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_messages_sp_GetAll stored procedure.
        /// </summary>
        public virtual async Task<List<core_messages_sp_GetAllMessagesResult>> core_messages_sp_GetAllAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_messages_sp_GetAllMessagesResult>("EXEC @returnValue = [dbo].[core_messages_sp_GetAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_messages_sp_GetById stored procedure.
        /// </summary>
        public virtual async Task<List<core_messages_sp_GetMessagesDetailsResult>> core_messages_sp_GetByIdAsync(int? id, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_messages_sp_GetMessagesDetailsResult>("EXEC @returnValue = [dbo].[core_messages_sp_GetById] @id = @id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_messages_sp_GetByType stored procedure.
        /// </summary>
        public virtual async Task<List<core_messages_sp_GetMessagesResult>> core_messages_sp_GetByTypeAsync(int? type, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "type",
                    Value = type ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_messages_sp_GetMessagesResult>("EXEC @returnValue = [dbo].[core_messages_sp_GetByType] @type = @type", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_messages_sp_Insert stored procedure.
        /// </summary>
        public virtual async Task<int> core_messages_sp_InsertAsync(string? title, string? message, int? type, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "title",
                    Size = 200,
                    Value = title ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "message",
                    Size = -1,
                    Value = message ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "type",
                    Value = type ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_messages_sp_Insert] @title = @title, @message = @message, @type = @type", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_messages_sp_Update stored procedure.
        /// </summary>
        public virtual async Task<int> core_messages_sp_UpdateAsync(int? id, string? title, string? message, int? type, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "title",
                    Size = 200,
                    Value = title ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "message",
                    Size = -1,
                    Value = message ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "type",
                    Value = type ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_messages_sp_Update] @id = @id, @title = @title, @message = @message, @type = @type", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_messages_sp_GetAllMessages_pagination stored procedure.
        /// </summary>
        public virtual async Task<List<core_messages_sp_GetAllMessagesResult>> core_messages_sp_GetAllMessages_paginationAsync(string? compo, bool? isAdmin, int? pageNumber = 1, int? pageSize = 10, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "compo",
                    Size = 1,
                    Value = compo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "isAdmin",
                    Value = isAdmin ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "pageNumber",
                    Value = pageNumber ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_messages_sp_GetAllMessagesResult>("EXEC @returnValue = [dbo].[core_messages_sp_GetAllMessages_pagination] @compo = @compo, @isAdmin = @isAdmin, @pageNumber = @pageNumber, @pageSize = @pageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_pageTitles_sp_GetAll stored procedure.
        /// </summary>
        public virtual async Task<List<core_pageTitles_sp_GetAllPagesResult>> core_pageTitles_sp_GetAllAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_pageTitles_sp_GetAllPagesResult>("EXEC @returnValue = [dbo].[core_pageTitles_sp_GetAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_pageTitles_sp_GetById stored procedure.
        /// </summary>
        public virtual async Task<List<core_pageTitles_sp_GetAllPagesResult>> core_pageTitles_sp_GetByIdAsync(int? id, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_pageTitles_sp_GetAllPagesResult>("EXEC @returnValue = [dbo].[core_pageTitles_sp_GetById] @id = @id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_pageTitles_sp_Insert stored procedure.
        /// </summary>
        public virtual async Task<int> core_pageTitles_sp_InsertAsync(string? title, string? description, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "title",
                    Size = 200,
                    Value = title ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = -1,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_pageTitles_sp_Insert] @title = @title, @description = @description", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_pageTitles_sp_Update stored procedure.
        /// </summary>
        public virtual async Task<int> core_pageTitles_sp_UpdateAsync(int? id, string? title, string? description, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "title",
                    Size = 200,
                    Value = title ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = -1,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_pageTitles_sp_Update] @id = @id, @title = @title, @description = @description", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_pageTitles_sp_GetAllPages_pagination stored procedure.
        /// </summary>
        public virtual async Task<List<core_pageTitles_sp_GetAllPagesResult>> core_pageTitles_sp_GetAllPages_paginationAsync(int? pageNumber = 1, int? pageSize = 10, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pageNumber",
                    Value = pageNumber ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_pageTitles_sp_GetAllPagesResult>("EXEC @returnValue = [dbo].[core_pageTitles_sp_GetAllPages_pagination] @pageNumber = @pageNumber, @pageSize = @pageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_pascode_sp_GetAll stored procedure.
        /// </summary>
        public virtual async Task<List<core_pascodes_GetAllUserPasCodesResult>> core_pascode_sp_GetAllAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_pascodes_GetAllUserPasCodesResult>("EXEC @returnValue = [dbo].[core_pascode_sp_GetAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_pascode_sp_GetById stored procedure.
        /// </summary>
        public virtual async Task<List<core_pascode_sp_LoadResult>> core_pascode_sp_GetByIdAsync(int? id, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_pascode_sp_LoadResult>("EXEC @returnValue = [dbo].[core_pascode_sp_GetById] @id = @id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_pascode_sp_Insert stored procedure.
        /// </summary>
        public virtual async Task<int> core_pascode_sp_InsertAsync(string? pascode, string? description, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pascode",
                    Size = 10,
                    Value = pascode ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 200,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_pascode_sp_Insert] @pascode = @pascode, @description = @description", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_pascode_sp_Update stored procedure.
        /// </summary>
        public virtual async Task<int> core_pascode_sp_UpdateAsync(int? id, string? pascode, string? description, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pascode",
                    Size = 10,
                    Value = pascode ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 200,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_pascode_sp_Update] @id = @id, @pascode = @pascode, @description = @description", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_Permission_GetByWorkflow stored procedure.
        /// </summary>
        public virtual async Task<List<core_Permission_GetByWorkflowResult>> core_Permission_GetByWorkflowAsync(int? workflowId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "workflowId",
                    Value = workflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_Permission_GetByWorkflowResult>("EXEC @returnValue = [dbo].[core_Permission_GetByWorkflow] @workflowId = @workflowId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_permissions_sp_GetById stored procedure.
        /// </summary>
        public virtual async Task<List<core_permissions_sp_GetByUserIdResult>> core_permissions_sp_GetByIdAsync(int? id, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_permissions_sp_GetByUserIdResult>("EXEC @returnValue = [dbo].[core_permissions_sp_GetById] @id = @id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_permissions_sp_GetByWorkflow stored procedure.
        /// </summary>
        public virtual async Task<List<core_Permission_GetByWorkflowResult>> core_permissions_sp_GetByWorkflowAsync(int? workflowId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "workflowId",
                    Value = workflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_Permission_GetByWorkflowResult>("EXEC @returnValue = [dbo].[core_permissions_sp_GetByWorkflow] @workflowId = @workflowId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_permissions_sp_Insert stored procedure.
        /// </summary>
        public virtual async Task<int> core_permissions_sp_InsertAsync(string? permission, string? description, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "permission",
                    Size = 200,
                    Value = permission ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = -1,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_permissions_sp_Insert] @permission = @permission, @description = @description", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_permissions_sp_Update stored procedure.
        /// </summary>
        public virtual async Task<int> core_permissions_sp_UpdateAsync(int? id, string? permission, string? description, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "permission",
                    Size = 200,
                    Value = permission ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = -1,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_permissions_sp_Update] @id = @id, @permission = @permission, @description = @description", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_permissions_sp_GetAll_pagination stored procedure.
        /// </summary>
        public virtual async Task<List<core_permissions_sp_GetAllResult>> core_permissions_sp_GetAll_paginationAsync(int? pageNumber = 1, int? pageSize = 10, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pageNumber",
                    Value = pageNumber ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_permissions_sp_GetAllResult>("EXEC @returnValue = [dbo].[core_permissions_sp_GetAll_pagination] @pageNumber = @pageNumber, @pageSize = @pageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_role_sp_GetAll stored procedure.
        /// </summary>
        public virtual async Task<List<core_role_sp_GetAllResult>> core_role_sp_GetAllAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_role_sp_GetAllResult>("EXEC @returnValue = [dbo].[core_role_sp_GetAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_role_sp_GetById stored procedure.
        /// </summary>
        public virtual async Task<List<core_role_sp_GetByIdResult>> core_role_sp_GetByIdAsync(int? id, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_role_sp_GetByIdResult>("EXEC @returnValue = [dbo].[core_role_sp_GetById] @id = @id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_role_sp_GetByWorkflow stored procedure.
        /// </summary>
        public virtual async Task<List<core_role_sp_GetAllResult>> core_role_sp_GetByWorkflowAsync(int? workflowId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "workflowId",
                    Value = workflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_role_sp_GetAllResult>("EXEC @returnValue = [dbo].[core_role_sp_GetByWorkflow] @workflowId = @workflowId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_role_sp_Insert stored procedure.
        /// </summary>
        public virtual async Task<int> core_role_sp_InsertAsync(string? role, string? description, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "role",
                    Size = 200,
                    Value = role ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = -1,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_role_sp_Insert] @role = @role, @description = @description", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_role_sp_Update stored procedure.
        /// </summary>
        public virtual async Task<int> core_role_sp_UpdateAsync(int? id, string? role, string? description, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "role",
                    Size = 200,
                    Value = role ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = -1,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_role_sp_Update] @id = @id, @role = @role, @description = @description", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_role_sp_GetAll_pagination stored procedure.
        /// </summary>
        public virtual async Task<List<core_role_sp_GetAllResult>> core_role_sp_GetAll_paginationAsync(int? userId, int? pageNumber = 1, int? pageSize = 10, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageNumber",
                    Value = pageNumber ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_role_sp_GetAllResult>("EXEC @returnValue = [dbo].[core_role_sp_GetAll_pagination] @userId = @userId, @pageNumber = @pageNumber, @pageSize = @pageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_rule_sp_GetAll stored procedure.
        /// </summary>
        public virtual async Task<List<core_rule_sp_GetAllResult>> core_rule_sp_GetAllAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_rule_sp_GetAllResult>("EXEC @returnValue = [dbo].[core_rule_sp_GetAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_rule_sp_GetById stored procedure.
        /// </summary>
        public virtual async Task<List<core_rule_sp_GetByIdResult>> core_rule_sp_GetByIdAsync(int? id, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_rule_sp_GetByIdResult>("EXEC @returnValue = [dbo].[core_rule_sp_GetById] @id = @id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_rule_sp_GetByWorkflow stored procedure.
        /// </summary>
        public virtual async Task<List<core_rule_sp_GetByWorkflowResult>> core_rule_sp_GetByWorkflowAsync(int? workflowId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "workflowId",
                    Value = workflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_rule_sp_GetByWorkflowResult>("EXEC @returnValue = [dbo].[core_rule_sp_GetByWorkflow] @workflowId = @workflowId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_rule_sp_Insert stored procedure.
        /// </summary>
        public virtual async Task<int> core_rule_sp_InsertAsync(string? rule, string? description, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "rule",
                    Size = -1,
                    Value = rule ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = -1,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_rule_sp_Insert] @rule = @rule, @description = @description", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_rule_sp_Update stored procedure.
        /// </summary>
        public virtual async Task<int> core_rule_sp_UpdateAsync(int? id, string? rule, string? description, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rule",
                    Size = -1,
                    Value = rule ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = -1,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_rule_sp_Update] @id = @id, @rule = @rule, @description = @description", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_rules_sp_GetAll stored procedure.
        /// </summary>
        public virtual async Task<List<core_rules_sp_GetAllResult>> core_rules_sp_GetAllAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_rules_sp_GetAllResult>("EXEC @returnValue = [dbo].[core_rules_sp_GetAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_rules_sp_GetById stored procedure.
        /// </summary>
        public virtual async Task<List<core_rules_sp_GetByIdResult>> core_rules_sp_GetByIdAsync(int? id, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_rules_sp_GetByIdResult>("EXEC @returnValue = [dbo].[core_rules_sp_GetById] @id = @id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_rules_sp_GetByWorkflow stored procedure.
        /// </summary>
        public virtual async Task<List<core_rules_sp_GetByWorkflowResult>> core_rules_sp_GetByWorkflowAsync(int? workflowId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "workflowId",
                    Value = workflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_rules_sp_GetByWorkflowResult>("EXEC @returnValue = [dbo].[core_rules_sp_GetByWorkflow] @workflowId = @workflowId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_rules_sp_Insert stored procedure.
        /// </summary>
        public virtual async Task<int> core_rules_sp_InsertAsync(string? rule, string? description, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "rule",
                    Size = -1,
                    Value = rule ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = -1,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_rules_sp_Insert] @rule = @rule, @description = @description", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_rules_sp_Update stored procedure.
        /// </summary>
        public virtual async Task<int> core_rules_sp_UpdateAsync(int? id, string? rule, string? description, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rule",
                    Size = -1,
                    Value = rule ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = -1,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_rules_sp_Update] @id = @id, @rule = @rule, @description = @description", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_rwoa_GetRecent stored procedure.
        /// </summary>
        public virtual async Task<List<core_rwoa_GetRecentResult>> core_rwoa_GetRecentAsync(int? userId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_rwoa_GetRecentResult>("EXEC @returnValue = [dbo].[core_rwoa_GetRecent] @userId = @userId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_sarc_sp_GetAll stored procedure.
        /// </summary>
        public virtual async Task<List<core_sarc_sp_GetAllResult>> core_sarc_sp_GetAllAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_sarc_sp_GetAllResult>("EXEC @returnValue = [dbo].[core_sarc_sp_GetAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_sarc_sp_GetById stored procedure.
        /// </summary>
        public virtual async Task<List<core_sarc_sp_GetByIdResult>> core_sarc_sp_GetByIdAsync(int? id, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_sarc_sp_GetByIdResult>("EXEC @returnValue = [dbo].[core_sarc_sp_GetById] @id = @id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_sarc_sp_GetByWorkflow stored procedure.
        /// </summary>
        public virtual async Task<List<core_sarc_sp_GetByWorkflowResult>> core_sarc_sp_GetByWorkflowAsync(int? workflowId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "workflowId",
                    Value = workflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_sarc_sp_GetByWorkflowResult>("EXEC @returnValue = [dbo].[core_sarc_sp_GetByWorkflow] @workflowId = @workflowId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_sarc_sp_Insert stored procedure.
        /// </summary>
        public virtual async Task<int> core_sarc_sp_InsertAsync(string? sarc, string? description, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "sarc",
                    Size = 50,
                    Value = sarc ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = -1,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_sarc_sp_Insert] @sarc = @sarc, @description = @description", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_sarc_sp_Update stored procedure.
        /// </summary>
        public virtual async Task<int> core_sarc_sp_UpdateAsync(int? id, string? sarc, string? description, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sarc",
                    Size = 50,
                    Value = sarc ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = -1,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_sarc_sp_Update] @id = @id, @sarc = @sarc, @description = @description", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_sc_sp_GetRWAssociableSpecialCases stored procedure.
        /// </summary>
        public virtual async Task<List<core_sc_sp_GetRWAssociableSpecialCasesResult>> core_sc_sp_GetRWAssociableSpecialCasesAsync(int? refId, int? workflowId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "workflowId",
                    Value = workflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_sc_sp_GetRWAssociableSpecialCasesResult>("EXEC @returnValue = [dbo].[core_sc_sp_GetRWAssociableSpecialCases] @refId = @refId, @workflowId = @workflowId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_Signature_sp_GetAll stored procedure.
        /// </summary>
        public virtual async Task<List<core_Signature_sp_GetAllResult>> core_Signature_sp_GetAllAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_Signature_sp_GetAllResult>("EXEC @returnValue = [dbo].[core_Signature_sp_GetAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_Signature_sp_GetById stored procedure.
        /// </summary>
        public virtual async Task<List<core_Signature_sp_GetByIdResult>> core_Signature_sp_GetByIdAsync(int? id, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_Signature_sp_GetByIdResult>("EXEC @returnValue = [dbo].[core_Signature_sp_GetById] @id = @id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_Signature_sp_GetByWorkflow stored procedure.
        /// </summary>
        public virtual async Task<List<core_Signature_sp_GetByWorkflowResult>> core_Signature_sp_GetByWorkflowAsync(int? workflowId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "workflowId",
                    Value = workflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_Signature_sp_GetByWorkflowResult>("EXEC @returnValue = [dbo].[core_Signature_sp_GetByWorkflow] @workflowId = @workflowId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_Signature_sp_Insert stored procedure.
        /// </summary>
        public virtual async Task<int> core_Signature_sp_InsertAsync(string? signature, string? description, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "signature",
                    Size = -1,
                    Value = signature ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = -1,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_Signature_sp_Insert] @signature = @signature, @description = @description", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_Signature_sp_Update stored procedure.
        /// </summary>
        public virtual async Task<int> core_Signature_sp_UpdateAsync(int? id, string? signature, string? description, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "signature",
                    Size = -1,
                    Value = signature ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = -1,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_Signature_sp_Update] @id = @id, @signature = @signature, @description = @description", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_SignatureMetaData_sp_GetAll stored procedure.
        /// </summary>
        public virtual async Task<List<core_SignatureMetaData_sp_GetAllResult>> core_SignatureMetaData_sp_GetAllAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_SignatureMetaData_sp_GetAllResult>("EXEC @returnValue = [dbo].[core_SignatureMetaData_sp_GetAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_SignatureMetaData_sp_GetById stored procedure.
        /// </summary>
        public virtual async Task<List<core_SignatureMetaData_sp_GetByIdResult>> core_SignatureMetaData_sp_GetByIdAsync(int? id, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_SignatureMetaData_sp_GetByIdResult>("EXEC @returnValue = [dbo].[core_SignatureMetaData_sp_GetById] @id = @id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_SignatureMetaData_sp_GetByWorkflow stored procedure.
        /// </summary>
        public virtual async Task<List<core_SignatureMetaData_sp_GetByWorkflowResult>> core_SignatureMetaData_sp_GetByWorkflowAsync(int? workflowId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "workflowId",
                    Value = workflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_SignatureMetaData_sp_GetByWorkflowResult>("EXEC @returnValue = [dbo].[core_SignatureMetaData_sp_GetByWorkflow] @workflowId = @workflowId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_SignatureMetaData_sp_Insert stored procedure.
        /// </summary>
        public virtual async Task<int> core_SignatureMetaData_sp_InsertAsync(string? signatureMetaData, string? description, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "signatureMetaData",
                    Size = -1,
                    Value = signatureMetaData ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = -1,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_SignatureMetaData_sp_Insert] @signatureMetaData = @signatureMetaData, @description = @description", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_SignatureMetaData_sp_Update stored procedure.
        /// </summary>
        public virtual async Task<int> core_SignatureMetaData_sp_UpdateAsync(int? id, string? signatureMetaData, string? description, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "signatureMetaData",
                    Size = -1,
                    Value = signatureMetaData ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = -1,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_SignatureMetaData_sp_Update] @id = @id, @signatureMetaData = @signatureMetaData, @description = @description", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Asynchronously executes the core_sp_GetIRILOAssociableSpecialCases stored procedure.
        /// </summary>
        public virtual async Task<List<core_sp_GetIRILOAssociableSpecialCasesResult>> core_sp_GetIRILOAssociableSpecialCasesAsync(int? refId, int? workflowId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "workflowId",
                    Value = workflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<core_sp_GetIRILOAssociableSpecialCasesResult>("EXEC @returnValue = [dbo].[core_sp_GetIRILOAssociableSpecialCases] @refId = @refId, @workflowId = @workflowId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Searches for post-completion cases with various filter criteria.
        /// </summary>
        /// <param name="userId">The user ID performing the search.</param>
        /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
        /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
        /// <returns>A list of form348_sp_PostCompletionSearch_TEMPResult objects containing case information.</returns>
        /// <remarks>This method executes the stored procedure [dbo].[form348_sp_PostCompletionSearch_TEMP].</remarks>
        public virtual async Task<List<form348_sp_PostCompletionSearch_TEMPResult>> form348_sp_PostCompletionSearch_TEMPAsync(int? userId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<form348_sp_PostCompletionSearch_TEMPResult>("EXEC @returnValue = [dbo].[form348_sp_PostCompletionSearch_TEMP] @userId = @userId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Imports signature dates from legacy system.
        /// </summary>
        /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
        /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
        /// <returns>The number of rows affected.</returns>
        /// <remarks>This method executes the stored procedure [dbo].[imp_ImportSigDates].</remarks>
        public virtual async Task<int> imp_ImportSigDatesAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[imp_ImportSigDates]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        /// <summary>
        /// Gets disposition report data.
        /// </summary>
        /// <param name="cs_id">Command structure ID.</param>
        /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
        /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
        /// <returns>A list of tmp_report_sp_GetDispositionResult objects containing disposition information.</returns>
        /// <remarks>This method executes the stored procedure [dbo].[tmp_report_sp_GetDisposition].</remarks>
        public virtual async Task<List<tmp_report_sp_GetDispositionResult>> tmp_report_sp_GetDispositionAsync(int? cs_id, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = ParameterDirection.Output,
                SqlDbType = SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cs_id",
                    Value = cs_id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryToListAsync<tmp_report_sp_GetDispositionResult>("EXEC @returnValue = [dbo].[tmp_report_sp_GetDisposition] @cs_id = @cs_id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        #endregion
    }
}


