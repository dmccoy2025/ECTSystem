// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable enable
#pragma warning disable CS8604 // Possible null reference argument
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;
using AF.ECT.Data.Extensions;
using AF.ECT.Data.ResultTypes;
using AF.ECT.Data.Interfaces;

namespace AF.ECT.Data.Models;

public partial class ALODContextProcedures : IALODContextProcedures
{
    #region Core Case Management Methods

    /// <summary>
    /// Saves associated cases for a reference and workflow.
    /// </summary>
    /// <param name="refId">The reference ID.</param>
    /// <param name="workflowId">The workflow ID.</param>
    /// <param name="associated_refIds">A data table containing associated reference IDs.</param>
    /// <param name="associated_workflowIds">A data table containing associated workflow IDs.</param>
    /// <param name="associated_CaseIds">A data table containing associated case IDs.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>The number of affected rows.</returns>
    /// <remarks>This method executes the stored procedure [dbo].[core_AssocaitedCases_SaveAssociatedCases].</remarks>
    public async virtual Task<int> core_AssocaitedCases_SaveAssociatedCasesAsync(int? refId, int? workflowId, DataTable? associated_refIds, DataTable? associated_workflowIds, DataTable? associated_CaseIds, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "workflowId",
                    Value = workflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "associated_refIds",
                    Value = associated_refIds ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Structured,
                    TypeName = "[dbo].[tblIntegerListUnordered]",
                },
                new SqlParameter
                {
                    ParameterName = "associated_workflowIds",
                    Value = associated_workflowIds ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Structured,
                    TypeName = "[dbo].[tblIntegerListUnordered]",
                },
                new SqlParameter
                {
                    ParameterName = "associated_CaseIds",
                    Value = associated_CaseIds ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Structured,
                    TypeName = "[dbo].[tblVarCharListUnordered]",
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_AssocaitedCases_SaveAssociatedCases] @refId = @refId, @workflowId = @workflowId, @associated_refIds = @associated_refIds, @associated_workflowIds = @associated_workflowIds, @associated_CaseIds = @associated_CaseIds", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves associated cases for a reference and workflow.
    /// </summary>
    /// <param name="refId">The reference ID.</param>
    /// <param name="workflowId">The workflow ID.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of associated cases results.</returns>
    /// <remarks>This method executes the stored procedure [dbo].[core_AssociatedCases_GetAssociatedCases].</remarks>
    public async virtual Task<List<core_AssociatedCases_GetAssociatedCasesResult>> core_AssociatedCases_GetAssociatedCasesAsync(int? refId, int? workflowId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "workflowId",
                    Value = workflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_AssociatedCases_GetAssociatedCasesResult>("EXEC @returnValue = [dbo].[core_AssociatedCases_GetAssociatedCases] @refId = @refId, @workflowId = @workflowId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves associated cases LOD for a reference and workflow.
    /// </summary>
    /// <param name="refId">The reference ID.</param>
    /// <param name="workflowId">The workflow ID.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of associated cases LOD results.</returns>
    /// <remarks>This method executes the stored procedure [dbo].[core_AssociatedCases_GetAssociatedCasesLOD].</remarks>
    public async virtual Task<List<core_AssociatedCases_GetAssociatedCasesLODResult>> core_AssociatedCases_GetAssociatedCasesLODAsync(int? refId, int? workflowId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "workflowId",
                    Value = workflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_AssociatedCases_GetAssociatedCasesLODResult>("EXEC @returnValue = [dbo].[core_AssociatedCases_GetAssociatedCasesLOD] @refId = @refId, @workflowId = @workflowId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves case comments by case.
    /// </summary>
    /// <param name="refid">The reference ID.</param>
    /// <param name="module">The module identifier.</param>
    /// <param name="commentType">The comment type.</param>
    /// <param name="sorted">Whether to sort the results.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of case comments results.</returns>
    /// <remarks>This method executes the stored procedure [dbo].[core_CaseComments_GetByCase].</remarks>
    public async virtual Task<List<core_CaseComments_GetByCaseResult>> core_CaseComments_GetByCaseAsync(int? refid, int? module, int? commentType, bool? sorted, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "refid",
                    Value = refid ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "module",
                    Value = module ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "commentType",
                    Value = commentType ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sorted",
                    Value = sorted ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_CaseComments_GetByCaseResult>("EXEC @returnValue = [dbo].[core_CaseComments_GetByCase] @refid = @refid, @module = @module, @commentType = @commentType, @sorted = @sorted", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves case comments by ID.
    /// </summary>
    /// <param name="id">The comment ID.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of case comments results.</returns>
    /// <remarks>This method executes the stored procedure [dbo].[core_CaseComments_GetById].</remarks>
    public async virtual Task<List<core_CaseComments_GetByIdResult>> core_CaseComments_GetByIdAsync(int? id, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_CaseComments_GetByIdResult>("EXEC @returnValue = [dbo].[core_CaseComments_GetById] @id = @id", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Saves or updates a case comment.
    /// </summary>
    /// <param name="id">The comment ID.</param>
    /// <param name="refId">The reference ID.</param>
    /// <param name="module">The module identifier.</param>
    /// <param name="comment">The comment text.</param>
    /// <param name="userId">The user ID.</param>
    /// <param name="createdDate">The creation date.</param>
    /// <param name="deleted">The deleted flag.</param>
    /// <param name="commentType">The comment type.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>The number of affected rows.</returns>
    /// <remarks>This method executes the stored procedure [dbo].[core_CaseComments_SaveOrUpdateComment].</remarks>
    public async virtual Task<int> core_CaseComments_SaveOrUpdateCommentAsync(int? id, int? refId, int? module, string? comment, int? userId, DateTime? createdDate, int? deleted, int? commentType, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "module",
                    Value = module ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "comment",
                    Size = -1,
                    Value = comment ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "createdDate",
                    Value = createdDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "deleted",
                    Value = deleted ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "commentType",
                    Value = commentType ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_CaseComments_SaveOrUpdateComment] @id = @id, @refId = @refId, @module = @module, @comment = @comment, @userId = @userId, @createdDate = @createdDate, @deleted = @deleted, @commentType = @commentType", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves case dialogue comments by case.
    /// </summary>
    /// <param name="refid">The reference ID.</param>
    /// <param name="module">The module identifier.</param>
    /// <param name="commentType">The comment type.</param>
    /// <param name="sorted">Whether to sort the results.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of case dialogue comments results.</returns>
    /// <remarks>This method executes the stored procedure [dbo].[core_CaseDialogueComments_GetByCase].</remarks>
    public async virtual Task<List<core_CaseDialogueComments_GetByCaseResult>> core_CaseDialogueComments_GetByCaseAsync(int? refid, int? module, int? commentType, bool? sorted, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "refid",
                    Value = refid ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "module",
                    Value = module ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "commentType",
                    Value = commentType ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sorted",
                    Value = sorted ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_CaseDialogueComments_GetByCaseResult>("EXEC @returnValue = [dbo].[core_CaseDialogueComments_GetByCase] @refid = @refid, @module = @module, @commentType = @commentType, @sorted = @sorted", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves case dialogue comments by ID.
    /// </summary>
    /// <param name="id">The comment ID.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of case dialogue comments results.</returns>
    /// <remarks>This method executes the stored procedure [dbo].[core_CaseDialogueComments_GetById].</remarks>
    public async virtual Task<List<core_CaseDialogueComments_GetByIdResult>> core_CaseDialogueComments_GetByIdAsync(int? id, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_CaseDialogueComments_GetByIdResult>("EXEC @returnValue = [dbo].[core_CaseDialogueComments_GetById] @id = @id", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Saves or updates a case dialogue comment.
    /// </summary>
    /// <param name="id">The comment ID.</param>
    /// <param name="refId">The reference ID.</param>
    /// <param name="module">The module identifier.</param>
    /// <param name="comment">The comment text.</param>
    /// <param name="userId">The user ID.</param>
    /// <param name="createdDate">The creation date.</param>
    /// <param name="deleted">The deleted flag.</param>
    /// <param name="commentType">The comment type.</param>
    /// <param name="role">The role.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>The number of affected rows.</returns>
    /// <remarks>This method executes the stored procedure [dbo].[core_CaseDialogueComments_SaveOrUpdateComment].</remarks>
    public async virtual Task<int> core_CaseDialogueComments_SaveOrUpdateCommentAsync(int? id, int? refId, int? module, string? comment, int? userId, DateTime? createdDate, int? deleted, int? commentType, string? role, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "module",
                    Value = module ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "comment",
                    Size = -1,
                    Value = comment ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "createdDate",
                    Value = createdDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "deleted",
                    Value = deleted ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "commentType",
                    Value = commentType ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "role",
                    Size = 200,
                    Value = role ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_CaseDialogueComments_SaveOrUpdateComment] @id = @id, @refId = @refId, @module = @module, @comment = @comment, @userId = @userId, @createdDate = @createdDate, @deleted = @deleted, @commentType = @commentType, @role = @role", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves all case types.
    /// </summary>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of all case types.</returns>
    /// <remarks>This method executes the stored procedure [dbo].[core_CaseType_sp_GetAll].</remarks>
    public async virtual Task<List<core_CaseType_sp_GetAllResult>> core_CaseType_sp_GetAllAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_CaseType_sp_GetAllResult>("EXEC @returnValue = [dbo].[core_CaseType_sp_GetAll]", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves all sub case types.
    /// </summary>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of all sub case types.</returns>
    /// <remarks>This method executes the stored procedure [dbo].[core_CaseType_sp_GetAllSubCaseTypes].</remarks>
    public async virtual Task<List<core_CaseType_sp_GetAllSubCaseTypesResult>> core_CaseType_sp_GetAllSubCaseTypesAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_CaseType_sp_GetAllSubCaseTypesResult>("EXEC @returnValue = [dbo].[core_CaseType_sp_GetAllSubCaseTypes]", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves a case type by ID.
    /// </summary>
    /// <param name="id">The case type ID.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list containing the case type information.</returns>
    /// <remarks>This method executes the stored procedure [dbo].[core_CaseType_sp_GetById].</remarks>
    public async virtual Task<List<core_CaseType_sp_GetByIdResult>> core_CaseType_sp_GetByIdAsync(int? id, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_CaseType_sp_GetByIdResult>("EXEC @returnValue = [dbo].[core_CaseType_sp_GetById] @id = @id", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves workflows for a case type.
    /// </summary>
    /// <param name="caseTypeId">The case type ID.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of workflows for the specified case type.</returns>
    /// <remarks>This method executes the stored procedure [dbo].[core_CaseType_sp_GetCaseTypeWorkflows].</remarks>
    public async virtual Task<List<core_CaseType_sp_GetCaseTypeWorkflowsResult>> core_CaseType_sp_GetCaseTypeWorkflowsAsync(int? caseTypeId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "caseTypeId",
                    Value = caseTypeId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_CaseType_sp_GetCaseTypeWorkflowsResult>("EXEC @returnValue = [dbo].[core_CaseType_sp_GetCaseTypeWorkflows] @caseTypeId = @caseTypeId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves sub case types for a case type.
    /// </summary>
    /// <param name="caseTypeId">The case type ID.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of sub case types for the specified case type.</returns>
    /// <remarks>This method executes the stored procedure [dbo].[core_CaseType_sp_GetSubCaseTypes].</remarks>
    public async virtual Task<List<core_CaseType_sp_GetSubCaseTypesResult>> core_CaseType_sp_GetSubCaseTypesAsync(int? caseTypeId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "caseTypeId",
                    Value = caseTypeId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_CaseType_sp_GetSubCaseTypesResult>("EXEC @returnValue = [dbo].[core_CaseType_sp_GetSubCaseTypes] @caseTypeId = @caseTypeId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves case types for a workflow.
    /// </summary>
    /// <param name="workflowId">The workflow ID.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of case types for the specified workflow.</returns>
    /// <remarks>This method executes the stored procedure [dbo].[core_CaseType_sp_GetWorkflowCaseTypes].</remarks>
    public async virtual Task<List<core_CaseType_sp_GetWorkflowCaseTypesResult>> core_CaseType_sp_GetWorkflowCaseTypesAsync(int? workflowId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "workflowId",
                    Value = workflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_CaseType_sp_GetWorkflowCaseTypesResult>("EXEC @returnValue = [dbo].[core_CaseType_sp_GetWorkflowCaseTypes] @workflowId = @workflowId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Inserts a new case type.
    /// </summary>
    /// <param name="name">The name of the case type.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>The number of affected rows.</returns>
    /// <remarks>This method executes the stored procedure [dbo].[core_CaseType_sp_Insert].</remarks>
    public async virtual Task<int> core_CaseType_sp_InsertAsync(string? name, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "name",
                    Size = 200,
                    Value = name ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_CaseType_sp_Insert] @name = @name", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Inserts a new sub case type.
    /// </summary>
    /// <param name="name">The name of the sub case type.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>The number of affected rows.</returns>
    /// <remarks>This method executes the stored procedure [dbo].[core_CaseType_sp_InsertSubCaseType].</remarks>
    public async virtual Task<int> core_CaseType_sp_InsertSubCaseTypeAsync(string? name, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "name",
                    Size = 200,
                    Value = name ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_CaseType_sp_InsertSubCaseType] @name = @name", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Updates a case type.
    /// </summary>
    /// <param name="id">The ID of the case type to update.</param>
    /// <param name="name">The updated name of the case type.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>The number of affected rows.</returns>
    /// <remarks>This method executes the stored procedure [dbo].[core_CaseType_sp_Update].</remarks>
    public async virtual Task<int> core_CaseType_sp_UpdateAsync(int? id, string? name, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "name",
                    Size = 200,
                    Value = name ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_CaseType_sp_Update] @id = @id, @name = @name", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Updates case type sub case type maps.
    /// </summary>
    /// <param name="caseTypeId">The case type ID.</param>
    /// <param name="subCaseTypeIds">A data table containing sub case type IDs.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>The number of affected rows.</returns>
    /// <remarks>This method executes the stored procedure [dbo].[core_CaseType_sp_UpdateCaseTypeSubCaseTypeMaps].</remarks>
    public async virtual Task<int> core_CaseType_sp_UpdateCaseTypeSubCaseTypeMapsAsync(int? caseTypeId, DataTable? subCaseTypeIds, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "caseTypeId",
                    Value = caseTypeId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "subCaseTypeIds",
                    Value = subCaseTypeIds ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Structured,
                    TypeName = "[dbo].[tblIntegerList]",
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_CaseType_sp_UpdateCaseTypeSubCaseTypeMaps] @caseTypeId = @caseTypeId, @subCaseTypeIds = @subCaseTypeIds", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Updates case type workflow maps.
    /// </summary>
    /// <param name="caseTypeId">The case type ID.</param>
    /// <param name="workflowIds">A data table containing workflow IDs.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>The number of affected rows.</returns>
    /// <remarks>This method executes the stored procedure [dbo].[core_CaseType_sp_UpdateCaseTypeWorkflowMaps].</remarks>
    public async virtual Task<int> core_CaseType_sp_UpdateCaseTypeWorkflowMapsAsync(int? caseTypeId, DataTable? workflowIds, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "caseTypeId",
                    Value = caseTypeId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "workflowIds",
                    Value = workflowIds ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Structured,
                    TypeName = "[dbo].[tblIntegerList]",
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_CaseType_sp_UpdateCaseTypeWorkflowMaps] @caseTypeId = @caseTypeId, @workflowIds = @workflowIds", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Updates a sub case type.
    /// </summary>
    /// <param name="id">The ID of the sub case type to update.</param>
    /// <param name="name">The updated name of the sub case type.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>The number of affected rows.</returns>
    /// <remarks>This method executes the stored procedure [dbo].[core_CaseType_sp_UpdateSubCaseType].</remarks>
    public async virtual Task<int> core_CaseType_sp_UpdateSubCaseTypeAsync(int? id, string? name, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "name",
                    Size = 200,
                    Value = name ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_CaseType_sp_UpdateSubCaseType] @id = @id, @name = @name", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves all case types with pagination.
    /// </summary>
    /// <param name="pageNumber">The page number to retrieve.</param>
    /// <param name="pageSize">The number of items per page.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of case types for the specified page.</returns>
    public async virtual Task<List<core_CaseType_sp_GetAllResult>> core_CaseType_sp_GetAll_paginationAsync(int? pageNumber = 1, int? pageSize = 10, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
            new SqlParameter
            {
                ParameterName = "PageNumber",
                Value = pageNumber ?? Convert.DBNull,
                SqlDbType = SqlDbType.Int,
            },
            new SqlParameter
            {
                ParameterName = "PageSize",
                Value = pageSize ?? Convert.DBNull,
                SqlDbType = SqlDbType.Int,
            },
            parameterreturnValue,
        };
        var _ = await _context.SqlQueryToListAsync<core_CaseType_sp_GetAllResult>("EXEC @returnValue = [dbo].[core_CaseType_sp_GetAll_pagination] @PageNumber = @PageNumber, @PageSize = @PageSize", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves all certification stamps.
    /// </summary>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of all certification stamps.</returns>
    /// <remarks>This method executes the stored procedure [dbo].[core_CertificationStamp_sp_GetAll].</remarks>
    public async virtual Task<List<core_CertificationStamp_sp_GetAllResult>> core_CertificationStamp_sp_GetAllAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_CertificationStamp_sp_GetAllResult>("EXEC @returnValue = [dbo].[core_CertificationStamp_sp_GetAll]", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves a certification stamp by ID.
    /// </summary>
    /// <param name="id">The certification stamp ID.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list containing the certification stamp information.</returns>
    /// <remarks>This method executes the stored procedure [dbo].[core_CertificationStamp_sp_GetById].</remarks>
    public async virtual Task<List<core_CertificationStamp_sp_GetByIdResult>> core_CertificationStamp_sp_GetByIdAsync(int? id, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_CertificationStamp_sp_GetByIdResult>("EXEC @returnValue = [dbo].[core_CertificationStamp_sp_GetById] @id = @id", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves workflows for a certification stamp.
    /// </summary>
    /// <param name="stampId">The certification stamp ID.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of workflows for the specified certification stamp.</returns>
    /// <remarks>This method executes the stored procedure [dbo].[core_CertificationStamp_sp_GetCerticationStampWorkflows].</remarks>
    public async virtual Task<List<core_CertificationStamp_sp_GetCerticationStampWorkflowsResult>> core_CertificationStamp_sp_GetCerticationStampWorkflowsAsync(int? stampId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "stampId",
                    Value = stampId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_CertificationStamp_sp_GetCerticationStampWorkflowsResult>("EXEC @returnValue = [dbo].[core_CertificationStamp_sp_GetCerticationStampWorkflows] @stampId = @stampId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves parameter field data for a certification stamp.
    /// </summary>
    /// <param name="refId">The reference ID.</param>
    /// <param name="selectSecondary">Whether to select secondary data.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of parameter field data for the certification stamp.</returns>
    /// <remarks>This method executes the stored procedure [dbo].[core_CertificationStamp_sp_GetParameterFieldData].</remarks>
    public async virtual Task<List<core_CertificationStamp_sp_GetParameterFieldDataResult>> core_CertificationStamp_sp_GetParameterFieldDataAsync(int? refId, bool? selectSecondary, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "selectSecondary",
                    Value = selectSecondary ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_CertificationStamp_sp_GetParameterFieldDataResult>("EXEC @returnValue = [dbo].[core_CertificationStamp_sp_GetParameterFieldData] @refId = @refId, @selectSecondary = @selectSecondary", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves special case stamp for a certification stamp.
    /// </summary>
    /// <param name="refId">The reference ID.</param>
    /// <param name="selectSecondary">Whether to select secondary data.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of special case stamp data for the certification stamp.</returns>
    /// <remarks>This method executes the stored procedure [dbo].[core_CertificationStamp_sp_GetSpecialCaseStamp].</remarks>
    public async virtual Task<List<core_CertificationStamp_sp_GetSpecialCaseStampResult>> core_CertificationStamp_sp_GetSpecialCaseStampAsync(int? refId, bool? selectSecondary, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "selectSecondary",
                    Value = selectSecondary ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_CertificationStamp_sp_GetSpecialCaseStampResult>("EXEC @returnValue = [dbo].[core_CertificationStamp_sp_GetSpecialCaseStamp] @refId = @refId, @selectSecondary = @selectSecondary", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves workflow certification stamps.
    /// </summary>
    /// <param name="workflowId">The workflow ID.</param>
    /// <param name="isQualified">Whether the stamps are qualified.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of workflow certification stamps.</returns>
    /// <remarks>This method executes the stored procedure [dbo].[core_CertificationStamp_sp_GetWorkflowCertificationStamps].</remarks>
    public async virtual Task<List<core_CertificationStamp_sp_GetWorkflowCertificationStampsResult>> core_CertificationStamp_sp_GetWorkflowCertificationStampsAsync(int? workflowId, bool? isQualified, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "workflowId",
                    Value = workflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "isQualified",
                    Value = isQualified ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_CertificationStamp_sp_GetWorkflowCertificationStampsResult>("EXEC @returnValue = [dbo].[core_CertificationStamp_sp_GetWorkflowCertificationStamps] @workflowId = @workflowId, @isQualified = @isQualified", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Inserts a new certification stamp.
    /// </summary>
    /// <param name="name">The name of the certification stamp.</param>
    /// <param name="body">The body content of the certification stamp.</param>
    /// <param name="isQualified">Whether the certification stamp is qualified.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>The number of affected rows.</returns>
    /// <remarks>This method executes the stored procedure [dbo].[core_CertificationStamp_sp_Insert].</remarks>
    public async virtual Task<int> core_CertificationStamp_sp_InsertAsync(string? name, string? body, bool? isQualified, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "name",
                    Size = 200,
                    Value = name ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "body",
                    Size = 1000,
                    Value = body ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "isQualified",
                    Value = isQualified ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_CertificationStamp_sp_Insert] @name = @name, @body = @body, @isQualified = @isQualified", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Updates a certification stamp.
    /// </summary>
    /// <param name="id">The ID of the certification stamp to update.</param>
    /// <param name="name">The updated name of the certification stamp.</param>
    /// <param name="body">The updated body content of the certification stamp.</param>
    /// <param name="isQualified">Whether the certification stamp is qualified.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>The number of affected rows.</returns>
    /// <remarks>This method executes the stored procedure [dbo].[core_CertificationStamp_sp_Update].</remarks>
    public async virtual Task<int> core_CertificationStamp_sp_UpdateAsync(int? id, string? name, string? body, bool? isQualified, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "name",
                    Size = 200,
                    Value = name ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "body",
                    Size = 1000,
                    Value = body ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "isQualified",
                    Value = isQualified ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_CertificationStamp_sp_Update] @id = @id, @name = @name, @body = @body, @isQualified = @isQualified", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Updates certification stamp workflow maps.
    /// </summary>
    /// <param name="stampId">The certification stamp ID.</param>
    /// <param name="workflowIds">A data table containing workflow IDs.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>The number of affected rows.</returns>
    /// <remarks>This method executes the stored procedure [dbo].[core_CertificationStamp_sp_UpdateCertificationStampWorkflowMaps].</remarks>
    public async virtual Task<int> core_CertificationStamp_sp_UpdateCertificationStampWorkflowMapsAsync(int? stampId, DataTable? workflowIds, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "stampId",
                    Value = stampId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "workflowIds",
                    Value = workflowIds ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Structured,
                    TypeName = "[dbo].[tblIntegerList]",
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_CertificationStamp_sp_UpdateCertificationStampWorkflowMaps] @stampId = @stampId, @workflowIds = @workflowIds", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves all certification stamps with pagination.
    /// </summary>
    /// <param name="pageNumber">The page number to retrieve.</param>
    /// <param name="pageSize">The number of items per page.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of certification stamps for the specified page.</returns>
    public async virtual Task<List<core_CertificationStamp_sp_GetAllResult>> core_CertificationStamp_sp_GetAll_paginationAsync(int? pageNumber = 1, int? pageSize = 10, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
            new SqlParameter
            {
                ParameterName = "PageNumber",
                Value = pageNumber ?? Convert.DBNull,
                SqlDbType = SqlDbType.Int,
            },
            new SqlParameter
            {
                ParameterName = "PageSize",
                Value = pageSize ?? Convert.DBNull,
                SqlDbType = SqlDbType.Int,
            },
            parameterreturnValue,
        };
        var _ = await _context.SqlQueryToListAsync<core_CertificationStamp_sp_GetAllResult>("EXEC @returnValue = [dbo].[core_CertificationStamp_sp_GetAll_pagination] @PageNumber = @PageNumber, @PageSize = @PageSize", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves child case comments by case.
    /// </summary>
    /// <param name="refid">The reference ID.</param>
    /// <param name="module">The module identifier.</param>
    /// <param name="commentType">The comment type.</param>
    /// <param name="commentId">The comment ID.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of child case comment results.</returns>
    /// <remarks>This method executes the stored procedure [dbo].[core_ChildCaseComment_GetByCase].</remarks>
    public async virtual Task<List<core_ChildCaseComment_GetByCaseResult>> core_ChildCaseComment_GetByCaseAsync(int? refid, int? module, int? commentType, int? commentId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "refid",
                    Value = refid ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "module",
                    Value = module ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "commentType",
                    Value = commentType ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "commentId",
                    Value = commentId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_ChildCaseComment_GetByCaseResult>("EXEC @returnValue = [dbo].[core_ChildCaseComment_GetByCase] @refid = @refid, @module = @module, @commentType = @commentType, @commentId = @commentId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves a child case comment by ID.
    /// </summary>
    /// <param name="id">The comment ID.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of child case comment results.</returns>
    /// <remarks>This method executes the stored procedure [dbo].[core_ChildCaseComment_GetById].</remarks>
    public async virtual Task<List<core_ChildCaseComment_GetByIdResult>> core_ChildCaseComment_GetByIdAsync(int? id, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_ChildCaseComment_GetByIdResult>("EXEC @returnValue = [dbo].[core_ChildCaseComment_GetById] @id = @id", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Saves or updates a child case comment.
    /// </summary>
    /// <param name="id">The comment ID.</param>
    /// <param name="refId">The reference ID.</param>
    /// <param name="module">The module identifier.</param>
    /// <param name="comment">The comment text.</param>
    /// <param name="userId">The user ID.</param>
    /// <param name="createdDate">The creation date.</param>
    /// <param name="commentType">The comment type.</param>
    /// <param name="commentId">The comment ID.</param>
    /// <param name="role">The user role.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>The number of affected rows.</returns>
    /// <remarks>This method executes the stored procedure [dbo].[core_ChildCaseComments_SaveOrUpdateComment].</remarks>
    public async virtual Task<int> core_ChildCaseComments_SaveOrUpdateCommentAsync(int? id, int? refId, int? module, string? comment, int? userId, DateTime? createdDate, int? commentType, int? commentId, string? role, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "module",
                    Value = module ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "comment",
                    Size = -1,
                    Value = comment ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "createdDate",
                    Value = createdDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "commentType",
                    Value = commentType ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "commentId",
                    Value = commentId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "role",
                    Size = 200,
                    Value = role ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_ChildCaseComments_SaveOrUpdateComment] @id = @id, @refId = @refId, @module = @module, @comment = @comment, @userId = @userId, @createdDate = @createdDate, @commentType = @commentType, @commentId = @commentId, @role = @role", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Updates a comment for child case comments.
    /// </summary>
    /// <param name="id">The ID of the comment to update.</param>
    /// <param name="comment">The updated comment text.</param>
    /// <param name="createdDate">The date and time when the comment was created.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>The number of affected rows.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="id"/>, <paramref name="comment"/>, or <paramref name="createdDate"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_ChildCaseComments_UpdateComment].</remarks>
    public async virtual Task<int> core_ChildCaseComments_UpdateCommentAsync(int? id, string? comment, DateTime? createdDate, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "comment",
                    Size = -1,
                    Value = comment ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "createdDate",
                    Value = createdDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_ChildCaseComments_UpdateComment] @id = @id, @comment = @comment, @createdDate = @createdDate", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves all completed by groups.
    /// </summary>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of all completed by groups.</returns>
    /// <remarks>This method executes the stored procedure [dbo].[core_CompletedByGroup_sp_GetAll].</remarks>
    public async virtual Task<List<core_CompletedByGroup_sp_GetAllResult>> core_CompletedByGroup_sp_GetAllAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_CompletedByGroup_sp_GetAllResult>("EXEC @returnValue = [dbo].[core_CompletedByGroup_sp_GetAll]", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves a completed by group by its ID.
    /// </summary>
    /// <param name="id">The ID of the completed by group.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list containing the completed by group information.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="id"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_CompletedByGroup_sp_GetById].</remarks>
    public async virtual Task<List<core_CompletedByGroup_sp_GetByIdResult>> core_CompletedByGroup_sp_GetByIdAsync(int? id, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_CompletedByGroup_sp_GetByIdResult>("EXEC @returnValue = [dbo].[core_CompletedByGroup_sp_GetById] @id = @id", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves workflows associated with a completed by group.
    /// </summary>
    /// <param name="completedByGroupId">The ID of the completed by group.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of workflows for the specified completed by group.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="completedByGroupId"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_CompletedByGroup_sp_GetCompletedByGroupWorkflows].</remarks>
    public async virtual Task<List<core_CompletedByGroup_sp_GetCompletedByGroupWorkflowsResult>> core_CompletedByGroup_sp_GetCompletedByGroupWorkflowsAsync(int? completedByGroupId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "completedByGroupId",
                    Value = completedByGroupId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_CompletedByGroup_sp_GetCompletedByGroupWorkflowsResult>("EXEC @returnValue = [dbo].[core_CompletedByGroup_sp_GetCompletedByGroupWorkflows] @completedByGroupId = @completedByGroupId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves completed by groups associated with a workflow.
    /// </summary>
    /// <param name="workflowId">The ID of the workflow.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of completed by groups for the specified workflow.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="workflowId"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_CompletedByGroup_sp_GetWorkflowCompletedByGroups].</remarks>
    public async virtual Task<List<core_CompletedByGroup_sp_GetWorkflowCompletedByGroupsResult>> core_CompletedByGroup_sp_GetWorkflowCompletedByGroupsAsync(int? workflowId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "workflowId",
                    Value = workflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_CompletedByGroup_sp_GetWorkflowCompletedByGroupsResult>("EXEC @returnValue = [dbo].[core_CompletedByGroup_sp_GetWorkflowCompletedByGroups] @workflowId = @workflowId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Inserts a new completed by group.
    /// </summary>
    /// <param name="name">The name of the completed by group.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>The number of affected rows.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="name"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_CompletedByGroup_sp_Insert].</remarks>
    public async virtual Task<int> core_CompletedByGroup_sp_InsertAsync(string? name, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "name",
                    Size = 200,
                    Value = name ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_CompletedByGroup_sp_Insert] @name = @name", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Updates an existing completed by group.
    /// </summary>
    /// <param name="id">The ID of the completed by group to update.</param>
    /// <param name="name">The updated name of the completed by group.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>The number of affected rows.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="id"/> or <paramref name="name"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_CompletedByGroup_sp_Update].</remarks>
    public async virtual Task<int> core_CompletedByGroup_sp_UpdateAsync(int? id, string? name, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "name",
                    Size = 200,
                    Value = name ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_CompletedByGroup_sp_Update] @id = @id, @name = @name", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Updates the workflow mappings for a completed by group.
    /// </summary>
    /// <param name="completedByGroupId">The ID of the completed by group.</param>
    /// <param name="workflowIds">A data table containing the workflow IDs to map.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>The number of affected rows.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="completedByGroupId"/> or <paramref name="workflowIds"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_CompletedByGroup_sp_UpdateCompletedByGroupWorkflowMaps].</remarks>
    public async virtual Task<int> core_CompletedByGroup_sp_UpdateCompletedByGroupWorkflowMapsAsync(int? completedByGroupId, DataTable? workflowIds, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "completedByGroupId",
                    Value = completedByGroupId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "workflowIds",
                    Value = workflowIds ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Structured,
                    TypeName = "[dbo].[tblIntegerList]",
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_CompletedByGroup_sp_UpdateCompletedByGroupWorkflowMaps] @completedByGroupId = @completedByGroupId, @workflowIds = @workflowIds", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves all completed by groups with pagination.
    /// </summary>
    /// <param name="pageNumber">The page number to retrieve.</param>
    /// <param name="pageSize">The number of items per page.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of completed by groups for the specified page.</returns>
    public async virtual Task<List<core_CompletedByGroup_sp_GetAllResult>> core_CompletedByGroup_sp_GetAll_paginationAsync(int? pageNumber = 1, int? pageSize = 10, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
            new SqlParameter
            {
                ParameterName = "PageNumber",
                Value = pageNumber ?? Convert.DBNull,
                SqlDbType = SqlDbType.Int,
            },
            new SqlParameter
            {
                ParameterName = "PageSize",
                Value = pageSize ?? Convert.DBNull,
                SqlDbType = SqlDbType.Int,
            },
            parameterreturnValue,
        };
        var _ = await _context.SqlQueryToListAsync<core_CompletedByGroup_sp_GetAllResult>("EXEC @returnValue = [dbo].[core_CompletedByGroup_sp_GetAll_pagination] @PageNumber = @PageNumber, @PageSize = @PageSize", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves all email templates based on the component type.
    /// </summary>
    /// <param name="compo">The component type identifier.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of all email templates for the specified component.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="compo"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_email_sp_GetAll].</remarks>
    public async virtual Task<List<core_email_sp_GetAllResult>> core_email_sp_GetAllAsync(string? compo, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "compo",
                    Size = 1,
                    Value = compo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Char,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_email_sp_GetAllResult>("EXEC @returnValue = [dbo].[core_email_sp_GetAll] @compo = @compo", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves an email template by its ID.
    /// </summary>
    /// <param name="templateID">The ID of the email template.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list containing the email template information.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="templateID"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_email_sp_GetEmailByID].</remarks>
    public async virtual Task<List<core_email_sp_GetEmailByIDResult>> core_email_sp_GetEmailByIDAsync(int? templateID, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "templateID",
                    Value = templateID ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_email_sp_GetEmailByIDResult>("EXEC @returnValue = [dbo].[core_email_sp_GetEmailByID] @templateID = @templateID", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves an email template by its title.
    /// </summary>
    /// <param name="title">The title of the email template.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list containing the email template information.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="title"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_email_sp_GetEmailByName].</remarks>
    public async virtual Task<List<core_email_sp_GetEmailByNameResult>> core_email_sp_GetEmailByNameAsync(string? title, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "title",
                    Size = 50,
                    Value = title ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_email_sp_GetEmailByNameResult>("EXEC @returnValue = [dbo].[core_email_sp_GetEmailByName] @title = @title", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Inserts a new email template.
    /// </summary>
    /// <param name="compo">The component type identifier.</param>
    /// <param name="subject">The subject of the email.</param>
    /// <param name="body">The body content of the email.</param>
    /// <param name="title">The title of the email template.</param>
    /// <param name="dataProc">The data processing identifier.</param>
    /// <param name="status">The status of the email template.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>The number of affected rows.</returns>
    /// <exception cref="ArgumentNullException">Thrown when required parameters are null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_email_sp_InsertEmailTemplate].</remarks>
    public async virtual Task<int> core_email_sp_InsertEmailTemplateAsync(string? compo, string? subject, string? body, string? title, string? dataProc, bool? status, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "compo",
                    Size = 1,
                    Value = compo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "subject",
                    Size = 50,
                    Value = subject ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "body",
                    Size = 500,
                    Value = body ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "title",
                    Size = 50,
                    Value = title ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "dataProc",
                    Size = 50,
                    Value = dataProc ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Value = status ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_email_sp_InsertEmailTemplate] @compo = @compo, @subject = @subject, @body = @body, @title = @title, @dataProc = @dataProc, @status = @status", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Sends waiver reminder emails.
    /// </summary>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of results from sending waiver reminders.</returns>
    /// <remarks>This method executes the stored procedure [dbo].[core_email_sp_SendWaiverReminders].</remarks>
    public async virtual Task<List<core_email_sp_SendWaiverRemindersResult>> core_email_sp_SendWaiverRemindersAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_email_sp_SendWaiverRemindersResult>("EXEC @returnValue = [dbo].[core_email_sp_SendWaiverReminders]", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Updates an email template by its ID.
    /// </summary>
    /// <param name="templateID">The ID of the email template to update.</param>
    /// <param name="subject">The updated subject of the email.</param>
    /// <param name="body">The updated body content of the email.</param>
    /// <param name="title">The updated title of the email template.</param>
    /// <param name="dataProc">The updated data processing identifier.</param>
    /// <param name="status">The updated status of the email template.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>The number of affected rows.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="templateID"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_email_sp_UpdateEmailByID].</remarks>
    public async virtual Task<int> core_email_sp_UpdateEmailByIDAsync(int? templateID, string? subject, string? body, string? title, string? dataProc, bool? status, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "templateID",
                    Value = templateID ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "subject",
                    Size = 50,
                    Value = subject ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "body",
                    Size = 500,
                    Value = body ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "title",
                    Size = 50,
                    Value = title ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "dataProc",
                    Size = 50,
                    Value = dataProc ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Value = status ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_email_sp_UpdateEmailByID] @templateID = @templateID, @subject = @subject, @body = @body, @title = @title, @dataProc = @dataProc, @status = @status", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves all email templates based on the component type with pagination.
    /// </summary>
    /// <param name="compo">The component type identifier.</param>
    /// <param name="pageNumber">The page number to retrieve.</param>
    /// <param name="pageSize">The number of items per page.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of email templates for the specified component and page.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="compo"/> is null.</exception>
    public async virtual Task<List<core_email_sp_GetAllResult>> core_email_sp_GetAll_paginationAsync(string? compo, int? pageNumber = 1, int? pageSize = 10, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
            new SqlParameter
            {
                ParameterName = "compo",
                Size = 1,
                Value = compo ?? Convert.DBNull,
                SqlDbType = SqlDbType.Char,
            },
            new SqlParameter
            {
                ParameterName = "PageNumber",
                Value = pageNumber ?? Convert.DBNull,
                SqlDbType = SqlDbType.Int,
            },
            new SqlParameter
            {
                ParameterName = "PageSize",
                Value = pageSize ?? Convert.DBNull,
                SqlDbType = SqlDbType.Int,
            },
            parameterreturnValue,
        };
        var _ = await _context.SqlQueryToListAsync<core_email_sp_GetAllResult>("EXEC @returnValue = [dbo].[core_email_sp_GetAll_pagination] @compo = @compo, @PageNumber = @PageNumber, @PageSize = @PageSize", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves all user PAS codes with pagination.
    /// </summary>
    /// <param name="chainType">The chain type.</param>
    /// <param name="adminUserID">The admin user ID.</param>
    /// <param name="pageNumber">The page number to retrieve.</param>
    /// <param name="pageSize">The number of items per page.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of user PAS codes for the specified page.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="chainType"/> or <paramref name="adminUserID"/> is null.</exception>
    public async virtual Task<List<core_pascodes_GetAllUserPasCodesResult>> core_pascodes_GetAllUserPasCodes_paginationAsync(string? chainType, int? adminUserID, int? pageNumber = 1, int? pageSize = 10, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
            new SqlParameter
            {
                ParameterName = "ChainType",
                Size = 20,
                Value = chainType ?? Convert.DBNull,
                SqlDbType = SqlDbType.VarChar,
            },
            new SqlParameter
            {
                ParameterName = "adminUserID",
                Value = adminUserID ?? Convert.DBNull,
                SqlDbType = SqlDbType.Int,
            },
            new SqlParameter
            {
                ParameterName = "PageNumber",
                Value = pageNumber ?? Convert.DBNull,
                SqlDbType = SqlDbType.Int,
            },
            new SqlParameter
            {
                ParameterName = "PageSize",
                Value = pageSize ?? Convert.DBNull,
                SqlDbType = SqlDbType.Int,
            },
            parameterreturnValue,
        };
        var _ = await _context.SqlQueryToListAsync<core_pascodes_GetAllUserPasCodesResult>("EXEC @returnValue = [dbo].[core_pascodes_GetAllUserPasCodes_pagination] @ChainType = @ChainType, @adminUserID = @adminUserID, @PageNumber = @PageNumber, @PageSize = @PageSize", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves role abbreviations based on group names.
    /// </summary>
    /// <param name="groups">A comma-separated list of group names.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of role abbreviations.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="groups"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_GetRoleAbbre].</remarks>
    public async virtual Task<List<core_GetRoleAbbreResult>> core_GetRoleAbbreAsync(string? groups, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "groups",
                    Size = 100,
                    Value = groups ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_GetRoleAbbreResult>("EXEC @returnValue = [dbo].[core_GetRoleAbbre] @groups = @groups", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves state abbreviations based on state names.
    /// </summary>
    /// <param name="states">A comma-separated list of state names.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of state abbreviations.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="states"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_GetStateAbbre].</remarks>
    public async virtual Task<List<core_GetStateAbbreResult>> core_GetStateAbbreAsync(string? states, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "states",
                    Size = 200,
                    Value = states ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_GetStateAbbreResult>("EXEC @returnValue = [dbo].[core_GetStateAbbre] @states = @states", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Clears the view permissions for groups based on the specified group ID.
    /// </summary>
    /// <param name="groupId">The ID of the group for which to clear view permissions.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>The number of affected rows.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="groupId"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_group_sp_ClearViewByGroups].</remarks>
    public async virtual Task<int> core_group_sp_ClearViewByGroupsAsync(short? groupId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "groupId",
                    Value = groupId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_group_sp_ClearViewByGroups] @groupId = @groupId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Deletes a group by its ID.
    /// </summary>
    /// <param name="id">The ID of the group to delete.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of results from the delete operation.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="id"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_group_sp_Delete].</remarks>
    public async virtual Task<List<core_group_sp_DeleteResult>> core_group_sp_DeleteAsync(int? id, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_group_sp_DeleteResult>("EXEC @returnValue = [dbo].[core_group_sp_Delete] @id = @id", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves all groups based on the component type.
    /// </summary>
    /// <param name="compo">The component type to filter groups by.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of all groups matching the specified component type.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="compo"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_group_sp_GetAll].</remarks>
    public async virtual Task<List<core_group_sp_GetAllResult>> core_group_sp_GetAllAsync(int? compo, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "compo",
                    Value = compo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_group_sp_GetAllResult>("EXEC @returnValue = [dbo].[core_group_sp_GetAll] @compo = @compo", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves all groups with managed information for a specified group ID.
    /// </summary>
    /// <param name="groupId">The ID of the group to retrieve managed information for.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of groups with their managed information.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="groupId"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_group_sp_GetAllWithManaged].</remarks>
    public async virtual Task<List<core_group_sp_GetAllWithManagedResult>> core_group_sp_GetAllWithManagedAsync(short? groupId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "groupId",
                    Value = groupId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_group_sp_GetAllWithManagedResult>("EXEC @returnValue = [dbo].[core_group_sp_GetAllWithManaged] @groupId = @groupId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves groups by component type.
    /// </summary>
    /// <param name="compo">The component type to filter groups by.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of groups matching the specified component type.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="compo"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_group_sp_GetByCompo].</remarks>
    public async virtual Task<List<core_group_sp_GetByCompoResult>> core_group_sp_GetByCompoAsync(string? compo, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "compo",
                    Size = 1,
                    Value = compo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Char,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_group_sp_GetByCompoResult>("EXEC @returnValue = [dbo].[core_group_sp_GetByCompo] @compo = @compo", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves groups by component type and admin group ID.
    /// </summary>
    /// <param name="compo">The component type to filter groups by.</param>
    /// <param name="adminCurrentGroupId">The admin group ID to filter by.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of groups matching the specified component type and admin group ID.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="compo"/> or <paramref name="adminCurrentGroupId"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_group_sp_GetByCompoAndAdmin].</remarks>
    public async virtual Task<List<core_group_sp_GetByCompoAndAdminResult>> core_group_sp_GetByCompoAndAdminAsync(string? compo, byte? adminCurrentGroupId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "compo",
                    Size = 1,
                    Value = compo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "adminCurrentGroupId",
                    Value = adminCurrentGroupId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_group_sp_GetByCompoAndAdminResult>("EXEC @returnValue = [dbo].[core_group_sp_GetByCompoAndAdmin] @compo = @compo, @adminCurrentGroupId = @adminCurrentGroupId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves groups by component type only.
    /// </summary>
    /// <param name="compo">The component type to filter groups by.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of groups matching the specified component type.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="compo"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_group_sp_GetByCompoOnly].</remarks>
    public async virtual Task<List<core_group_sp_GetByCompoOnlyResult>> core_group_sp_GetByCompoOnlyAsync(string? compo, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "compo",
                    Size = 1,
                    Value = compo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Char,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_group_sp_GetByCompoOnlyResult>("EXEC @returnValue = [dbo].[core_group_sp_GetByCompoOnly] @compo = @compo", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves managed groups for a specified group ID.
    /// </summary>
    /// <param name="groupId">The ID of the group to retrieve managed groups for.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of managed groups for the specified group ID.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="groupId"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_group_sp_GetManaged].</remarks>
    public async virtual Task<List<core_group_sp_GetManagedResult>> core_group_sp_GetManagedAsync(short? groupId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "groupId",
                    Value = groupId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_group_sp_GetManagedResult>("EXEC @returnValue = [dbo].[core_group_sp_GetManaged] @groupId = @groupId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves managed groups for dropdown display for a specified group ID.
    /// </summary>
    /// <param name="groupId">The ID of the group to retrieve managed groups for dropdown.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of managed groups formatted for dropdown display.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="groupId"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_group_sp_GetManagedDropDown].</remarks>
    public async virtual Task<List<core_group_sp_GetManagedDropDownResult>> core_group_sp_GetManagedDropDownAsync(short? groupId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "groupId",
                    Value = groupId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_group_sp_GetManagedDropDownResult>("EXEC @returnValue = [dbo].[core_group_sp_GetManagedDropDown] @groupId = @groupId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves groups that can view the specified group ID.
    /// </summary>
    /// <param name="groupId">The ID of the group to retrieve view permissions for.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of groups that have view permissions for the specified group.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="groupId"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_group_sp_GetViewBy].</remarks>
    public async virtual Task<List<core_group_sp_GetViewByResult>> core_group_sp_GetViewByAsync(short? groupId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "groupId",
                    Value = groupId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_group_sp_GetViewByResult>("EXEC @returnValue = [dbo].[core_group_sp_GetViewBy] @groupId = @groupId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Inserts a new group with the specified parameters.
    /// </summary>
    /// <param name="name">The name of the group.</param>
    /// <param name="abbr">The abbreviation of the group.</param>
    /// <param name="compo">The component type of the group.</param>
    /// <param name="accessScope">The access scope of the group.</param>
    /// <param name="active">Whether the group is active.</param>
    /// <param name="partialMatch">Whether partial matching is enabled.</param>
    /// <param name="showInfo">Whether to show information for the group.</param>
    /// <param name="hipaaRequired">Whether HIPAA compliance is required.</param>
    /// <param name="canRegister">Whether the group can register.</param>
    /// <param name="sortOrder">The sort order of the group.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>The number of affected rows.</returns>
    /// <exception cref="ArgumentNullException">Thrown when required parameters are null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_group_sp_Insert].</remarks>
    public async virtual Task<int> core_group_sp_InsertAsync(string? name, string? abbr, string? compo, byte? accessScope, bool? active, bool? partialMatch, bool? showInfo, bool? hipaaRequired, bool? canRegister, byte? sortOrder, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "name",
                    Size = 200,
                    Value = name ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "abbr",
                    Size = 20,
                    Value = abbr ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "compo",
                    Size = 1,
                    Value = compo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "accessScope",
                    Value = accessScope ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "active",
                    Value = active ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "partialMatch",
                    Value = partialMatch ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "showInfo",
                    Value = showInfo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "hipaaRequired",
                    Value = hipaaRequired ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "canRegister",
                    Value = canRegister ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_group_sp_Insert] @name = @name, @abbr = @abbr, @compo = @compo, @accessScope = @accessScope, @active = @active, @partialMatch = @partialMatch, @showInfo = @showInfo, @hipaaRequired = @hipaaRequired, @canRegister = @canRegister, @sortOrder = @sortOrder", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Looks up component types for groups.
    /// </summary>
    /// <param name="compo">The component type to look up.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of component types matching the lookup criteria.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="compo"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_group_sp_lkupCompos].</remarks>
    public async virtual Task<List<core_group_sp_lkupComposResult>> core_group_sp_lkupComposAsync(string? compo, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "compo",
                    Size = 1,
                    Value = compo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Char,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_group_sp_lkupComposResult>("EXEC @returnValue = [dbo].[core_group_sp_lkupCompos] @compo = @compo", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Updates an existing group with the specified parameters.
    /// </summary>
    /// <param name="groupId">The ID of the group to update.</param>
    /// <param name="name">The new name of the group.</param>
    /// <param name="abbr">The new abbreviation of the group.</param>
    /// <param name="compo">The new component type of the group.</param>
    /// <param name="accessScope">The new access scope of the group.</param>
    /// <param name="active">Whether the group is active.</param>
    /// <param name="partialMatch">Whether partial matching is enabled.</param>
    /// <param name="showInfo">Whether to show information for the group.</param>
    /// <param name="hipaaRequired">Whether HIPAA compliance is required.</param>
    /// <param name="canRegister">Whether the group can register.</param>
    /// <param name="sortOrder">The new sort order of the group.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>The number of affected rows.</returns>
    /// <exception cref="ArgumentNullException">Thrown when required parameters are null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_group_sp_Update].</remarks>
    public async virtual Task<int> core_group_sp_UpdateAsync(int? groupId, string? name, string? abbr, string? compo, byte? accessScope, bool? active, bool? partialMatch, bool? showInfo, bool? hipaaRequired, bool? canRegister, byte? sortOrder, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "groupId",
                    Value = groupId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "name",
                    Size = 100,
                    Value = name ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "abbr",
                    Size = 10,
                    Value = abbr ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "compo",
                    Size = 1,
                    Value = compo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "accessScope",
                    Value = accessScope ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "active",
                    Value = active ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "partialMatch",
                    Value = partialMatch ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "showInfo",
                    Value = showInfo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "hipaaRequired",
                    Value = hipaaRequired ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "canRegister",
                    Value = canRegister ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_group_sp_Update] @groupId = @groupId, @name = @name, @abbr = @abbr, @compo = @compo, @accessScope = @accessScope, @active = @active, @partialMatch = @partialMatch, @showInfo = @showInfo, @hipaaRequired = @hipaaRequired, @canRegister = @canRegister, @sortOrder = @sortOrder", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Updates group permissions for a specified group using XML document.
    /// </summary>
    /// <param name="groupId">The ID of the group to update permissions for.</param>
    /// <param name="xmlDocument">The XML document containing the permission settings.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>The number of affected rows.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="groupId"/> or <paramref name="xmlDocument"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_group_sp_UpdateGroupPermissions].</remarks>
    public async virtual Task<int> core_group_sp_UpdateGroupPermissionsAsync(short? groupId, string? xmlDocument, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "groupId",
                    Value = groupId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "XmlDocument",
                    Value = xmlDocument ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Text,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_group_sp_UpdateGroupPermissions] @groupId = @groupId, @XmlDocument = @XmlDocument", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Updates managed groups for a specified group using XML document.
    /// </summary>
    /// <param name="groupId">The ID of the group to update managed groups for.</param>
    /// <param name="xmlDocument">The XML document containing the managed group settings.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>The number of affected rows.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="groupId"/> or <paramref name="xmlDocument"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_group_sp_UpdateManagedGroups].</remarks>
    public async virtual Task<int> core_group_sp_UpdateManagedGroupsAsync(short? groupId, string? xmlDocument, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "groupId",
                    Value = groupId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "XmlDocument",
                    Value = xmlDocument ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Text,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_group_sp_UpdateManagedGroups] @groupId = @groupId, @XmlDocument = @XmlDocument", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Updates view permissions between groups (viewer and member groups).
    /// </summary>
    /// <param name="viewerId">The ID of the group that will have view permissions.</param>
    /// <param name="memberId">The ID of the group that will be viewed.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>The number of affected rows.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="viewerId"/> or <paramref name="memberId"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_group_sp_UpdateViewByGroups].</remarks>
    public async virtual Task<int> core_group_sp_UpdateViewByGroupsAsync(short? viewerId, short? memberId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "viewerId",
                    Value = viewerId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "memberId",
                    Value = memberId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_group_sp_UpdateViewByGroups] @viewerId = @viewerId, @memberId = @memberId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves all groups based on the component type with pagination.
    /// </summary>
    /// <param name="compo">The component type to filter groups by.</param>
    /// <param name="pageNumber">The page number to retrieve.</param>
    /// <param name="pageSize">The number of items per page.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of all groups matching the specified component type for the specified page.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="compo"/> is null.</exception>
    public async virtual Task<List<core_group_sp_GetAllResult>> core_group_sp_GetAll_paginationAsync(int? compo, int? pageNumber = 1, int? pageSize = 10, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
            new SqlParameter
            {
                ParameterName = "compo",
                Value = compo ?? Convert.DBNull,
                SqlDbType = SqlDbType.Int,
            },
            new SqlParameter
            {
                ParameterName = "PageNumber",
                Value = pageNumber ?? Convert.DBNull,
                SqlDbType = SqlDbType.Int,
            },
            new SqlParameter
            {
                ParameterName = "PageSize",
                Value = pageSize ?? Convert.DBNull,
                SqlDbType = SqlDbType.Int,
            },
            parameterreturnValue,
        };
        var _ = await _context.SqlQueryToListAsync<core_group_sp_GetAllResult>("EXEC @returnValue = [dbo].[core_group_sp_GetAll_pagination] @compo = @compo, @PageNumber = @PageNumber, @PageSize = @PageSize", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Finds the 7th characters for a specified ICD code.
    /// </summary>
    /// <param name="codeId">The ID of the ICD code to find 7th characters for.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of core_ICD_sp_Find7thCharactersResult objects containing the 7th character data.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="codeId"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_ICD_sp_Find7thCharacters].</remarks>
    public async virtual Task<List<core_ICD_sp_Find7thCharactersResult>> core_ICD_sp_Find7thCharactersAsync(int? codeId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "codeId",
                    Value = codeId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_ICD_sp_Find7thCharactersResult>("EXEC @returnValue = [dbo].[core_ICD_sp_Find7thCharacters] @codeId = @codeId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Finds ICD codes by a search value.
    /// </summary>
    /// <param name="value">The search value to find ICD codes for.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of core_ICD_sp_FindCodeResult objects containing the matching ICD codes.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="value"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_ICD_sp_FindCode].</remarks>
    public async virtual Task<List<core_ICD_sp_FindCodeResult>> core_ICD_sp_FindCodeAsync(string? value, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "value",
                    Size = 100,
                    Value = value ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_ICD_sp_FindCodeResult>("EXEC @returnValue = [dbo].[core_ICD_sp_FindCode] @value = @value", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Finds the version information for a specified ICD code.
    /// </summary>
    /// <param name="codeId">The ID of the ICD code to find version information for.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of core_ICD_sp_FindCodeVersionResult objects containing the version data.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="codeId"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_ICD_sp_FindCodeVersion].</remarks>
    public async virtual Task<List<core_ICD_sp_FindCodeVersionResult>> core_ICD_sp_FindCodeVersionAsync(int? codeId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "codeId",
                    Value = codeId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_ICD_sp_FindCodeVersionResult>("EXEC @returnValue = [dbo].[core_ICD_sp_FindCodeVersion] @codeId = @codeId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Finds nature of incident values for a specified ICD code.
    /// </summary>
    /// <param name="codeId">The ID of the ICD code to find nature of incident values for.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of core_ICD_sp_FindNatureOfIncidentValuesResult objects containing the nature of incident data.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="codeId"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_ICD_sp_FindNatureOfIncidentValues].</remarks>
    public async virtual Task<List<core_ICD_sp_FindNatureOfIncidentValuesResult>> core_ICD_sp_FindNatureOfIncidentValuesAsync(int? codeId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "codeId",
                    Value = codeId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_ICD_sp_FindNatureOfIncidentValuesResult>("EXEC @returnValue = [dbo].[core_ICD_sp_FindNatureOfIncidentValues] @codeId = @codeId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Gets the child ICD codes for a specified parent code.
    /// </summary>
    /// <param name="parentId">The ID of the parent ICD code.</param>
    /// <param name="version">The version of the ICD codes to retrieve.</param>
    /// <param name="onlyActive">Whether to return only active codes.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of core_ICD_sp_GetChildrenResult objects containing the child ICD codes.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="parentId"/> or <paramref name="version"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_ICD_sp_GetChildren].</remarks>
    public async virtual Task<List<core_ICD_sp_GetChildrenResult>> core_ICD_sp_GetChildrenAsync(int? parentId, int? version, bool? onlyActive, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "parentId",
                    Value = parentId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "version",
                    Value = version ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "onlyActive",
                    Value = onlyActive ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_ICD_sp_GetChildrenResult>("EXEC @returnValue = [dbo].[core_ICD_sp_GetChildren] @parentId = @parentId, @version = @version, @onlyActive = @onlyActive", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Inserts a nature of incident mapping for a specified ICD code.
    /// </summary>
    /// <param name="codeId">The ID of the ICD code to map.</param>
    /// <param name="nOIValue">The nature of incident value to insert.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>The number of affected rows.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="codeId"/> or <paramref name="nOIValue"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_ICD_sp_InsertNatureOfIncidentMapping].</remarks>
    public async virtual Task<int> core_ICD_sp_InsertNatureOfIncidentMappingAsync(int? codeId, string? nOIValue, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "codeId",
                    Value = codeId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NOIValue",
                    Size = 100,
                    Value = nOIValue ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_ICD_sp_InsertNatureOfIncidentMapping] @codeId = @codeId, @NOIValue = @NOIValue", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Updates an ICD code with new values.
    /// </summary>
    /// <param name="codeId">The ID of the ICD code to update.</param>
    /// <param name="newValue">The new value for the ICD code.</param>
    /// <param name="newText">The new text description for the ICD code.</param>
    /// <param name="newDisease">Whether the code represents a disease.</param>
    /// <param name="newActive">Whether the code is active.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>The number of affected rows.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="codeId"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_ICD_sp_UpdateCode].</remarks>
    public async virtual Task<int> core_ICD_sp_UpdateCodeAsync(int? codeId, string? newValue, string? newText, bool? newDisease, bool? newActive, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "codeId",
                    Value = codeId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "newValue",
                    Size = 100,
                    Value = newValue ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "newText",
                    Size = 400,
                    Value = newText ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "newDisease",
                    Value = newDisease ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "newActive",
                    Value = newActive ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_ICD_sp_UpdateCode] @codeId = @codeId, @newValue = @newValue, @newText = @newText, @newDisease = @newDisease, @newActive = @newActive", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Deletes a key-value pair by its ID.
    /// </summary>
    /// <param name="id">The ID of the key-value pair to delete.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>The number of affected rows.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="id"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_KeyVal_sp_DeleteKeyValueById].</remarks>
    public async virtual Task<int> core_KeyVal_sp_DeleteKeyValueByIdAsync(int? id, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_KeyVal_sp_DeleteKeyValueById] @id = @id", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Gets all editable key types.
    /// </summary>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of core_KeyVal_sp_GetEditableKeyTypesResult objects containing the editable key types.</returns>
    /// <remarks>This method executes the stored procedure [dbo].[core_KeyVal_sp_GetEditableKeyTypes].</remarks>
    public async virtual Task<List<core_KeyVal_sp_GetEditableKeyTypesResult>> core_KeyVal_sp_GetEditableKeyTypesAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_KeyVal_sp_GetEditableKeyTypesResult>("EXEC @returnValue = [dbo].[core_KeyVal_sp_GetEditableKeyTypes]", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Gets all help keys.
    /// </summary>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of core_KeyVal_sp_GetHelpKeysResult objects containing the help keys.</returns>
    /// <remarks>This method executes the stored procedure [dbo].[core_KeyVal_sp_GetHelpKeys].</remarks>
    public async virtual Task<List<core_KeyVal_sp_GetHelpKeysResult>> core_KeyVal_sp_GetHelpKeysAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_KeyVal_sp_GetHelpKeysResult>("EXEC @returnValue = [dbo].[core_KeyVal_sp_GetHelpKeys]", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Gets all keys using a specified key type.
    /// </summary>
    /// <param name="keyTypeID">The ID of the key type to filter by.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of core_KeyVal_sp_GetKeysUsingKeyTypeResult objects containing the keys for the specified type.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="keyTypeID"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_KeyVal_sp_GetKeysUsingKeyType].</remarks>
    public async virtual Task<List<core_KeyVal_sp_GetKeysUsingKeyTypeResult>> core_KeyVal_sp_GetKeysUsingKeyTypeAsync(int? keyTypeID, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "keyTypeID",
                    Value = keyTypeID ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_KeyVal_sp_GetKeysUsingKeyTypeResult>("EXEC @returnValue = [dbo].[core_KeyVal_sp_GetKeysUsingKeyType] @keyTypeID = @keyTypeID", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Gets key values by key description.
    /// </summary>
    /// <param name="keyDesc">The key description to search for.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of core_KeyVal_sp_GetKeyValuesByKeyDescriptionResult objects containing the matching key values.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="keyDesc"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_KeyVal_sp_GetKeyValuesByKeyDescription].</remarks>
    public async virtual Task<List<core_KeyVal_sp_GetKeyValuesByKeyDescriptionResult>> core_KeyVal_sp_GetKeyValuesByKeyDescriptionAsync(string? keyDesc, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "keyDesc",
                    Size = 200,
                    Value = keyDesc ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_KeyVal_sp_GetKeyValuesByKeyDescriptionResult>("EXEC @returnValue = [dbo].[core_KeyVal_sp_GetKeyValuesByKeyDescription] @keyDesc = @keyDesc", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Gets key values by key ID.
    /// </summary>
    /// <param name="keyId">The ID of the key to get values for.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of core_KeyVal_sp_GetKeyValuesByKeyIdResult objects containing the key values.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="keyId"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_KeyVal_sp_GetKeyValuesByKeyId].</remarks>
    public async virtual Task<List<core_KeyVal_sp_GetKeyValuesByKeyIdResult>> core_KeyVal_sp_GetKeyValuesByKeyIdAsync(int? keyId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "keyId",
                    Value = keyId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_KeyVal_sp_GetKeyValuesByKeyIdResult>("EXEC @returnValue = [dbo].[core_KeyVal_sp_GetKeyValuesByKeyId] @keyId = @keyId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Inserts a new key-value pair.
    /// </summary>
    /// <param name="keyId">The ID of the key to associate with the value.</param>
    /// <param name="valueDescription">The description of the value.</param>
    /// <param name="value">The value to insert.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>The number of affected rows.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="keyId"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_KeyVal_sp_InsertKeyValue].</remarks>
    public async virtual Task<int> core_KeyVal_sp_InsertKeyValueAsync(int? keyId, string? valueDescription, string? value, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "keyId",
                    Value = keyId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "valueDescription",
                    Size = 50,
                    Value = valueDescription ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "value",
                    Size = -1,
                    Value = value ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_KeyVal_sp_InsertKeyValue] @keyId = @keyId, @valueDescription = @valueDescription, @value = @value", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Updates a key-value pair by its ID.
    /// </summary>
    /// <param name="id">The ID of the key-value pair to update.</param>
    /// <param name="newKeyId">The new key ID to associate with the value.</param>
    /// <param name="newValueDescription">The new description for the value.</param>
    /// <param name="newValue">The new value.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>The number of affected rows.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="id"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_KeyVal_sp_UpdateKeyValueById].</remarks>
    public async virtual Task<int> core_KeyVal_sp_UpdateKeyValueByIdAsync(int? id, int? newKeyId, string? newValueDescription, string? newValue, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "newKeyId",
                    Value = newKeyId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "newValueDescription",
                    Size = 50,
                    Value = newValueDescription ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "newValue",
                    Size = -1,
                    Value = newValue ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_KeyVal_sp_UpdateKeyValueById] @id = @id, @newKeyId = @newKeyId, @newValueDescription = @newValueDescription, @newValue = @newValue", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Gets all keys with pagination.
    /// </summary>
    /// <param name="pageNumber">The page number to retrieve.</param>
    /// <param name="pageSize">The number of items per page.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of all keys for the specified page.</returns>
    public async virtual Task<List<core_KeyVale_sp_GetAllKeysResult>> core_KeyVale_sp_GetAllKeys_paginationAsync(int? pageNumber = 1, int? pageSize = 10, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
            new SqlParameter
            {
                ParameterName = "PageNumber",
                Value = pageNumber ?? Convert.DBNull,
                SqlDbType = SqlDbType.Int,
            },
            new SqlParameter
            {
                ParameterName = "PageSize",
                Value = pageSize ?? Convert.DBNull,
                SqlDbType = SqlDbType.Int,
            },
            parameterreturnValue,
        };
        var _ = await _context.SqlQueryToListAsync<core_KeyVale_sp_GetAllKeysResult>("EXEC @returnValue = [dbo].[core_KeyVale_sp_GetAllKeys_pagination] @PageNumber = @PageNumber, @PageSize = @PageSize", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Gets all keys.
    /// </summary>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of core_KeyVale_sp_GetAllKeysResult objects containing all keys.</returns>
    /// <remarks>This method executes the stored procedure [dbo].[core_KeyVale_sp_GetAllKeys].</remarks>
    public async virtual Task<List<core_KeyVale_sp_GetAllKeysResult>> core_KeyVale_sp_GetAllKeysAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_KeyVale_sp_GetAllKeysResult>("EXEC @returnValue = [dbo].[core_KeyVale_sp_GetAllKeys]", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Gets appeal post-processing information by appeal ID.
    /// </summary>
    /// <param name="appeal_id">The ID of the appeal to get post-processing information for.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of core_lod_sp_appealPostProcessingIdResult objects containing the appeal post-processing data.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="appeal_id"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_lod_sp_appealPostProcessingId].</remarks>
    public async virtual Task<List<core_lod_sp_appealPostProcessingIdResult>> core_lod_sp_appealPostProcessingIdAsync(int? appeal_id, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "appeal_id",
                    Value = appeal_id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lod_sp_appealPostProcessingIdResult>("EXEC @returnValue = [dbo].[core_lod_sp_appealPostProcessingId] @appeal_id = @appeal_id", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Gets the appeal count for a specified initial LOD ID.
    /// </summary>
    /// <param name="initialLODId">The ID of the initial LOD to get appeal count for.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of core_lod_sp_GetAppealCountResult objects containing the appeal count data.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="initialLODId"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetAppealCount].</remarks>
    public async virtual Task<List<core_lod_sp_GetAppealCountResult>> core_lod_sp_GetAppealCountAsync(int? initialLODId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "initialLODId",
                    Value = initialLODId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lod_sp_GetAppealCountResult>("EXEC @returnValue = [dbo].[core_lod_sp_GetAppealCount] @initialLODId = @initialLODId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Gets the appeal ID for a specified LOD and ID type.
    /// </summary>
    /// <param name="lodId">The ID of the LOD to get appeal ID for.</param>
    /// <param name="idType">The type of ID to retrieve.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of core_lod_sp_GetAppealIdResult objects containing the appeal ID data.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="lodId"/> or <paramref name="idType"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetAppealId].</remarks>
    public async virtual Task<List<core_lod_sp_GetAppealIdResult>> core_lod_sp_GetAppealIdAsync(int? lodId, int? idType, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "lodId",
                    Value = lodId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "idType",
                    Value = idType ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lod_sp_GetAppealIdResult>("EXEC @returnValue = [dbo].[core_lod_sp_GetAppealId] @lodId = @lodId, @idType = @idType", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Gets appeal requests for a specified user and SARC status.
    /// </summary>
    /// <param name="userId">The ID of the user to get appeal requests for.</param>
    /// <param name="sarc">Whether to filter for SARC appeals.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of core_lod_sp_GetAppealRequestsResult objects containing the appeal requests.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="userId"/> or <paramref name="sarc"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetAppealRequests].</remarks>
    public async virtual Task<List<core_lod_sp_GetAppealRequestsResult>> core_lod_sp_GetAppealRequestsAsync(int? userId, bool? sarc, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sarc",
                    Value = sarc ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lod_sp_GetAppealRequestsResult>("EXEC @returnValue = [dbo].[core_lod_sp_GetAppealRequests] @userId = @userId, @sarc = @sarc", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Gets case comments for a specified case, module, and comment type.
    /// </summary>
    /// <param name="caseID">The ID of the case to get comments for.</param>
    /// <param name="moduleID">The ID of the module.</param>
    /// <param name="commentType">The type of comments to retrieve.</param>
    /// <param name="sortOrder">Whether to sort the comments in ascending order.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of core_lod_sp_GetCaseCommentsResult objects containing the case comments.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="caseID"/>, <paramref name="moduleID"/>, <paramref name="commentType"/>, or <paramref name="sortOrder"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetCaseComments].</remarks>
    public async virtual Task<List<core_lod_sp_GetCaseCommentsResult>> core_lod_sp_GetCaseCommentsAsync(int? caseID, int? moduleID, int? commentType, bool? sortOrder, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "caseID",
                    Value = caseID ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ModuleID",
                    Value = moduleID ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "commentType",
                    Value = commentType ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SortOrder",
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lod_sp_GetCaseCommentsResult>("EXEC @returnValue = [dbo].[core_lod_sp_GetCaseComments] @caseID = @caseID, @ModuleID = @ModuleID, @commentType = @commentType, @SortOrder = @SortOrder", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Gets completed APs (Action Plans) for a specified user and SARC status.
    /// </summary>
    /// <param name="userId">The ID of the user to get completed APs for.</param>
    /// <param name="sarc">Whether to filter for SARC APs.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of core_lod_sp_GetCompletedAPsResult objects containing the completed APs.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="userId"/> or <paramref name="sarc"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetCompletedAPs].</remarks>
    public async virtual Task<List<core_lod_sp_GetCompletedAPsResult>> core_lod_sp_GetCompletedAPsAsync(int? userId, bool? sarc, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sarc",
                    Value = sarc ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lod_sp_GetCompletedAPsResult>("EXEC @returnValue = [dbo].[core_lod_sp_GetCompletedAPs] @userId = @userId, @sarc = @sarc", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Gets completed RRs (Review Requests) for a specified user and SARC status.
    /// </summary>
    /// <param name="userId">The ID of the user to get completed RRs for.</param>
    /// <param name="sarc">Whether to filter for SARC RRs.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of core_lod_sp_GetCompletedRRsResult objects containing the completed RRs.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="userId"/> or <paramref name="sarc"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetCompletedRRs].</remarks>
    public async virtual Task<List<core_lod_sp_GetCompletedRRsResult>> core_lod_sp_GetCompletedRRsAsync(int? userId, bool? sarc, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sarc",
                    Value = sarc ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lod_sp_GetCompletedRRsResult>("EXEC @returnValue = [dbo].[core_lod_sp_GetCompletedRRs] @userId = @userId, @sarc = @sarc", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Gets completed special cases by member SSN for a specified user.
    /// </summary>
    /// <param name="member_ssn">The SSN of the member to get special cases for.</param>
    /// <param name="userId">The ID of the user making the request.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of core_lod_sp_GetCompletedSpecialCasesByMemberSSNResult objects containing the special cases.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="member_ssn"/> or <paramref name="userId"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetCompletedSpecialCasesByMemberSSN].</remarks>
    public async virtual Task<List<core_lod_sp_GetCompletedSpecialCasesByMemberSSNResult>> core_lod_sp_GetCompletedSpecialCasesByMemberSSNAsync(string? member_ssn, int? userId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "member_ssn",
                    Size = 12,
                    Value = member_ssn ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lod_sp_GetCompletedSpecialCasesByMemberSSNResult>("EXEC @returnValue = [dbo].[core_lod_sp_GetCompletedSpecialCasesByMemberSSN] @member_ssn = @member_ssn, @userId = @userId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Gets the from and direction information for a specified reference ID.
    /// </summary>
    /// <param name="refId">The reference ID to get from and direction information for.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of core_lod_sp_GetFromAndDirectionResult objects containing the from and direction data.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="refId"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetFromAndDirection].</remarks>
    public async virtual Task<List<core_lod_sp_GetFromAndDirectionResult>> core_lod_sp_GetFromAndDirectionAsync(int? refId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lod_sp_GetFromAndDirectionResult>("EXEC @returnValue = [dbo].[core_lod_sp_GetFromAndDirection] @refId = @refId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Checks if a specified LOD has an active reinvestigation.
    /// </summary>
    /// <param name="lodId">The ID of the LOD to check for active reinvestigation.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of core_lod_sp_GetHasActiveReinvestigationResult objects containing the reinvestigation status.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="lodId"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetHasActiveReinvestigation].</remarks>
    public async virtual Task<List<core_lod_sp_GetHasActiveReinvestigationResult>> core_lod_sp_GetHasActiveReinvestigationAsync(int? lodId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "lodId",
                    Value = lodId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lod_sp_GetHasActiveReinvestigationResult>("EXEC @returnValue = [dbo].[core_lod_sp_GetHasActiveReinvestigation] @lodId = @lodId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Checks if a specified LOD has an appeal.
    /// </summary>
    /// <param name="lodId">The ID of the LOD to check for appeal.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of core_lod_sp_GetHasAppealResult objects containing the appeal status.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="lodId"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetHasAppeal].</remarks>
    public async virtual Task<List<core_lod_sp_GetHasAppealResult>> core_lod_sp_GetHasAppealAsync(int? lodId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "lodId",
                    Value = lodId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lod_sp_GetHasAppealResult>("EXEC @returnValue = [dbo].[core_lod_sp_GetHasAppeal] @lodId = @lodId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Checks if a specified appeal has an appeal post-process.
    /// </summary>
    /// <param name="appealId">The ID of the appeal to check for post-process.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of core_lod_sp_GetHasAppeal_PostProcessResult objects containing the post-process status.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="appealId"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetHasAppeal_PostProcess].</remarks>
    public async virtual Task<List<core_lod_sp_GetHasAppeal_PostProcessResult>> core_lod_sp_GetHasAppeal_PostProcessAsync(int? appealId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "appealId",
                    Value = appealId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lod_sp_GetHasAppeal_PostProcessResult>("EXEC @returnValue = [dbo].[core_lod_sp_GetHasAppeal_PostProcess] @appealId = @appealId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Checks if a specified LOD has a reinvestigation LOD.
    /// </summary>
    /// <param name="lodId">The ID of the LOD to check for reinvestigation LOD.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of core_lod_sp_GetHasReinvestigationLodResult objects containing the reinvestigation LOD status.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="lodId"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetHasReinvestigationLod].</remarks>
    public async virtual Task<List<core_lod_sp_GetHasReinvestigationLodResult>> core_lod_sp_GetHasReinvestigationLodAsync(int? lodId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "lodId",
                    Value = lodId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lod_sp_GetHasReinvestigationLodResult>("EXEC @returnValue = [dbo].[core_lod_sp_GetHasReinvestigationLod] @lodId = @lodId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Checks if a specified LOD is a reinvestigation LOD.
    /// </summary>
    /// <param name="lodId">The ID of the LOD to check if it's a reinvestigation LOD.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of core_lod_sp_GetIsReinvestigationLodResult objects containing the reinvestigation status.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="lodId"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetIsReinvestigationLod].</remarks>
    public async virtual Task<List<core_lod_sp_GetIsReinvestigationLodResult>> core_lod_sp_GetIsReinvestigationLodAsync(int? lodId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "lodId",
                    Value = lodId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lod_sp_GetIsReinvestigationLodResult>("EXEC @returnValue = [dbo].[core_lod_sp_GetIsReinvestigationLod] @lodId = @lodId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Gets LOD list by member SSN with specified search type and user.
    /// </summary>
    /// <param name="memberSSN">The SSN of the member to get LOD list for.</param>
    /// <param name="searchType">The type of search to perform.</param>
    /// <param name="userId">The ID of the user making the request.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of core_lod_sp_GetLODListByMemberSSNResult objects containing the LOD list.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="memberSSN"/>, <paramref name="searchType"/>, or <paramref name="userId"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetLODListByMemberSSN].</remarks>
    public async virtual Task<List<core_lod_sp_GetLODListByMemberSSNResult>> core_lod_sp_GetLODListByMemberSSNAsync(string? memberSSN, int? searchType, int? userId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "memberSSN",
                    Size = 9,
                    Value = memberSSN ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "searchType",
                    Value = searchType ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lod_sp_GetLODListByMemberSSNResult>("EXEC @returnValue = [dbo].[core_lod_sp_GetLODListByMemberSSN] @memberSSN = @memberSSN, @searchType = @searchType, @userId = @userId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Gets LOD post-completion information for a specified LOD ID.
    /// </summary>
    /// <param name="lodId">The ID of the LOD to get post-completion information for.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of core_lod_sp_GetLODPostCompletionResult objects containing the post-completion data.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="lodId"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetLODPostCompletion].</remarks>
    public async virtual Task<List<core_lod_sp_GetLODPostCompletionResult>> core_lod_sp_GetLODPostCompletionAsync(int? lodId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "lodId",
                    Value = lodId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lod_sp_GetLODPostCompletionResult>("EXEC @returnValue = [dbo].[core_lod_sp_GetLODPostCompletion] @lodId = @lodId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Gets PAL (Personnel Action Letter) data by member SSN and last name.
    /// </summary>
    /// <param name="member_ssn">The SSN of the member to get PAL data for.</param>
    /// <param name="member_lastname">The last name of the member.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of core_lod_sp_GetPALDataByMemberSSNResult objects containing the PAL data.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="member_ssn"/> or <paramref name="member_lastname"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetPALDataByMemberSSN].</remarks>
    public async virtual Task<List<core_lod_sp_GetPALDataByMemberSSNResult>> core_lod_sp_GetPALDataByMemberSSNAsync(string? member_ssn, string? member_lastname, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "member_ssn",
                    Size = 12,
                    Value = member_ssn ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "member_lastname",
                    Size = 50,
                    Value = member_lastname ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lod_sp_GetPALDataByMemberSSNResult>("EXEC @returnValue = [dbo].[core_lod_sp_GetPALDataByMemberSSN] @member_ssn = @member_ssn, @member_lastname = @member_lastname", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Gets the pending count for a specified user and SARC status.
    /// </summary>
    /// <param name="userId">The ID of the user to get pending count for.</param>
    /// <param name="sarc">Whether to filter for SARC items.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of core_lod_sp_GetPendingCountResult objects containing the pending count.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="userId"/> or <paramref name="sarc"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetPendingCount].</remarks>
    public async virtual Task<List<core_lod_sp_GetPendingCountResult>> core_lod_sp_GetPendingCountAsync(int? userId, bool? sarc, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sarc",
                    Value = sarc ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lod_sp_GetPendingCountResult>("EXEC @returnValue = [dbo].[core_lod_sp_GetPendingCount] @userId = @userId, @sarc = @sarc", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Gets the pending count for LOD V3 for a specified user and SARC status.
    /// </summary>
    /// <param name="userId">The ID of the user to get pending count for.</param>
    /// <param name="sarc">Whether to filter for SARC items.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of core_lod_sp_GetPendingCount_LODV3Result objects containing the pending count for LOD V3.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="userId"/> or <paramref name="sarc"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetPendingCount_LODV3].</remarks>
    public async virtual Task<List<core_lod_sp_GetPendingCount_LODV3Result>> core_lod_sp_GetPendingCount_LODV3Async(int? userId, bool? sarc, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sarc",
                    Value = sarc ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lod_sp_GetPendingCount_LODV3Result>("EXEC @returnValue = [dbo].[core_lod_sp_GetPendingCount_LODV3] @userId = @userId, @sarc = @sarc", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Gets the pending IO count for a specified user and SARC status.
    /// </summary>
    /// <param name="userId">The ID of the user to get pending IO count for.</param>
    /// <param name="sarc">Whether to filter for SARC items.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of core_lod_sp_GetPendingIOCountResult objects containing the pending IO count.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="userId"/> or <paramref name="sarc"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetPendingIOCount].</remarks>
    public async virtual Task<List<core_lod_sp_GetPendingIOCountResult>> core_lod_sp_GetPendingIOCountAsync(int? userId, bool? sarc, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sarc",
                    Value = sarc ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lod_sp_GetPendingIOCountResult>("EXEC @returnValue = [dbo].[core_lod_sp_GetPendingIOCount] @userId = @userId, @sarc = @sarc", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Gets PSCD special case not holding for a specified module and user.
    /// </summary>
    /// <param name="moduleId">The ID of the module to get special cases for.</param>
    /// <param name="userId">The ID of the user making the request.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of core_lod_sp_GetPSCDSpecialCaseNotHoldingResult objects containing the special cases.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="moduleId"/> or <paramref name="userId"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetPSCDSpecialCaseNotHolding].</remarks>
    public async virtual Task<List<core_lod_sp_GetPSCDSpecialCaseNotHoldingResult>> core_lod_sp_GetPSCDSpecialCaseNotHoldingAsync(int? moduleId, int? userId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "moduleId",
                    Value = moduleId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lod_sp_GetPSCDSpecialCaseNotHoldingResult>("EXEC @returnValue = [dbo].[core_lod_sp_GetPSCDSpecialCaseNotHolding] @moduleId = @moduleId, @userId = @userId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Gets reinvestigation LOD findings for a specified initial LOD ID.
    /// </summary>
    /// <param name="initialLodId">The ID of the initial LOD to get reinvestigation findings for.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of core_lod_sp_GetReinvestigationLodFindingsResult objects containing the reinvestigation findings.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="initialLodId"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetReinvestigationLodFindings].</remarks>
    public async virtual Task<List<core_lod_sp_GetReinvestigationLodFindingsResult>> core_lod_sp_GetReinvestigationLodFindingsAsync(int? initialLodId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "initialLodId",
                    Value = initialLodId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lod_sp_GetReinvestigationLodFindingsResult>("EXEC @returnValue = [dbo].[core_lod_sp_GetReinvestigationLodFindings] @initialLodId = @initialLodId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Gets the reinvestigation request ID for a specified LOD and ID type.
    /// </summary>
    /// <param name="lodId">The ID of the LOD to get reinvestigation request ID for.</param>
    /// <param name="idType">The type of ID to retrieve.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of core_lod_sp_GetReinvestigationRequestIdResult objects containing the reinvestigation request ID.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="lodId"/> or <paramref name="idType"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetReinvestigationRequestId].</remarks>
    public async virtual Task<List<core_lod_sp_GetReinvestigationRequestIdResult>> core_lod_sp_GetReinvestigationRequestIdAsync(int? lodId, int? idType, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "lodId",
                    Value = lodId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "idType",
                    Value = idType ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lod_sp_GetReinvestigationRequestIdResult>("EXEC @returnValue = [dbo].[core_lod_sp_GetReinvestigationRequestId] @lodId = @lodId, @idType = @idType", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Gets reinvestigation requests for a specified user and SARC status.
    /// </summary>
    /// <param name="userId">The ID of the user to get reinvestigation requests for.</param>
    /// <param name="sarc">Whether to filter for SARC reinvestigations.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of core_lod_sp_GetReinvestigationRequestsResult objects containing the reinvestigation requests.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="userId"/> or <paramref name="sarc"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetReinvestigationRequests].</remarks>
    public async virtual Task<List<core_lod_sp_GetReinvestigationRequestsResult>> core_lod_sp_GetReinvestigationRequestsAsync(int? userId, bool? sarc, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sarc",
                    Value = sarc ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lod_sp_GetReinvestigationRequestsResult>("EXEC @returnValue = [dbo].[core_lod_sp_GetReinvestigationRequests] @userId = @userId, @sarc = @sarc", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Gets the count of reinvestigation requests for a specified initial LOD ID.
    /// </summary>
    /// <param name="initialLODId">The ID of the initial LOD to get reinvestigation request count for.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of core_lod_sp_GetReinvestigationRequestsCountResult objects containing the reinvestigation request count.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="initialLODId"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetReinvestigationRequestsCount].</remarks>
    public async virtual Task<List<core_lod_sp_GetReinvestigationRequestsCountResult>> core_lod_sp_GetReinvestigationRequestsCountAsync(int? initialLODId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "initialLODId",
                    Value = initialLODId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lod_sp_GetReinvestigationRequestsCountResult>("EXEC @returnValue = [dbo].[core_lod_sp_GetReinvestigationRequestsCount] @initialLODId = @initialLODId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_lod_sp_GetReinvestigationRequestsResult>> GetReinvestigationRequestsAsync(int? userId, bool? sarc, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        return await core_lod_sp_GetReinvestigationRequestsAsync(userId, sarc, returnValue, cancellationToken);
    }

    /// <summary>
    /// Gets the count of reinvestigations for a specified user and SARC status.
    /// </summary>
    /// <param name="userId">The ID of the user to get reinvestigations count for.</param>
    /// <param name="sarc">Whether to filter for SARC reinvestigations.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of core_lod_sp_GetReinvestigationsCountResult objects containing the reinvestigations count.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="userId"/> or <paramref name="sarc"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetReinvestigationsCount].</remarks>
    public async virtual Task<List<core_lod_sp_GetReinvestigationsCountResult>> core_lod_sp_GetReinvestigationsCountAsync(int? userId, bool? sarc, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sarc",
                    Value = sarc ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lod_sp_GetReinvestigationsCountResult>("EXEC @returnValue = [dbo].[core_lod_sp_GetReinvestigationsCount] @userId = @userId, @sarc = @sarc", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Gets special case disposition for a specified module and user.
    /// </summary>
    /// <param name="moduleId">The ID of the module to get special case disposition for.</param>
    /// <param name="userId">The ID of the user making the request.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of core_lod_sp_GetSpecialCaseDispositionResult objects containing the special case disposition.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="moduleId"/> or <paramref name="userId"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetSpecialCaseDisposition].</remarks>
    public async virtual Task<List<core_lod_sp_GetSpecialCaseDispositionResult>> core_lod_sp_GetSpecialCaseDispositionAsync(int? moduleId, int? userId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "moduleId",
                    Value = moduleId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lod_sp_GetSpecialCaseDispositionResult>("EXEC @returnValue = [dbo].[core_lod_sp_GetSpecialCaseDisposition] @moduleId = @moduleId, @userId = @userId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Gets special case holding for a specified module and user.
    /// </summary>
    /// <param name="moduleId">The ID of the module to get special case holding for.</param>
    /// <param name="userId">The ID of the user making the request.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of core_lod_sp_GetSpecialCaseHoldingResult objects containing the special case holding.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="moduleId"/> or <paramref name="userId"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetSpecialCaseHolding].</remarks>
    public async virtual Task<List<core_lod_sp_GetSpecialCaseHoldingResult>> core_lod_sp_GetSpecialCaseHoldingAsync(int? moduleId, int? userId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "moduleId",
                    Value = moduleId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lod_sp_GetSpecialCaseHoldingResult>("EXEC @returnValue = [dbo].[core_lod_sp_GetSpecialCaseHolding] @moduleId = @moduleId, @userId = @userId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Gets special case no disposition for a specified module and user.
    /// </summary>
    /// <param name="moduleId">The ID of the module to get special case no disposition for.</param>
    /// <param name="userId">The ID of the user making the request.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of core_lod_sp_GetSpecialCaseNoDispositionResult objects containing the special case no disposition.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="moduleId"/> or <paramref name="userId"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetSpecialCaseNoDisposition].</remarks>
    public async virtual Task<List<core_lod_sp_GetSpecialCaseNoDispositionResult>> core_lod_sp_GetSpecialCaseNoDispositionAsync(int? moduleId, int? userId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "moduleId",
                    Value = moduleId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lod_sp_GetSpecialCaseNoDispositionResult>("EXEC @returnValue = [dbo].[core_lod_sp_GetSpecialCaseNoDisposition] @moduleId = @moduleId, @userId = @userId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Gets special case not holding for a specified module and user.
    /// </summary>
    /// <param name="moduleId">The ID of the module to get special case not holding for.</param>
    /// <param name="userId">The ID of the user making the request.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of core_lod_sp_GetSpecialCaseNotHoldingResult objects containing the special case not holding.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="moduleId"/> or <paramref name="userId"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetSpecialCaseNotHolding].</remarks>
    public async virtual Task<List<core_lod_sp_GetSpecialCaseNotHoldingResult>> core_lod_sp_GetSpecialCaseNotHoldingAsync(int? moduleId, int? userId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "moduleId",
                    Value = moduleId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lod_sp_GetSpecialCaseNotHoldingResult>("EXEC @returnValue = [dbo].[core_lod_sp_GetSpecialCaseNotHolding] @moduleId = @moduleId, @userId = @userId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Gets the count of special case not holding for a specified module and user.
    /// </summary>
    /// <param name="moduleId">The ID of the module to get special case not holding count for.</param>
    /// <param name="userId">The ID of the user making the request.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of core_lod_sp_GetSpecialCaseNotHoldingCountResult objects containing the special case not holding count.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="moduleId"/> or <paramref name="userId"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetSpecialCaseNotHoldingCount].</remarks>
    public async virtual Task<List<core_lod_sp_GetSpecialCaseNotHoldingCountResult>> core_lod_sp_GetSpecialCaseNotHoldingCountAsync(int? moduleId, int? userId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "moduleId",
                    Value = moduleId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lod_sp_GetSpecialCaseNotHoldingCountResult>("EXEC @returnValue = [dbo].[core_lod_sp_GetSpecialCaseNotHoldingCount] @moduleId = @moduleId, @userId = @userId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Gets special cases for a specified user.
    /// </summary>
    /// <param name="userId">The ID of the user to get special cases for.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of core_lod_sp_GetSpecialCasesResult objects containing the special cases.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="userId"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetSpecialCases].</remarks>
    public async virtual Task<List<core_lod_sp_GetSpecialCasesResult>> core_lod_sp_GetSpecialCasesAsync(int? userId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lod_sp_GetSpecialCasesResult>("EXEC @returnValue = [dbo].[core_lod_sp_GetSpecialCases] @userId = @userId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Gets special cases with paging, sorting, and filtering capabilities.
    /// </summary>
    /// <param name="userId">The ID of the user making the request.</param>
    /// <param name="pageNumber">The page number to retrieve (1-based).</param>
    /// <param name="pageSize">The number of rows per page.</param>
    /// <param name="totalCount">Output parameter containing the total number of rows matching the filters.</param>
    /// <param name="sortColumn">The column to sort by (e.g., 'sc_id', 'Receive_Date', 'Member_Name').</param>
    /// <param name="sortDirection">The sort direction ('ASC' or 'DESC').</param>
    /// <param name="statusFilter">Filter by status description (partial match).</param>
    /// <param name="moduleFilter">Filter by module name (partial match).</param>
    /// <param name="daysFilter">Filter by days (e.g., '&lt;30', '&gt;10', '=5').</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of core_lod_sp_GetSpecialCasesResult objects containing the special cases.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="userId"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetSpecialCases_Paging_Full].</remarks>
    public async virtual Task<List<core_lod_sp_GetSpecialCasesResult>> core_lod_sp_GetSpecialCasesAsync(int? userId, int? pageNumber = 1, int? pageSize = 10, OutputParameter<int>? totalCount = null, string? sortColumn = "sc_id", string? sortDirection = "ASC", string? statusFilter = null, string? moduleFilter = null, string? daysFilter = null, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterTotalCount = new SqlParameter
        {
            ParameterName = "TotalCount",
            Direction = ParameterDirection.InputOutput,
            Value = totalCount?.Value ?? Convert.DBNull,
            SqlDbType = SqlDbType.Int,
        };
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = pageNumber ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterTotalCount,
                new SqlParameter
                {
                    ParameterName = "SortColumn",
                    Size = 50,
                    Value = sortColumn ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SortDirection",
                    Size = 4,
                    Value = sortDirection ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StatusFilter",
                    Size = 100,
                    Value = statusFilter ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ModuleFilter",
                    Size = 100,
                    Value = moduleFilter ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DaysFilter",
                    Size = 20,
                    Value = daysFilter ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lod_sp_GetSpecialCasesResult>("EXEC @returnValue = [dbo].[core_lod_sp_GetSpecialCases_Paging_Full] @userId = @userId, @PageNumber = @PageNumber, @PageSize = @PageSize, @TotalCount = @TotalCount OUTPUT, @SortColumn = @SortColumn, @SortDirection = @SortDirection, @StatusFilter = @StatusFilter, @ModuleFilter = @ModuleFilter, @DaysFilter = @DaysFilter", sqlParameters, cancellationToken);

        totalCount?.SetValue(parameterTotalCount.Value);
        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Gets special cases by member SSN for a specified user.
    /// </summary>
    /// <param name="member_ssn">The SSN of the member to get special cases for.</param>
    /// <param name="userId">The ID of the user making the request.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of core_lod_sp_GetSpecialCasesByMemberSSNResult objects containing the special cases.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="member_ssn"/> or <paramref name="userId"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetSpecialCasesByMemberSSN].</remarks>
    public async virtual Task<List<core_lod_sp_GetSpecialCasesByMemberSSNResult>> core_lod_sp_GetSpecialCasesByMemberSSNAsync(string? member_ssn, int? userId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "member_ssn",
                    Size = 12,
                    Value = member_ssn ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lod_sp_GetSpecialCasesByMemberSSNResult>("EXEC @returnValue = [dbo].[core_lod_sp_GetSpecialCasesByMemberSSN] @member_ssn = @member_ssn, @userId = @userId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Gets the count of special cases by module for a specified user and module.
    /// </summary>
    /// <param name="userId">The ID of the user to get special cases count for.</param>
    /// <param name="moduleId">The ID of the module to get special cases count for.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of core_lod_sp_GetSpecialCasesByModuleCountResult objects containing the special cases count by module.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="userId"/> or <paramref name="moduleId"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetSpecialCasesByModuleCount].</remarks>
    public async virtual Task<List<core_lod_sp_GetSpecialCasesByModuleCountResult>> core_lod_sp_GetSpecialCasesByModuleCountAsync(int? userId, int? moduleId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "moduleId",
                    Value = moduleId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lod_sp_GetSpecialCasesByModuleCountResult>("EXEC @returnValue = [dbo].[core_lod_sp_GetSpecialCasesByModuleCount] @userId = @userId, @moduleId = @moduleId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Gets special cases by module ID for a specified user and module.
    /// </summary>
    /// <param name="userId">The ID of the user to get special cases for.</param>
    /// <param name="moduleId">The ID of the module to get special cases for.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of core_lod_sp_GetSpecialCasesByModuleIdResult objects containing the special cases by module ID.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="userId"/> or <paramref name="moduleId"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetSpecialCasesByModuleId].</remarks>
    public async virtual Task<List<core_lod_sp_GetSpecialCasesByModuleIdResult>> core_lod_sp_GetSpecialCasesByModuleIdAsync(int? userId, int? moduleId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "moduleId",
                    Value = moduleId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lod_sp_GetSpecialCasesByModuleIdResult>("EXEC @returnValue = [dbo].[core_lod_sp_GetSpecialCasesByModuleId] @userId = @userId, @moduleId = @moduleId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Gets the count of special cases for a specified user.
    /// </summary>
    /// <param name="userId">The ID of the user to get special cases count for.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of core_lod_sp_GetSpecialCasesCountResult objects containing the special cases count.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="userId"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetSpecialCasesCount].</remarks>
    public async virtual Task<List<core_lod_sp_GetSpecialCasesCountResult>> core_lod_sp_GetSpecialCasesCountAsync(int? userId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lod_sp_GetSpecialCasesCountResult>("EXEC @returnValue = [dbo].[core_lod_sp_GetSpecialCasesCount] @userId = @userId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Gets special cases with paging support.
    /// </summary>
    /// <param name="userId">The user ID for role resolution and access control.</param>
    /// <param name="pageNumber">Page number (1-based).</param>
    /// <param name="pageSize">Rows per page.</param>
    /// <param name="totalCount">Output parameter containing total count of rows.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of core_lod_sp_GetSpecialCases_PagingResult objects.</returns>
    /// <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetSpecialCases_Paging].</remarks>
    public async virtual Task<List<core_lod_sp_GetSpecialCases_PagingResult>> core_lod_sp_GetSpecialCases_PagingAsync(int? userId, int? pageNumber, int? pageSize, OutputParameter<int>? totalCount, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var parametertotalCount = new SqlParameter
        {
            ParameterName = "TotalCount",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = pageNumber ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parametertotalCount,
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lod_sp_GetSpecialCases_PagingResult>("EXEC @returnValue = [dbo].[core_lod_sp_GetSpecialCases_Paging] @userId = @userId, @PageNumber = @PageNumber, @PageSize = @PageSize, @TotalCount = @TotalCount OUTPUT", sqlParameters, cancellationToken);

        totalCount?.SetValue(parametertotalCount.Value);
        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Gets special cases with full paging, sorting, and filtering support.
    /// </summary>
    /// <param name="userId">The user ID for role resolution and access control.</param>
    /// <param name="pageNumber">Page number (1-based).</param>
    /// <param name="pageSize">Rows per page.</param>
    /// <param name="totalCount">Output parameter containing total count of rows.</param>
    /// <param name="sortColumn">Column to sort by.</param>
    /// <param name="sortDirection">Sort direction (ASC or DESC).</param>
    /// <param name="statusFilter">Filter by status description.</param>
    /// <param name="moduleFilter">Filter by module name.</param>
    /// <param name="daysFilter">Filter by days (e.g., '&lt;30', '&gt;10').</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of core_lod_sp_GetSpecialCases_Paging_FullResult objects.</returns>
    /// <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetSpecialCases_Paging_Full].</remarks>
    public async virtual Task<List<core_lod_sp_GetSpecialCases_Paging_FullResult>> core_lod_sp_GetSpecialCases_Paging_FullAsync(int? userId, int? pageNumber, int? pageSize, OutputParameter<int>? totalCount, string? sortColumn, string? sortDirection, string? statusFilter, string? moduleFilter, string? daysFilter, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var parametertotalCount = new SqlParameter
        {
            ParameterName = "TotalCount",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = pageNumber ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parametertotalCount,
                new SqlParameter
                {
                    ParameterName = "SortColumn",
                    Value = sortColumn ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                    Size = 50,
                },
                new SqlParameter
                {
                    ParameterName = "SortDirection",
                    Value = sortDirection ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                    Size = 4,
                },
                new SqlParameter
                {
                    ParameterName = "StatusFilter",
                    Value = statusFilter ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                    Size = 100,
                },
                new SqlParameter
                {
                    ParameterName = "ModuleFilter",
                    Value = moduleFilter ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                    Size = 100,
                },
                new SqlParameter
                {
                    ParameterName = "DaysFilter",
                    Value = daysFilter ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                    Size = 20,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lod_sp_GetSpecialCases_Paging_FullResult>("EXEC @returnValue = [dbo].[core_lod_sp_GetSpecialCases_Paging_Full] @userId = @userId, @PageNumber = @PageNumber, @PageSize = @PageSize, @TotalCount = @TotalCount OUTPUT, @SortColumn = @SortColumn, @SortDirection = @SortDirection, @StatusFilter = @StatusFilter, @ModuleFilter = @ModuleFilter, @DaysFilter = @DaysFilter", sqlParameters, cancellationToken);

        totalCount?.SetValue(parametertotalCount.Value);
        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Gets the workflow for a specified LOD ID.
    /// </summary>
    /// <param name="lODid">The ID of the LOD to get workflow for.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of core_lod_sp_GetWorkflowResult objects containing the workflow data.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="lODid"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetWorkflow].</remarks>
    public async virtual Task<List<core_lod_sp_GetWorkflowResult>> core_lod_sp_GetWorkflowAsync(int? lODid, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "LODid",
                    Value = lODid ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lod_sp_GetWorkflowResult>("EXEC @returnValue = [dbo].[core_lod_sp_GetWorkflow] @LODid = @LODid", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Gets the WSID for a specified ID.
    /// </summary>
    /// <param name="iD">The ID to get WSID for.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of core_lod_sp_GetWSIDResult objects containing the WSID data.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="iD"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetWSID].</remarks>
    public async virtual Task<List<core_lod_sp_GetWSIDResult>> core_lod_sp_GetWSIDAsync(int? iD, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "iD",
                    Value = iD ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lod_sp_GetWSIDResult>("EXEC @returnValue = [dbo].[core_lod_sp_GetWSID] @iD = @iD", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Gets WWD list by member SSN with specified search type and user.
    /// </summary>
    /// <param name="memberSSN">The SSN of the member to get WWD list for.</param>
    /// <param name="searchType">The type of search to perform.</param>
    /// <param name="userId">The ID of the user making the request.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of core_lod_sp_GetWWDListByMemberSSNResult objects containing the WWD list.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="memberSSN"/>, <paramref name="searchType"/>, or <paramref name="userId"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_lod_sp_GetWWDListByMemberSSN].</remarks>
    public async virtual Task<List<core_lod_sp_GetWWDListByMemberSSNResult>> core_lod_sp_GetWWDListByMemberSSNAsync(string? memberSSN, int? searchType, int? userId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "memberSSN",
                    Size = 9,
                    Value = memberSSN ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "searchType",
                    Value = searchType ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lod_sp_GetWWDListByMemberSSNResult>("EXEC @returnValue = [dbo].[core_lod_sp_GetWWDListByMemberSSN] @memberSSN = @memberSSN, @searchType = @searchType, @userId = @userId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Sets LOD post-completion for a specified LOD ID.
    /// </summary>
    /// <param name="lodId">The ID of the LOD to set post-completion for.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>The number of affected rows.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="lodId"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_lod_sp_SetLODPostCompletion].</remarks>
    public async virtual Task<int> core_lod_sp_SetLODPostCompletionAsync(int? lodId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "lodId",
                    Value = lodId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_lod_sp_SetLODPostCompletion] @lodId = @lodId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Updates appeal post-completion with detailed information.
    /// </summary>
    /// <param name="appealId">The ID of the appeal to update.</param>
    /// <param name="lodId">The ID of the LOD associated with the appeal.</param>
    /// <param name="appealStreet">The street address for the appeal.</param>
    /// <param name="appealCity">The city for the appeal.</param>
    /// <param name="appealState">The state for the appeal.</param>
    /// <param name="appealZip">The ZIP code for the appeal.</param>
    /// <param name="appealCountry">The country for the appeal.</param>
    /// <param name="memberNotificationDate">The date when the member was notified.</param>
    /// <param name="helpExtensionNumber">The help extension number.</param>
    /// <param name="email">The email address.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>The number of affected rows.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="appealId"/> or <paramref name="lodId"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_lod_sp_UpdateAppealPostCompletion].</remarks>
    public async virtual Task<int> core_lod_sp_UpdateAppealPostCompletionAsync(int? appealId, int? lodId, string? appealStreet, string? appealCity, string? appealState, string? appealZip, string? appealCountry, DateOnly? memberNotificationDate, string? helpExtensionNumber, string? email, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "appealId",
                    Value = appealId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "lodId",
                    Value = lodId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "appealStreet",
                    Size = 400,
                    Value = appealStreet ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "appealCity",
                    Size = 200,
                    Value = appealCity ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "appealState",
                    Size = 100,
                    Value = appealState ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "appealZip",
                    Size = 200,
                    Value = appealZip ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "appealCountry",
                    Size = 100,
                    Value = appealCountry ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "memberNotificationDate",
                    Value = memberNotificationDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "helpExtensionNumber",
                    Size = 100,
                    Value = helpExtensionNumber ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "email",
                    Size = 400,
                    Value = email ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_lod_sp_UpdateAppealPostCompletion] @appealId = @appealId, @lodId = @lodId, @appealStreet = @appealStreet, @appealCity = @appealCity, @appealState = @appealState, @appealZip = @appealZip, @appealCountry = @appealCountry, @memberNotificationDate = @memberNotificationDate, @helpExtensionNumber = @helpExtensionNumber, @email = @email", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Updates LOD post-completion with detailed information.
    /// </summary>
    /// <param name="lodId">The ID of the LOD to update post-completion for.</param>
    /// <param name="helpExtensionNumber">The help extension number.</param>
    /// <param name="appealStreet">The street address for the appeal.</param>
    /// <param name="appealCity">The city for the appeal.</param>
    /// <param name="appealState">The state for the appeal.</param>
    /// <param name="appealZip">The ZIP code for the appeal.</param>
    /// <param name="appealCountry">The country for the appeal.</param>
    /// <param name="nokFirstName">The first name of the next of kin.</param>
    /// <param name="nokLastName">The last name of the next of kin.</param>
    /// <param name="nokMiddleName">The middle name of the next of kin.</param>
    /// <param name="notificationDate">The date when notification was sent.</param>
    /// <param name="email">The email address.</param>
    /// <param name="chkAddress">Whether to check the address.</param>
    /// <param name="chkEmail">Whether to check the email.</param>
    /// <param name="chkPhone">Whether to check the phone.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>The number of affected rows.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="lodId"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_lod_sp_UpdateLODPostCompletion].</remarks>
    public async virtual Task<int> core_lod_sp_UpdateLODPostCompletionAsync(int? lodId, string? helpExtensionNumber, string? appealStreet, string? appealCity, string? appealState, string? appealZip, string? appealCountry, string? nokFirstName, string? nokLastName, string? nokMiddleName, DateTime? notificationDate, string? email, bool? chkAddress, bool? chkEmail, bool? chkPhone, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "lodId",
                    Value = lodId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "helpExtensionNumber",
                    Size = 100,
                    Value = helpExtensionNumber ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "appealStreet",
                    Size = 400,
                    Value = appealStreet ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "appealCity",
                    Size = 200,
                    Value = appealCity ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "appealState",
                    Size = 100,
                    Value = appealState ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "appealZip",
                    Size = 200,
                    Value = appealZip ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "appealCountry",
                    Size = 100,
                    Value = appealCountry ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "nokFirstName",
                    Size = 100,
                    Value = nokFirstName ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "nokLastName",
                    Size = 100,
                    Value = nokLastName ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "nokMiddleName",
                    Size = 100,
                    Value = nokMiddleName ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "notificationDate",
                    Value = notificationDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "email",
                    Size = 400,
                    Value = email ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "chkAddress",
                    Value = chkAddress ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "chkEmail",
                    Value = chkEmail ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "chkPhone",
                    Value = chkPhone ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_lod_sp_UpdateLODPostCompletion] @lodId = @lodId, @helpExtensionNumber = @helpExtensionNumber, @appealStreet = @appealStreet, @appealCity = @appealCity, @appealState = @appealState, @appealZip = @appealZip, @appealCountry = @appealCountry, @nokFirstName = @nokFirstName, @nokLastName = @nokLastName, @nokMiddleName = @nokMiddleName, @notificationDate = @notificationDate, @email = @email, @chkAddress = @chkAddress, @chkEmail = @chkEmail, @chkPhone = @chkPhone", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves change set data for a specific log entry by log ID.
    /// </summary>
    /// <param name="logId">The unique identifier of the log entry to retrieve change set data for.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list of change set records associated with the specified log ID.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_log_sp_GetChangeSetByLogId] stored procedure to retrieve detailed change set information for auditing and tracking purposes.
    /// </remarks>
    public async virtual Task<List<core_log_sp_GetChangeSetByLogIdResult>> core_log_sp_GetChangeSetByLogIdAsync(int? logId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "logId",
                    Value = logId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_log_sp_GetChangeSetByLogIdResult>("EXEC @returnValue = [dbo].[core_log_sp_GetChangeSetByLogId] @logId = @logId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves change set data for a specific user by user ID.
    /// </summary>
    /// <param name="userId">The unique identifier of the user to retrieve change set data for.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list of change set records associated with the specified user.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_log_sp_GetChangeSetByUserId] stored procedure to retrieve user-specific change set information for auditing purposes.
    /// </remarks>
    public async virtual Task<List<core_log_sp_GetChangeSetByUserIdResult>> core_log_sp_GetChangeSetByUserIdAsync(int? userId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_log_sp_GetChangeSetByUserIdResult>("EXEC @returnValue = [dbo].[core_log_sp_GetChangeSetByUserId] @userId = @userId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves detailed change set information for multiple log entries by their IDs.
    /// </summary>
    /// <param name="logIds">A comma-separated string of log IDs to retrieve change set details for.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list of detailed change set records for the specified log IDs.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_log_sp_GetChangeSetDetails] stored procedure to retrieve comprehensive change set details for multiple log entries, useful for batch auditing operations.
    /// </remarks>
    public async virtual Task<List<core_log_sp_GetChangeSetDetailsResult>> core_log_sp_GetChangeSetDetailsAsync(string? logIds, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "logIds",
                    Size = 100,
                    Value = logIds ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_log_sp_GetChangeSetDetailsResult>("EXEC @returnValue = [dbo].[core_log_sp_GetChangeSetDetails] @logIds = @logIds", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves change sets for a specific reference ID and module.
    /// </summary>
    /// <param name="refId">The reference ID to retrieve change sets for.</param>
    /// <param name="module">The module identifier to filter change sets by.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list of change set records for the specified reference ID and module.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_log_sp_GetChangeSetsByRefId] stored procedure to retrieve change sets associated with a specific reference entity and module for targeted auditing.
    /// </remarks>
    public async virtual Task<List<core_log_sp_GetChangeSetsByRefIdResult>> core_log_sp_GetChangeSetsByRefIdAsync(int? refId, byte? module, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "module",
                    Value = module ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_log_sp_GetChangeSetsByRefIdResult>("EXEC @returnValue = [dbo].[core_log_sp_GetChangeSetsByRefId] @refId = @refId, @module = @module", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves error information by error ID.
    /// </summary>
    /// <param name="iD">The unique identifier of the error to retrieve.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list containing the error record for the specified ID.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_log_sp_GetErrorById] stored procedure to retrieve detailed error information for debugging and error tracking purposes.
    /// </remarks>
    public async virtual Task<List<core_log_sp_GetErrorByIdResult>> core_log_sp_GetErrorByIdAsync(int? iD, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "ID",
                    Value = iD ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_log_sp_GetErrorByIdResult>("EXEC @returnValue = [dbo].[core_log_sp_GetErrorById] @ID = @ID", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves all error records from the system.
    /// </summary>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list of all error records in the system.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_log_sp_GetErrors] stored procedure to retrieve all error records for system-wide error monitoring and analysis.
    /// </remarks>
    public async virtual Task<List<core_log_sp_GetErrorsResult>> core_log_sp_GetErrorsAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_log_sp_GetErrorsResult>("EXEC @returnValue = [dbo].[core_log_sp_GetErrors]", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves the last change record for a specific user.
    /// </summary>
    /// <param name="userId">The unique identifier of the user to retrieve the last change for.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list containing the most recent change record for the specified user.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_log_sp_GetLastChange] stored procedure to retrieve the most recent change activity for a user, useful for tracking recent user actions.
    /// </remarks>
    public async virtual Task<List<core_log_sp_GetLastChangeResult>> core_log_sp_GetLastChangeAsync(int? userId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_log_sp_GetLastChangeResult>("EXEC @returnValue = [dbo].[core_log_sp_GetLastChange] @userId = @userId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Inserts a new change set record into the logging system.
    /// </summary>
    /// <param name="changerows">The change data to be inserted as a text string.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>The number of rows affected by the insert operation.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_log_sp_InsertChangeSet] stored procedure to record change set information for auditing and change tracking purposes.
    /// </remarks>
    public async virtual Task<int> core_log_sp_InsertChangeSetAsync(string? changerows, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "changerows",
                    Value = changerows ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NText,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_log_sp_InsertChangeSet] @changerows = @changerows", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Logs page generation time metrics for performance monitoring.
    /// </summary>
    /// <param name="action_date">The date and time when the page generation occurred.</param>
    /// <param name="measuredTime">The measured time taken to generate the page.</param>
    /// <param name="currentPage">The name or URL of the current page being generated.</param>
    /// <param name="referringPage">The referring page that led to the current page.</param>
    /// <param name="username">The username of the user accessing the page.</param>
    /// <param name="role">The role of the user accessing the page.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list containing the logged page generation metrics.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_log_sp_LogPageGenerationTime] stored procedure to record page performance metrics for monitoring and optimization purposes.
    /// </remarks>
    public async virtual Task<List<core_log_sp_LogPageGenerationTimeResult>> core_log_sp_LogPageGenerationTimeAsync(DateTime? action_date, string? measuredTime, string? currentPage, string? referringPage, string? username, string? role, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "action_date",
                    Value = action_date ?? Convert.DBNull,
                    SqlDbType = SqlDbType.SmallDateTime,
                },
                new SqlParameter
                {
                    ParameterName = "measuredTime",
                    Size = 255,
                    Value = measuredTime ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "currentPage",
                    Size = 255,
                    Value = currentPage ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "referringPage",
                    Size = 255,
                    Value = referringPage ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "username",
                    Size = 200,
                    Value = username ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "role",
                    Size = 200,
                    Value = role ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_log_sp_LogPageGenerationTimeResult>("EXEC @returnValue = [dbo].[core_log_sp_LogPageGenerationTime] @action_date = @action_date, @measuredTime = @measuredTime, @currentPage = @currentPage, @referringPage = @referringPage, @username = @username, @role = @role", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Records an action performed by a user in the system.
    /// </summary>
    /// <param name="moduleId">The identifier of the module where the action occurred.</param>
    /// <param name="actionId">The identifier of the specific action performed.</param>
    /// <param name="userId">The unique identifier of the user who performed the action.</param>
    /// <param name="referenceId">The reference ID of the entity the action was performed on.</param>
    /// <param name="notes">Additional notes or comments about the action.</param>
    /// <param name="status">The current status before the action.</param>
    /// <param name="newStatus">The new status after the action.</param>
    /// <param name="address">The IP address or location from which the action was performed.</param>
    /// <param name="logId">Output parameter that returns the generated log ID for the recorded action.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list containing the recorded action details.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_log_sp_RecordAction] stored procedure to log user actions for comprehensive audit trails and system monitoring.
    /// </remarks>
    public async virtual Task<List<core_log_sp_RecordActionResult>> core_log_sp_RecordActionAsync(byte? moduleId, byte? actionId, int? userId, int? referenceId, string? notes, int? status, int? newStatus, string? address, OutputParameter<int?> logId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterlogId = new SqlParameter
        {
            ParameterName = "logId",
            Direction = ParameterDirection.InputOutput,
            Value = logId?.Value ?? Convert.DBNull,
            SqlDbType = SqlDbType.Int,
        };
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "moduleId",
                    Value = moduleId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "actionId",
                    Value = actionId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "referenceId",
                    Value = referenceId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "notes",
                    Size = 1000,
                    Value = notes ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Value = status ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterlogId,
                new SqlParameter
                {
                    ParameterName = "newStatus",
                    Value = newStatus ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "address",
                    Size = 20,
                    Value = address ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_log_sp_RecordActionResult>("EXEC @returnValue = [dbo].[core_log_sp_RecordAction] @moduleId = @moduleId, @actionId = @actionId, @userId = @userId, @referenceId = @referenceId, @notes = @notes, @status = @status, @logId = @logId OUTPUT, @newStatus = @newStatus, @address = @address", sqlParameters, cancellationToken);

        logId?.SetValue(parameterlogId.Value);
        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Records an email sent by the system for audit purposes.
    /// </summary>
    /// <param name="userId">The unique identifier of the user who initiated the email.</param>
    /// <param name="eTo">The primary recipient email address.</param>
    /// <param name="eCC">The CC recipient email addresses.</param>
    /// <param name="eBCC">The BCC recipient email addresses.</param>
    /// <param name="subject">The subject line of the email.</param>
    /// <param name="body">The body content of the email.</param>
    /// <param name="failed">Failure information if the email failed to send.</param>
    /// <param name="templateId">The identifier of the email template used.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list containing the recorded email details.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_log_sp_RecordEmail] stored procedure to log email communications for compliance and audit purposes.
    /// </remarks>
    public async virtual Task<List<core_log_sp_RecordEmailResult>> core_log_sp_RecordEmailAsync(int? userId, string? eTo, string? eCC, string? eBCC, string? subject, string? body, string? failed, int? templateId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "eTo",
                    Size = 100,
                    Value = eTo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "eCC",
                    Size = 100,
                    Value = eCC ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "eBCC",
                    Size = -1,
                    Value = eBCC ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "subject",
                    Size = 200,
                    Value = subject ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "body",
                    Size = -1,
                    Value = body ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "failed",
                    Size = -1,
                    Value = failed ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "templateId",
                    Value = templateId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_log_sp_RecordEmailResult>("EXEC @returnValue = [dbo].[core_log_sp_RecordEmail] @userId = @userId, @eTo = @eTo, @eCC = @eCC, @eBCC = @eBCC, @subject = @subject, @body = @body, @failed = @failed, @templateId = @templateId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Records an error that occurred in the system for debugging and monitoring.
    /// </summary>
    /// <param name="userName">The username of the user who encountered the error.</param>
    /// <param name="page">The page or location where the error occurred.</param>
    /// <param name="version">The application version when the error occurred.</param>
    /// <param name="browser">The browser information of the user.</param>
    /// <param name="message">The error message describing what went wrong.</param>
    /// <param name="stacktrace">The stack trace information for debugging.</param>
    /// <param name="caller">The method or function that triggered the error.</param>
    /// <param name="address">The IP address or location from which the error originated.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>The number of rows affected by the error logging operation.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_log_sp_RecordError] stored procedure to capture detailed error information for system diagnostics and troubleshooting.
    /// </remarks>
    public async virtual Task<int> core_log_sp_RecordErrorAsync(string? userName, string? page, string? version, string? browser, string? message, string? stacktrace, string? caller, string? address, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "userName",
                    Size = 50,
                    Value = userName ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "page",
                    Size = 200,
                    Value = page ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "version",
                    Size = 10,
                    Value = version ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "browser",
                    Size = 50,
                    Value = browser ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "message",
                    Size = -1,
                    Value = message ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "stacktrace",
                    Size = -1,
                    Value = stacktrace ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "caller",
                    Size = 100,
                    Value = caller ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "address",
                    Size = 20,
                    Value = address ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_log_sp_RecordError] @userName = @userName, @page = @page, @version = @version, @browser = @browser, @message = @message, @stacktrace = @stacktrace, @caller = @caller, @address = @address", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves all available modules in the system.
    /// </summary>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list of all modules available in the system.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookups_GetAllModules] stored procedure to retrieve the complete list of system modules for configuration and navigation purposes.
    /// </remarks>
    public async virtual Task<List<core_lookups_GetAllModulesResult>> core_lookups_GetAllModulesAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lookups_GetAllModulesResult>("EXEC @returnValue = [dbo].[core_lookups_GetAllModules]", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves component lookup data for system configuration.
    /// </summary>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list of component lookup values.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookUps_sp_Component] stored procedure to retrieve component reference data used throughout the system.
    /// </remarks>
    public async virtual Task<List<core_lookUps_sp_ComponentResult>> core_lookUps_sp_ComponentAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lookUps_sp_ComponentResult>("EXEC @returnValue = [dbo].[core_lookUps_sp_Component]", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves duty status lookup data for personnel management.
    /// </summary>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list of duty status lookup values.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookUps_sp_DutyStatuses] stored procedure to retrieve duty status reference data for personnel and assignment tracking.
    /// </remarks>
    public async virtual Task<List<core_lookUps_sp_DutyStatusesResult>> core_lookUps_sp_DutyStatusesAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lookUps_sp_DutyStatusesResult>("EXEC @returnValue = [dbo].[core_lookUps_sp_DutyStatuses]", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves from location lookup data for incident reporting.
    /// </summary>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list of from location lookup values.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookUps_sp_FromLocation] stored procedure to retrieve location reference data for incident and case reporting.
    /// </remarks>
    public async virtual Task<List<core_lookUps_sp_FromLocationResult>> core_lookUps_sp_FromLocationAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lookUps_sp_FromLocationResult>("EXEC @returnValue = [dbo].[core_lookUps_sp_FromLocation]", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves SC subtype ID by workflow title for special case management.
    /// </summary>
    /// <param name="workflowTitle">The workflow title to find the SC subtype for.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list containing the SC subtype information for the specified workflow title.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookUps_sp_Get_SCSubTypeIdByWorkflowTitle] stored procedure to retrieve special case subtype information based on workflow title for case routing and processing.
    /// </remarks>
    public async virtual Task<List<core_lookUps_sp_Get_SCSubTypeIdByWorkflowTitleResult>> core_lookUps_sp_Get_SCSubTypeIdByWorkflowTitleAsync(string? workflowTitle, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "workflowTitle",
                    Size = 100,
                    Value = workflowTitle ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lookUps_sp_Get_SCSubTypeIdByWorkflowTitleResult>("EXEC @returnValue = [dbo].[core_lookUps_sp_Get_SCSubTypeIdByWorkflowTitle] @workflowTitle = @workflowTitle", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves SC subtypes by workflow ID for special case management.
    /// </summary>
    /// <param name="workflowId">The workflow ID to retrieve SC subtypes for.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list of SC subtypes associated with the specified workflow.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookUps_sp_Get_SCSubTypesByWorkflowId] stored procedure to retrieve special case subtype options for a specific workflow.
    /// </remarks>
    public async virtual Task<List<core_lookUps_sp_Get_SCSubTypesByWorkflowIdResult>> core_lookUps_sp_Get_SCSubTypesByWorkflowIdAsync(int? workflowId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "workflowId",
                    Value = workflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lookUps_sp_Get_SCSubTypesByWorkflowIdResult>("EXEC @returnValue = [dbo].[core_lookUps_sp_Get_SCSubTypesByWorkflowId] @workflowId = @workflowId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves all DAWG recommendations for case disposition.
    /// </summary>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list of all DAWG recommendation options.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookUps_sp_GetAllDAWGRecommendations] stored procedure to retrieve DAWG (likely Defense Advisory Working Group) recommendation reference data for case disposition.
    /// </remarks>
    public async virtual Task<List<core_lookUps_sp_GetAllDAWGRecommendationsResult>> core_lookUps_sp_GetAllDAWGRecommendationsAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lookUps_sp_GetAllDAWGRecommendationsResult>("EXEC @returnValue = [dbo].[core_lookUps_sp_GetAllDAWGRecommendations]", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves all follow-up interval options for case management.
    /// </summary>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list of all follow-up interval options.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookUps_sp_GetAllFollowUpIntervals] stored procedure to retrieve follow-up interval reference data for case management and scheduling.
    /// </remarks>
    public async virtual Task<List<core_lookUps_sp_GetAllFollowUpIntervalsResult>> core_lookUps_sp_GetAllFollowUpIntervalsAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lookUps_sp_GetAllFollowUpIntervalsResult>("EXEC @returnValue = [dbo].[core_lookUps_sp_GetAllFollowUpIntervals]", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves all missed work days options for case reporting.
    /// </summary>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list of all missed work days options.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookUps_sp_GetAllMissedWorkDays] stored procedure to retrieve missed work days reference data for incident and absence reporting.
    /// </remarks>
    public async virtual Task<List<core_lookUps_sp_GetAllMissedWorkDaysResult>> core_lookUps_sp_GetAllMissedWorkDaysAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lookUps_sp_GetAllMissedWorkDaysResult>("EXEC @returnValue = [dbo].[core_lookUps_sp_GetAllMissedWorkDays]", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves all RMUs (Resource Management Units) in the system.
    /// </summary>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list of all RMU records.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookups_sp_GetAllRMUs] stored procedure to retrieve all Resource Management Unit reference data for organizational management.
    /// </remarks>
    public async virtual Task<List<core_lookups_sp_GetAllRMUsResult>> core_lookups_sp_GetAllRMUsAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lookups_sp_GetAllRMUsResult>("EXEC @returnValue = [dbo].[core_lookups_sp_GetAllRMUs]", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves all specialists required for management oversight.
    /// </summary>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list of all specialists required for management.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookUps_sp_GetAllSpecialistsRequiredForManagement] stored procedure to retrieve specialist requirement reference data for management and oversight purposes.
    /// </remarks>
    public async virtual Task<List<core_lookUps_sp_GetAllSpecialistsRequiredForManagementResult>> core_lookUps_sp_GetAllSpecialistsRequiredForManagementAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lookUps_sp_GetAllSpecialistsRequiredForManagementResult>("EXEC @returnValue = [dbo].[core_lookUps_sp_GetAllSpecialistsRequiredForManagement]", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves all sudden incapacitation risk options.
    /// </summary>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list of all sudden incapacitation risk options.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookUps_sp_GetAllSuddenIncapaciationRisks] stored procedure to retrieve sudden incapacitation risk reference data for medical and safety assessments.
    /// </remarks>
    public async virtual Task<List<core_lookUps_sp_GetAllSuddenIncapaciationRisksResult>> core_lookUps_sp_GetAllSuddenIncapaciationRisksAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lookUps_sp_GetAllSuddenIncapaciationRisksResult>("EXEC @returnValue = [dbo].[core_lookUps_sp_GetAllSuddenIncapaciationRisks]", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves all years of satisfactory service options.
    /// </summary>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list of all years of satisfactory service options.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookUps_sp_GetAllYearsSatisfactoryService] stored procedure to retrieve years of satisfactory service reference data for personnel evaluations.
    /// </remarks>
    public async virtual Task<List<core_lookUps_sp_GetAllYearsSatisfactoryServiceResult>> core_lookUps_sp_GetAllYearsSatisfactoryServiceAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lookUps_sp_GetAllYearsSatisfactoryServiceResult>("EXEC @returnValue = [dbo].[core_lookUps_sp_GetAllYearsSatisfactoryService]", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves AMRO disposition options.
    /// </summary>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list of AMRO disposition options.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookups_sp_GetAMRODisposition] stored procedure to retrieve AMRO (likely Aeromedical Review Officer) disposition reference data for medical case management.
    /// </remarks>
    public async virtual Task<List<core_lookups_sp_GetAMRODispositionResult>> core_lookups_sp_GetAMRODispositionAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lookups_sp_GetAMRODispositionResult>("EXEC @returnValue = [dbo].[core_lookups_sp_GetAMRODisposition]", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves availability code options.
    /// </summary>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list of availability code options.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookups_sp_GetAvailabilityCode] stored procedure to retrieve availability code reference data for personnel status tracking.
    /// </remarks>
    public async virtual Task<List<core_lookups_sp_GetAvailabilityCodeResult>> core_lookups_sp_GetAvailabilityCodeAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lookups_sp_GetAvailabilityCodeResult>("EXEC @returnValue = [dbo].[core_lookups_sp_GetAvailabilityCode]", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves cancel reason description by reason ID.
    /// </summary>
    /// <param name="reasonId">The unique identifier of the cancel reason.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list containing the cancel reason description for the specified ID.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookUps_sp_GetCancelReasonDescriptionById] stored procedure to retrieve detailed cancel reason information for case management.
    /// </remarks>
    public async virtual Task<List<core_lookUps_sp_GetCancelReasonDescriptionByIdResult>> core_lookUps_sp_GetCancelReasonDescriptionByIdAsync(byte? reasonId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "reasonId",
                    Value = reasonId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lookUps_sp_GetCancelReasonDescriptionByIdResult>("EXEC @returnValue = [dbo].[core_lookUps_sp_GetCancelReasonDescriptionById] @reasonId = @reasonId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves all cancel reason options.
    /// </summary>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list of all cancel reason options.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookups_sp_GetCancelReasons] stored procedure to retrieve all cancel reason reference data for case cancellation management.
    /// </remarks>
    public async virtual Task<List<core_lookups_sp_GetCancelReasonsResult>> core_lookups_sp_GetCancelReasonsAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lookups_sp_GetCancelReasonsResult>("EXEC @returnValue = [dbo].[core_lookups_sp_GetCancelReasons]", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves a specific data type by its identifier.
    /// </summary>
    /// <param name="id">The unique identifier of the data type to retrieve.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>The data type information for the specified identifier.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookups_sp_GetDataTypeById] stored procedure to retrieve specific data type reference data by ID.
    /// </remarks>
    public async virtual Task<List<core_lookups_sp_GetDataTypeByIdResult>> core_lookups_sp_GetDataTypeByIdAsync(int? id, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lookups_sp_GetDataTypeByIdResult>("EXEC @returnValue = [dbo].[core_lookups_sp_GetDataTypeById] @id = @id", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves all data types.
    /// </summary>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list of all data types.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookups_sp_GetDataTypes] stored procedure to retrieve all data type reference data for system configuration.
    /// </remarks>
    public async virtual Task<List<core_lookups_sp_GetDataTypesResult>> core_lookups_sp_GetDataTypesAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lookups_sp_GetDataTypesResult>("EXEC @returnValue = [dbo].[core_lookups_sp_GetDataTypes]", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves a specific disposition by its identifier.
    /// </summary>
    /// <param name="id">The unique identifier of the disposition to retrieve.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>The disposition information for the specified identifier.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookups_sp_GetDispositionById] stored procedure to retrieve specific disposition reference data by ID.
    /// </remarks>
    public async virtual Task<List<core_lookups_sp_GetDispositionByIdResult>> core_lookups_sp_GetDispositionByIdAsync(int? id, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lookups_sp_GetDispositionByIdResult>("EXEC @returnValue = [dbo].[core_lookups_sp_GetDispositionById] @id = @id", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves all dispositions.
    /// </summary>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list of all dispositions.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookups_sp_GetDispositions] stored procedure to retrieve all disposition reference data for case management.
    /// </remarks>
    public async virtual Task<List<core_lookups_sp_GetDispositionsResult>> core_lookups_sp_GetDispositionsAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lookups_sp_GetDispositionsResult>("EXEC @returnValue = [dbo].[core_lookups_sp_GetDispositions]", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves workflow information for a specific disposition.
    /// </summary>
    /// <param name="dispositionId">The disposition identifier to filter workflows by.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list of workflow information for the specified disposition.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookups_sp_GetDispositionWorkflows] stored procedure to retrieve workflow data associated with a specific disposition.
    /// </remarks>
    public async virtual Task<List<core_lookups_sp_GetDispositionWorkflowsResult>> core_lookups_sp_GetDispositionWorkflowsAsync(int? dispositionId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "dispositionId",
                    Value = dispositionId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lookups_sp_GetDispositionWorkflowsResult>("EXEC @returnValue = [dbo].[core_lookups_sp_GetDispositionWorkflows] @dispositionId = @dispositionId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves Form 348 snapshot data within a specified date range.
    /// </summary>
    /// <param name="beginDate">The beginning date for the snapshot period.</param>
    /// <param name="endDate">The ending date for the snapshot period.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list of Form 348 snapshot records for the specified date range.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookUps_sp_GetForm348Snapshot] stored procedure to retrieve Form 348 snapshot data for reporting and analysis purposes.
    /// </remarks>
    public async virtual Task<List<core_lookUps_sp_GetForm348SnapshotResult>> core_lookUps_sp_GetForm348SnapshotAsync(DateTime? beginDate, DateTime? endDate, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "beginDate",
                    Value = beginDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "endDate",
                    Value = endDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lookUps_sp_GetForm348SnapshotResult>("EXEC @returnValue = [dbo].[core_lookUps_sp_GetForm348Snapshot] @beginDate = @beginDate, @endDate = @endDate", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves grade abbreviation information by type and code.
    /// </summary>
    /// <param name="abbreviationTypeName">The type name of the abbreviation to retrieve.</param>
    /// <param name="gradeCode">The grade code to filter abbreviations by.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>The grade abbreviation information for the specified type and code.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookUps_sp_GetGradeAbbreviationByTypeAndCode] stored procedure to retrieve grade abbreviation data filtered by type and code.
    /// </remarks>
    public async virtual Task<List<core_lookUps_sp_GetGradeAbbreviationByTypeAndCodeResult>> core_lookUps_sp_GetGradeAbbreviationByTypeAndCodeAsync(string? abbreviationTypeName, int? gradeCode, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "abbreviationTypeName",
                    Size = 200,
                    Value = abbreviationTypeName ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "gradeCode",
                    Value = gradeCode ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lookUps_sp_GetGradeAbbreviationByTypeAndCodeResult>("EXEC @returnValue = [dbo].[core_lookUps_sp_GetGradeAbbreviationByTypeAndCode] @abbreviationTypeName = @abbreviationTypeName, @gradeCode = @gradeCode", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves all grade information.
    /// </summary>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list of all grade records.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookups_sp_GetGrades] stored procedure to retrieve all grade reference data for personnel management.
    /// </remarks>
    public async virtual Task<List<core_lookups_sp_GetGradesResult>> core_lookups_sp_GetGradesAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lookups_sp_GetGradesResult>("EXEC @returnValue = [dbo].[core_lookups_sp_GetGrades]", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves all IRILO status options.
    /// </summary>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list of all IRILO status options.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookups_sp_GetIRILOStatus] stored procedure to retrieve all IRILO status reference data for case management.
    /// </remarks>
    public async virtual Task<List<core_lookups_sp_GetIRILOStatusResult>> core_lookups_sp_GetIRILOStatusAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lookups_sp_GetIRILOStatusResult>("EXEC @returnValue = [dbo].[core_lookups_sp_GetIRILOStatus]", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves ICD code IDs for a specific diagnosis type.
    /// </summary>
    /// <param name="diagnosisType">The diagnosis type to filter ICD codes by.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list of ICD code IDs for the specified diagnosis type.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookups_sp_GetIRILOTypeICDCodeIDs] stored procedure to retrieve ICD code identifiers for medical diagnosis categorization.
    /// </remarks>
    public async virtual Task<List<core_lookups_sp_GetIRILOTypeICDCodeIDsResult>> core_lookups_sp_GetIRILOTypeICDCodeIDsAsync(string? diagnosisType, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "diagnosisType",
                    Size = 50,
                    Value = diagnosisType ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lookups_sp_GetIRILOTypeICDCodeIDsResult>("EXEC @returnValue = [dbo].[core_lookups_sp_GetIRILOTypeICDCodeIDs] @diagnosisType = @diagnosisType", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves MAJCOM information with optional filtering.
    /// </summary>
    /// <param name="id">Optional identifier to filter specific MAJCOM.</param>
    /// <param name="filter">Optional filter value for MAJCOM records.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list of MAJCOM information based on the provided filters.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookUps_sp_GetMAJCOM] stored procedure to retrieve MAJCOM reference data with optional filtering capabilities.
    /// </remarks>
    public async virtual Task<List<core_lookUps_sp_GetMAJCOMResult>> core_lookUps_sp_GetMAJCOMAsync(int? id, int? filter, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "filter",
                    Value = filter ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lookUps_sp_GetMAJCOMResult>("EXEC @returnValue = [dbo].[core_lookUps_sp_GetMAJCOM] @id = @id, @filter = @filter", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves member components associated with a specific workflow.
    /// </summary>
    /// <param name="workflowId">The workflow identifier to filter member components by.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list of member components for the specified workflow.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookups_sp_GetMemberComponentsByWorkflow] stored procedure to retrieve member component data filtered by workflow for case processing.
    /// </remarks>
    public async virtual Task<List<core_lookups_sp_GetMemberComponentsByWorkflowResult>> core_lookups_sp_GetMemberComponentsByWorkflowAsync(byte? workflowId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "workflowId",
                    Value = workflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lookups_sp_GetMemberComponentsByWorkflowResult>("EXEC @returnValue = [dbo].[core_lookups_sp_GetMemberComponentsByWorkflow] @workflowId = @workflowId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves all member PSCD category options.
    /// </summary>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list of all member PSCD category options.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookUps_sp_GetMemberPSCDCategory] stored procedure to retrieve all member PSCD category reference data for personnel management.
    /// </remarks>
    public async virtual Task<List<core_lookUps_sp_GetMemberPSCDCategoryResult>> core_lookUps_sp_GetMemberPSCDCategoryAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lookUps_sp_GetMemberPSCDCategoryResult>("EXEC @returnValue = [dbo].[core_lookUps_sp_GetMemberPSCDCategory]", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves all member PSCD status options.
    /// </summary>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list of all member PSCD status options.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookUps_sp_GetMemberPSCDStatus] stored procedure to retrieve all member PSCD status reference data for personnel management.
    /// </remarks>
    public async virtual Task<List<core_lookUps_sp_GetMemberPSCDStatusResult>> core_lookUps_sp_GetMemberPSCDStatusAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lookUps_sp_GetMemberPSCDStatusResult>("EXEC @returnValue = [dbo].[core_lookUps_sp_GetMemberPSCDStatus]", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves all PAS code chain type options.
    /// </summary>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list of all PAS code chain type options.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookUps_sp_GetPasCodeChainType] stored procedure to retrieve all PAS code chain type reference data for system configuration.
    /// </remarks>
    public async virtual Task<List<core_lookUps_sp_GetPasCodeChainTypeResult>> core_lookUps_sp_GetPasCodeChainTypeAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lookUps_sp_GetPasCodeChainTypeResult>("EXEC @returnValue = [dbo].[core_lookUps_sp_GetPasCodeChainType]", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves all PEPP case types.
    /// </summary>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list of all PEPP case types.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookUps_sp_GetPEPPCaseTypes] stored procedure to retrieve all PEPP case type reference data for case classification.
    /// </remarks>
    public async virtual Task<List<core_lookUps_sp_GetPEPPCaseTypesResult>> core_lookUps_sp_GetPEPPCaseTypesAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lookUps_sp_GetPEPPCaseTypesResult>("EXEC @returnValue = [dbo].[core_lookUps_sp_GetPEPPCaseTypes]", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves PEPP dispositions with optional filtering.
    /// </summary>
    /// <param name="id">Optional identifier to filter specific PEPP disposition.</param>
    /// <param name="filter">Optional filter value for PEPP dispositions.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list of PEPP dispositions based on the provided filters.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookUps_sp_GetPEPPDispositions] stored procedure to retrieve PEPP disposition reference data with optional filtering capabilities.
    /// </remarks>
    public async virtual Task<List<core_lookUps_sp_GetPEPPDispositionsResult>> core_lookUps_sp_GetPEPPDispositionsAsync(int? id, int? filter, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "filter",
                    Value = filter ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lookUps_sp_GetPEPPDispositionsResult>("EXEC @returnValue = [dbo].[core_lookUps_sp_GetPEPPDispositions] @id = @id, @filter = @filter", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves PEPP ratings with optional filtering.
    /// </summary>
    /// <param name="id">Optional identifier to filter specific PEPP rating.</param>
    /// <param name="filter">Optional filter value for PEPP ratings.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list of PEPP ratings based on the provided filters.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookUps_sp_GetPEPPRatings] stored procedure to retrieve PEPP rating reference data with optional filtering capabilities.
    /// </remarks>
    public async virtual Task<List<core_lookUps_sp_GetPEPPRatingsResult>> core_lookUps_sp_GetPEPPRatingsAsync(int? id, int? filter, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "filter",
                    Value = filter ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lookUps_sp_GetPEPPRatingsResult>("EXEC @returnValue = [dbo].[core_lookUps_sp_GetPEPPRatings] @id = @id, @filter = @filter", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves PEPP types with optional filtering.
    /// </summary>
    /// <param name="id">Optional identifier to filter specific PEPP type.</param>
    /// <param name="filter">Optional filter value for PEPP types.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list of PEPP types based on the provided filters.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookUps_sp_GetPEPPTypes] stored procedure to retrieve PEPP type reference data with optional filtering capabilities.
    /// </remarks>
    public async virtual Task<List<core_lookUps_sp_GetPEPPTypesResult>> core_lookUps_sp_GetPEPPTypesAsync(int? id, int? filter, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "filter",
                    Value = filter ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lookUps_sp_GetPEPPTypesResult>("EXEC @returnValue = [dbo].[core_lookUps_sp_GetPEPPTypes] @id = @id, @filter = @filter", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves RMU information by identifier.
    /// </summary>
    /// <param name="id">The unique identifier of the RMU to retrieve.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>The RMU information for the specified identifier.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookups_sp_GetRMUById] stored procedure to retrieve specific RMU reference data by ID.
    /// </remarks>
    public async virtual Task<List<core_lookups_sp_GetRMUByIdResult>> core_lookups_sp_GetRMUByIdAsync(int? id, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lookups_sp_GetRMUByIdResult>("EXEC @returnValue = [dbo].[core_lookups_sp_GetRMUById] @id = @id", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves disposition information for a specific workflow.
    /// </summary>
    /// <param name="workflowId">The workflow identifier to filter dispositions by.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list of disposition information for the specified workflow.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookups_sp_GetWorkflowDispositions] stored procedure to retrieve disposition data associated with a specific workflow.
    /// </remarks>
    public async virtual Task<List<core_lookups_sp_GetWorkflowDispositionsResult>> core_lookups_sp_GetWorkflowDispositionsAsync(int? workflowId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "workflowId",
                    Value = workflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lookups_sp_GetWorkflowDispositionsResult>("EXEC @returnValue = [dbo].[core_lookups_sp_GetWorkflowDispositions] @workflowId = @workflowId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves all information source options.
    /// </summary>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list of all information source options.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookUps_sp_InfoSources] stored procedure to retrieve all information source reference data for case documentation.
    /// </remarks>
    public async virtual Task<List<core_lookUps_sp_InfoSourcesResult>> core_lookUps_sp_InfoSourcesAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lookUps_sp_InfoSourcesResult>("EXEC @returnValue = [dbo].[core_lookUps_sp_InfoSources]", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Inserts a new MAJCOM record.
    /// </summary>
    /// <param name="id">The identifier for the new MAJCOM.</param>
    /// <param name="majcomName">The name of the MAJCOM.</param>
    /// <param name="active">Flag indicating whether the MAJCOM is active.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>The result of the insert operation.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="id"/> or <paramref name="majcomName"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_lookups_sp_Insert_MAJCOM].</remarks>
    public async virtual Task<int> core_lookups_sp_Insert_MAJCOMAsync(int? id, string? majcomName, bool? active, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "majcomName",
                    Size = 20,
                    Value = majcomName ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "active",
                    Value = active ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_lookups_sp_Insert_MAJCOM] @id = @id, @majcomName = @majcomName, @active = @active", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Inserts a new PEPP disposition record.
    /// </summary>
    /// <param name="id">The identifier for the new PEPP disposition.</param>
    /// <param name="dispositionName">The name of the PEPP disposition.</param>
    /// <param name="active">Flag indicating whether the disposition is active.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>The result of the insert operation.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookups_sp_Insert_PEPPDisposition] stored procedure to add a new PEPP disposition to the reference data.
    /// </remarks>
    public async virtual Task<int> core_lookups_sp_Insert_PEPPDispositionAsync(int? id, string? dispositionName, bool? active, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dispositionName",
                    Size = 50,
                    Value = dispositionName ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "active",
                    Value = active ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_lookups_sp_Insert_PEPPDisposition] @id = @id, @dispositionName = @dispositionName, @active = @active", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Inserts a new PEPP rating record.
    /// </summary>
    /// <param name="id">The identifier for the new PEPP rating.</param>
    /// <param name="ratingName">The name of the PEPP rating.</param>
    /// <param name="active">Flag indicating whether the rating is active.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>The result of the insert operation.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookups_sp_Insert_PEPPRating] stored procedure to add a new PEPP rating to the reference data.
    /// </remarks>
    public async virtual Task<int> core_lookups_sp_Insert_PEPPRatingAsync(int? id, string? ratingName, bool? active, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ratingName",
                    Size = 50,
                    Value = ratingName ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "active",
                    Value = active ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_lookups_sp_Insert_PEPPRating] @id = @id, @ratingName = @ratingName, @active = @active", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Inserts a new PEPP type record.
    /// </summary>
    /// <param name="id">The identifier for the new PEPP type.</param>
    /// <param name="typeName">The name of the PEPP type.</param>
    /// <param name="active">Flag indicating whether the type is active.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>The result of the insert operation.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookups_sp_Insert_PEPPType] stored procedure to add a new PEPP type to the reference data.
    /// </remarks>
    public async virtual Task<int> core_lookups_sp_Insert_PEPPTypeAsync(int? id, string? typeName, bool? active, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "typeName",
                    Size = 50,
                    Value = typeName ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "active",
                    Value = active ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_lookups_sp_Insert_PEPPType] @id = @id, @typeName = @typeName, @active = @active", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Inserts a new RMU record.
    /// </summary>
    /// <param name="id">The identifier for the new RMU.</param>
    /// <param name="rmuName">The name of the RMU.</param>
    /// <param name="rmuPAS">The PAS code for the RMU.</param>
    /// <param name="collocated">Flag indicating whether the RMU is collocated.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>The result of the insert operation.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookups_sp_Insert_RMU] stored procedure to add a new RMU to the reference data with specified name, PAS code, and collocation status.
    /// </remarks>
    public async virtual Task<int> core_lookups_sp_Insert_RMUAsync(int? id, string? rmuName, string? rmuPAS, int? collocated, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rmuName",
                    Size = 100,
                    Value = rmuName ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "rmuPAS",
                    Size = 8,
                    Value = rmuPAS ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "collocated",
                    Value = collocated ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_lookups_sp_Insert_RMU] @id = @id, @rmuName = @rmuName, @rmuPAS = @rmuPAS, @collocated = @collocated", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Inserts a new category record.
    /// </summary>
    /// <param name="description">The description of the category.</param>
    /// <param name="type">The type of the category.</param>
    /// <param name="sort_order">The sort order for the category.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>The result of the insert operation.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookUps_sp_InsertCategory] stored procedure to add a new category to the reference data with specified description, type, and sort order.
    /// </remarks>
    public async virtual Task<int> core_lookUps_sp_InsertCategoryAsync(string? description, string? type, int? sort_order, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 200,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "type",
                    Size = 200,
                    Value = type ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sort_order",
                    Value = sort_order ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_lookUps_sp_InsertCategory] @description = @description, @type = @type, @sort_order = @sort_order", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Inserts a new component record.
    /// </summary>
    /// <param name="description">The description of the component.</param>
    /// <param name="type">The type of the component.</param>
    /// <param name="sort_order">The sort order for the component.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>The result of the insert operation.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookUps_sp_InsertComponent] stored procedure to add a new component to the reference data with specified description, type, and sort order.
    /// </remarks>
    public async virtual Task<int> core_lookUps_sp_InsertComponentAsync(string? description, string? type, int? sort_order, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 200,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "type",
                    Size = 200,
                    Value = type ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sort_order",
                    Value = sort_order ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_lookUps_sp_InsertComponent] @description = @description, @type = @type, @sort_order = @sort_order", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Inserts a new disposition record.
    /// </summary>
    /// <param name="newDispositionName">The name of the new disposition to insert.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>The result of the insert operation.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookups_sp_InsertDisposition] stored procedure to add a new disposition to the reference data.
    /// </remarks>
    public async virtual Task<int> core_lookups_sp_InsertDispositionAsync(string? newDispositionName, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "newDispositionName",
                    Size = 200,
                    Value = newDispositionName ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_lookups_sp_InsertDisposition] @newDispositionName = @newDispositionName", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Inserts a new duty status record.
    /// </summary>
    /// <param name="description">The description of the duty status.</param>
    /// <param name="type">The type of the duty status.</param>
    /// <param name="sort_order">The sort order for the duty status.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>The result of the insert operation.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookUps_sp_InsertDutyStatus] stored procedure to add a new duty status to the reference data with specified description, type, and sort order.
    /// </remarks>
    public async virtual Task<int> core_lookUps_sp_InsertDutyStatusAsync(string? description, string? type, int? sort_order, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 200,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "type",
                    Size = 200,
                    Value = type ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sort_order",
                    Value = sort_order ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_lookUps_sp_InsertDutyStatus] @description = @description, @type = @type, @sort_order = @sort_order", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Inserts a new facility record.
    /// </summary>
    /// <param name="description">The description of the facility.</param>
    /// <param name="type">The type of the facility.</param>
    /// <param name="sort_order">The sort order for the facility.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>The result of the insert operation.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookUps_sp_InsertFacility] stored procedure to add a new facility to the reference data with specified description, type, and sort order.
    /// </remarks>
    public async virtual Task<int> core_lookUps_sp_InsertFacilityAsync(string? description, string? type, int? sort_order, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 200,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "type",
                    Size = 200,
                    Value = type ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sort_order",
                    Value = sort_order ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_lookUps_sp_InsertFacility] @description = @description, @type = @type, @sort_order = @sort_order", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Inserts a new from location record.
    /// </summary>
    /// <param name="description">The description of the from location.</param>
    /// <param name="type">The type of the from location.</param>
    /// <param name="sort_order">The sort order for the from location.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>The result of the insert operation.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookUps_sp_InsertFromLocation] stored procedure to add a new from location to the reference data with specified description, type, and sort order.
    /// </remarks>
    public async virtual Task<int> core_lookUps_sp_InsertFromLocationAsync(string? description, string? type, int? sort_order, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 200,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "type",
                    Size = 200,
                    Value = type ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sort_order",
                    Value = sort_order ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_lookUps_sp_InsertFromLocation] @description = @description, @type = @type, @sort_order = @sort_order", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Inserts a new influence record.
    /// </summary>
    /// <param name="description">The description of the influence.</param>
    /// <param name="type">The type of the influence.</param>
    /// <param name="sort_order">The sort order for the influence.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>The result of the insert operation.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookUps_sp_InsertInfluence] stored procedure to add a new influence to the reference data with specified description, type, and sort order.
    /// </remarks>
    public async virtual Task<int> core_lookUps_sp_InsertInfluenceAsync(string? description, string? type, int? sort_order, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 200,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "type",
                    Size = 200,
                    Value = type ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sort_order",
                    Value = sort_order ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_lookUps_sp_InsertInfluence] @description = @description, @type = @type, @sort_order = @sort_order", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Inserts a new information source record.
    /// </summary>
    /// <param name="description">The description of the information source.</param>
    /// <param name="type">The type of the information source.</param>
    /// <param name="sort_order">The sort order for the information source.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>The result of the insert operation.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookUps_sp_InsertInfoSource] stored procedure to add a new information source to the reference data with specified description, type, and sort order.
    /// </remarks>
    public async virtual Task<int> core_lookUps_sp_InsertInfoSourceAsync(string? description, string? type, int? sort_order, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 200,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "type",
                    Size = 200,
                    Value = type ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sort_order",
                    Value = sort_order ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_lookUps_sp_InsertInfoSource] @description = @description, @type = @type, @sort_order = @sort_order", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Inserts a new occurrence record.
    /// </summary>
    /// <param name="description">The description of the occurrence.</param>
    /// <param name="type">The type of the occurrence.</param>
    /// <param name="sort_order">The sort order for the occurrence.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>The result of the insert operation.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookUps_sp_InsertOccurrence] stored procedure to add a new occurrence to the reference data with specified description, type, and sort order.
    /// </remarks>
    public async virtual Task<int> core_lookUps_sp_InsertOccurrenceAsync(string? description, string? type, int? sort_order, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 200,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "type",
                    Size = 200,
                    Value = type ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sort_order",
                    Value = sort_order ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_lookUps_sp_InsertOccurrence] @description = @description, @type = @type, @sort_order = @sort_order", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Inserts a new proximate cause record.
    /// </summary>
    /// <param name="description">The description of the proximate cause.</param>
    /// <param name="type">The type of the proximate cause.</param>
    /// <param name="sort_order">The sort order for the proximate cause.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>The result of the insert operation.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookUps_sp_InsertProximate] stored procedure to add a new proximate cause to the reference data with specified description, type, and sort order.
    /// </remarks>
    public async virtual Task<int> core_lookUps_sp_InsertProximateAsync(string? description, string? type, int? sort_order, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 200,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "type",
                    Size = 200,
                    Value = type ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sort_order",
                    Value = sort_order ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_lookUps_sp_InsertProximate] @description = @description, @type = @type, @sort_order = @sort_order", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Inserts a new status record.
    /// </summary>
    /// <param name="description">The description of the status.</param>
    /// <param name="type">The type of the status.</param>
    /// <param name="sort_order">The sort order for the status.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>The result of the insert operation.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookUps_sp_InsertStatus] stored procedure to add a new status to the reference data with specified description, type, and sort order.
    /// </remarks>
    public async virtual Task<int> core_lookUps_sp_InsertStatusAsync(string? description, string? type, int? sort_order, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 200,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "type",
                    Size = 200,
                    Value = type ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sort_order",
                    Value = sort_order ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_lookUps_sp_InsertStatus] @description = @description, @type = @type, @sort_order = @sort_order", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves all medical group names.
    /// </summary>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list of all medical group names.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookUps_sp_MedGroupNames] stored procedure to retrieve all medical group name reference data for healthcare management.
    /// </remarks>
    public async virtual Task<List<core_lookUps_sp_MedGroupNamesResult>> core_lookUps_sp_MedGroupNamesAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lookUps_sp_MedGroupNamesResult>("EXEC @returnValue = [dbo].[core_lookUps_sp_MedGroupNames]", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves all medical facility options.
    /// </summary>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list of all medical facility options.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookUps_sp_MedicalFacility] stored procedure to retrieve all medical facility reference data for healthcare management.
    /// </remarks>
    public async virtual Task<List<core_lookUps_sp_MedicalFacilityResult>> core_lookUps_sp_MedicalFacilityAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lookUps_sp_MedicalFacilityResult>("EXEC @returnValue = [dbo].[core_lookUps_sp_MedicalFacility]", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves all member category options.
    /// </summary>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list of all member category options.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookUps_sp_MemberCategory] stored procedure to retrieve all member category reference data for personnel management.
    /// </remarks>
    public async virtual Task<List<core_lookUps_sp_MemberCategoryResult>> core_lookUps_sp_MemberCategoryAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lookUps_sp_MemberCategoryResult>("EXEC @returnValue = [dbo].[core_lookUps_sp_MemberCategory]", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves all member influence options.
    /// </summary>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list of all member influence options.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookUps_sp_MemberInfluence] stored procedure to retrieve all member influence reference data for case analysis.
    /// </remarks>
    public async virtual Task<List<core_lookUps_sp_MemberInfluenceResult>> core_lookUps_sp_MemberInfluenceAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lookUps_sp_MemberInfluenceResult>("EXEC @returnValue = [dbo].[core_lookUps_sp_MemberInfluence]", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves all occurrence options.
    /// </summary>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list of all occurrence options.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookUps_sp_Occurrences] stored procedure to retrieve all occurrence reference data for case management.
    /// </remarks>
    public async virtual Task<List<core_lookUps_sp_OccurrencesResult>> core_lookUps_sp_OccurrencesAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lookUps_sp_OccurrencesResult>("EXEC @returnValue = [dbo].[core_lookUps_sp_Occurrences]", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves all process options.
    /// </summary>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list of all process options.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookUps_sp_Process] stored procedure to retrieve all process reference data for workflow management.
    /// </remarks>
    public async virtual Task<List<core_lookUps_sp_ProcessResult>> core_lookUps_sp_ProcessAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lookUps_sp_ProcessResult>("EXEC @returnValue = [dbo].[core_lookUps_sp_Process]", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves all proximate cause options.
    /// </summary>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list of all proximate cause options.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookUps_sp_ProximateCause] stored procedure to retrieve all proximate cause reference data for case analysis.
    /// </remarks>
    public async virtual Task<List<core_lookUps_sp_ProximateCauseResult>> core_lookUps_sp_ProximateCauseAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lookUps_sp_ProximateCauseResult>("EXEC @returnValue = [dbo].[core_lookUps_sp_ProximateCause]", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves all RMU options.
    /// </summary>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list of all RMU options.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_LookUps_sp_RMU] stored procedure to retrieve all RMU reference data for organizational management.
    /// </remarks>
    public async virtual Task<List<core_LookUps_sp_RMUResult>> core_LookUps_sp_RMUAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_LookUps_sp_RMUResult>("EXEC @returnValue = [dbo].[core_LookUps_sp_RMU]", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves all RMU names.
    /// </summary>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list of all RMU names.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookUps_sp_RMUNames] stored procedure to retrieve all RMU name reference data for organizational management.
    /// </remarks>
    public async virtual Task<List<core_lookUps_sp_RMUNamesResult>> core_lookUps_sp_RMUNamesAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lookUps_sp_RMUNamesResult>("EXEC @returnValue = [dbo].[core_lookUps_sp_RMUNames]", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves special case RWOA data for a specific workflow and reference ID.
    /// </summary>
    /// <param name="workflow">The workflow identifier to filter by.</param>
    /// <param name="refID">The reference identifier to filter by.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list of special case RWOA records for the specified workflow and reference ID.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookUps_sp_SpecCaseRWOA] stored procedure to retrieve special case RWOA data filtered by workflow and reference identifier.
    /// </remarks>
    public async virtual Task<List<core_lookUps_sp_SpecCaseRWOAResult>> core_lookUps_sp_SpecCaseRWOAAsync(int? workflow, int? refID, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "workflow",
                    Value = workflow ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "refID",
                    Value = refID ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_lookUps_sp_SpecCaseRWOAResult>("EXEC @returnValue = [dbo].[core_lookUps_sp_SpecCaseRWOA] @workflow = @workflow, @refID = @refID", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Updates an existing cancel reasons record.
    /// </summary>
    /// <param name="cancelReasonsId">The identifier of the cancel reasons record to update.</param>
    /// <param name="newCancelReasonsDescription">The new description for the cancel reasons.</param>
    /// <param name="newCancelReasonsDisplayOrder">The new display order for the cancel reasons.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>The result of the update operation.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookups_sp_UpdateCancelReasons] stored procedure to modify an existing cancel reasons record with new description and display order.
    /// </remarks>
    public async virtual Task<int> core_lookups_sp_UpdateCancelReasonsAsync(int? cancelReasonsId, string? newCancelReasonsDescription, int? newCancelReasonsDisplayOrder, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "CancelReasonsId",
                    Value = cancelReasonsId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "newCancelReasonsDescription",
                    Size = 200,
                    Value = newCancelReasonsDescription ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "newCancelReasonsDisplayOrder",
                    Value = newCancelReasonsDisplayOrder ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_lookups_sp_UpdateCancelReasons] @CancelReasonsId = @CancelReasonsId, @newCancelReasonsDescription = @newCancelReasonsDescription, @newCancelReasonsDisplayOrder = @newCancelReasonsDisplayOrder", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Updates an existing category record.
    /// </summary>
    /// <param name="id">The identifier of the category to update.</param>
    /// <param name="description">The new description for the category.</param>
    /// <param name="type">The new type for the category.</param>
    /// <param name="sort_order">The new sort order for the category.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>The result of the update operation.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookUps_sp_UpdateCategory] stored procedure to modify an existing category record with new description, type, and sort order.
    /// </remarks>
    public async virtual Task<int> core_lookUps_sp_UpdateCategoryAsync(int? id, string? description, string? type, int? sort_order, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 200,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "type",
                    Size = 200,
                    Value = type ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sort_order",
                    Value = sort_order ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_lookUps_sp_UpdateCategory] @id = @id, @description = @description, @type = @type, @sort_order = @sort_order", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Updates an existing component record.
    /// </summary>
    /// <param name="id">The identifier of the component to update.</param>
    /// <param name="description">The new description for the component.</param>
    /// <param name="type">The new type for the component.</param>
    /// <param name="sort_order">The new sort order for the component.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>The result of the update operation.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookUps_sp_UpdateComponent] stored procedure to modify an existing component record with new description, type, and sort order.
    /// </remarks>
    public async virtual Task<int> core_lookUps_sp_UpdateComponentAsync(int? id, string? description, string? type, int? sort_order, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 200,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "type",
                    Size = 200,
                    Value = type ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sort_order",
                    Value = sort_order ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_lookUps_sp_UpdateComponent] @id = @id, @description = @description, @type = @type, @sort_order = @sort_order", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Updates an existing disposition record.
    /// </summary>
    /// <param name="dispositionId">The identifier of the disposition to update.</param>
    /// <param name="newDispositionName">The new name for the disposition.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>The result of the update operation.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookups_sp_UpdateDisposition] stored procedure to modify an existing disposition record with a new name.
    /// </remarks>
    public async virtual Task<int> core_lookups_sp_UpdateDispositionAsync(int? dispositionId, string? newDispositionName, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "dispositionId",
                    Value = dispositionId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "newDispositionName",
                    Size = 200,
                    Value = newDispositionName ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_lookups_sp_UpdateDisposition] @dispositionId = @dispositionId, @newDispositionName = @newDispositionName", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Updates an existing duty status record.
    /// </summary>
    /// <param name="id">The identifier of the duty status to update.</param>
    /// <param name="description">The new description for the duty status.</param>
    /// <param name="type">The new type for the duty status.</param>
    /// <param name="sort_order">The new sort order for the duty status.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>The result of the update operation.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookUps_sp_UpdateDutyStatus] stored procedure to modify an existing duty status record with new description, type, and sort order.
    /// </remarks>
    public async virtual Task<int> core_lookUps_sp_UpdateDutyStatusAsync(int? id, string? description, string? type, int? sort_order, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 200,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "type",
                    Size = 200,
                    Value = type ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sort_order",
                    Value = sort_order ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_lookUps_sp_UpdateDutyStatus] @id = @id, @description = @description, @type = @type, @sort_order = @sort_order", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Updates an existing facility record.
    /// </summary>
    /// <param name="id">The identifier of the facility to update.</param>
    /// <param name="description">The new description for the facility.</param>
    /// <param name="type">The new type for the facility.</param>
    /// <param name="sort_order">The new sort order for the facility.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>The result of the update operation.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookUps_sp_UpdateFacility] stored procedure to modify an existing facility record with new description, type, and sort order.
    /// </remarks>
    public async virtual Task<int> core_lookUps_sp_UpdateFacilityAsync(int? id, string? description, string? type, int? sort_order, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 200,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "type",
                    Size = 200,
                    Value = type ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sort_order",
                    Value = sort_order ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_lookUps_sp_UpdateFacility] @id = @id, @description = @description, @type = @type, @sort_order = @sort_order", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Updates an existing from location record.
    /// </summary>
    /// <param name="id">The identifier of the from location to update.</param>
    /// <param name="description">The new description for the from location.</param>
    /// <param name="type">The new type for the from location.</param>
    /// <param name="sort_order">The new sort order for the from location.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>The result of the update operation.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookUps_sp_UpdateFromLocation] stored procedure to modify an existing from location record with new description, type, and sort order.
    /// </remarks>
    public async virtual Task<int> core_lookUps_sp_UpdateFromLocationAsync(int? id, string? description, string? type, int? sort_order, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 200,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "type",
                    Size = 200,
                    Value = type ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sort_order",
                    Value = sort_order ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_lookUps_sp_UpdateFromLocation] @id = @id, @description = @description, @type = @type, @sort_order = @sort_order", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Updates an existing influence record.
    /// </summary>
    /// <param name="id">The identifier of the influence to update.</param>
    /// <param name="description">The new description for the influence.</param>
    /// <param name="type">The new type for the influence.</param>
    /// <param name="sort_order">The new sort order for the influence.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>The result of the update operation.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookUps_sp_UpdateInfluence] stored procedure to modify an existing influence record with new description, type, and sort order.
    /// </remarks>
    public async virtual Task<int> core_lookUps_sp_UpdateInfluenceAsync(int? id, string? description, string? type, int? sort_order, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 200,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "type",
                    Size = 200,
                    Value = type ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sort_order",
                    Value = sort_order ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_lookUps_sp_UpdateInfluence] @id = @id, @description = @description, @type = @type, @sort_order = @sort_order", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Updates an existing info source record.
    /// </summary>
    /// <param name="id">The identifier of the info source to update.</param>
    /// <param name="description">The new description for the info source.</param>
    /// <param name="type">The new type for the info source.</param>
    /// <param name="sort_order">The new sort order for the info source.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>The result of the update operation.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookUps_sp_UpdateInfoSource] stored procedure to modify an existing info source record with new description, type, and sort order.
    /// </remarks>
    public async virtual Task<int> core_lookUps_sp_UpdateInfoSourceAsync(int? id, string? description, string? type, int? sort_order, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 200,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "type",
                    Size = 200,
                    Value = type ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sort_order",
                    Value = sort_order ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_lookUps_sp_UpdateInfoSource] @id = @id, @description = @description, @type = @type, @sort_order = @sort_order", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Updates an existing proximate cause record.
    /// </summary>
    /// <param name="id">The identifier of the proximate cause to update.</param>
    /// <param name="description">The new description for the proximate cause.</param>
    /// <param name="type">The new type for the proximate cause.</param>
    /// <param name="sort_order">The new sort order for the proximate cause.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>The result of the update operation.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookUps_sp_UpdateProximate] stored procedure to modify an existing proximate cause record with new description, type, and sort order.
    /// </remarks>
    public async virtual Task<int> core_lookUps_sp_UpdateProximateAsync(int? id, string? description, string? type, int? sort_order, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 200,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "type",
                    Size = 200,
                    Value = type ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sort_order",
                    Value = sort_order ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_lookUps_sp_UpdateProximate] @id = @id, @description = @description, @type = @type, @sort_order = @sort_order", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Updates an existing status record.
    /// </summary>
    /// <param name="id">The identifier of the status to update.</param>
    /// <param name="description">The new description for the status.</param>
    /// <param name="type">The new type for the status.</param>
    /// <param name="sort_order">The new sort order for the status.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>The result of the update operation.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookUps_sp_UpdateStatus] stored procedure to modify an existing status record with new description, type, and sort order.
    /// </remarks>
    public async virtual Task<int> core_lookUps_sp_UpdateStatusAsync(int? id, string? description, string? type, int? sort_order, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 200,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "type",
                    Size = 200,
                    Value = type ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sort_order",
                    Value = sort_order ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_lookUps_sp_UpdateStatus] @id = @id, @description = @description, @type = @type, @sort_order = @sort_order", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Updates workflow disposition mappings for a specific disposition.
    /// </summary>
    /// <param name="dispositionId">The identifier of the disposition to update mappings for.</param>
    /// <param name="workflowIds">A table-valued parameter containing the workflow IDs to map to the disposition.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>The result of the update operation.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_lookups_sp_UpdateWorkflowDispositionMaps] stored procedure to update the workflow mappings for a specific disposition using a table-valued parameter.
    /// </remarks>
    public async virtual Task<int> core_lookups_sp_UpdateWorkflowDispositionMapsAsync(int? dispositionId, DataTable? workflowIds, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "dispositionId",
                    Value = dispositionId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "workflowIds",
                    Value = workflowIds ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Structured,
                    TypeName = "[dbo].[tblIntegerList]",
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_lookups_sp_UpdateWorkflowDispositionMaps] @dispositionId = @dispositionId, @workflowIds = @workflowIds", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Copies memo records from memos table to memos2 table.
    /// </summary>
    /// <param name="requestId">The request identifier for the memo copy operation.</param>
    /// <param name="userId">The user identifier performing the copy operation.</param>
    /// <param name="newModuleId">The new module identifier for the copied memos.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>The result of the copy operation.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_memo_sp_copy_memos_to_memos2] stored procedure to copy memo records from the main memos table to the memos2 table with updated module assignment.
    /// </remarks>
    public async virtual Task<int> core_memo_sp_copy_memos_to_memos2Async(int? requestId, int? userId, int? newModuleId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "requestId",
                    Value = requestId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "newModuleId",
                    Value = newModuleId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_memo_sp_copy_memos_to_memos2] @requestId = @requestId, @userId = @userId, @newModuleId = @newModuleId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Copies memo records from memos2 table back to memos table.
    /// </summary>
    /// <param name="requestId">The request identifier for the memo copy operation.</param>
    /// <param name="userId">The user identifier performing the copy operation.</param>
    /// <param name="newModuleId">The new module identifier for the copied memos.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>The result of the copy operation.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_memo_sp_copy_memos2_to_memos] stored procedure to copy memo records from the memos2 table back to the main memos table with updated module assignment.
    /// </remarks>
    public async virtual Task<int> core_memo_sp_copy_memos2_to_memosAsync(int? requestId, int? userId, int? newModuleId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "requestId",
                    Value = requestId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "newModuleId",
                    Value = newModuleId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_memo_sp_copy_memos2_to_memos] @requestId = @requestId, @userId = @userId, @newModuleId = @newModuleId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Copies memo records within the memos2 table.
    /// </summary>
    /// <param name="originalRefId">The original reference identifier for the memo copy operation.</param>
    /// <param name="newRefId">The new reference identifier for the copied memo.</param>
    /// <param name="moduleId">The module identifier for the memo copy operation.</param>
    /// <param name="userId">The user identifier performing the copy operation.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>The result of the copy operation.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_memo_sp_copy_memos2_to_memos2] stored procedure to copy memo records within the memos2 table with updated reference and module assignments.
    /// </remarks>
    public async virtual Task<int> core_memo_sp_copy_memos2_to_memos2Async(int? originalRefId, int? newRefId, int? moduleId, int? userId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "originalRefId",
                    Value = originalRefId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "newRefId",
                    Value = newRefId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "moduleId",
                    Value = moduleId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_memo_sp_copy_memos2_to_memos2] @originalRefId = @originalRefId, @newRefId = @newRefId, @moduleId = @moduleId, @userId = @userId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves all available data sources for memo operations.
    /// </summary>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list of data sources available for memo operations.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_memo_sp_GetDataSources] stored procedure to retrieve all data sources that can be used in memo operations.
    /// </remarks>
    public async virtual Task<List<core_memo_sp_GetDataSourcesResult>> core_memo_sp_GetDataSourcesAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_memo_sp_GetDataSourcesResult>("EXEC @returnValue = [dbo].[core_memo_sp_GetDataSources]", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves key values for a specific key identifier.
    /// </summary>
    /// <param name="keyId">The identifier of the key to retrieve values for.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list of key values associated with the specified key identifier.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_memo_sp_GetKeyValues] stored procedure to retrieve all values associated with a specific memo key.
    /// </remarks>
    public async virtual Task<List<core_memo_sp_GetKeyValuesResult>> core_memo_sp_GetKeyValuesAsync(int? keyId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "keyId",
                    Value = keyId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_memo_sp_GetKeyValuesResult>("EXEC @returnValue = [dbo].[core_memo_sp_GetKeyValues] @keyId = @keyId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves all available memo keys.
    /// </summary>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list of all available memo keys.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_memo_sp_GetMemoKeys] stored procedure to retrieve all memo keys that can be used in memo operations.
    /// </remarks>
    public async virtual Task<List<core_memo_sp_GetMemoKeysResult>> core_memo_sp_GetMemoKeysAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_memo_sp_GetMemoKeysResult>("EXEC @returnValue = [dbo].[core_memo_sp_GetMemoKeys]", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves user groups associated with a specific memo template.
    /// </summary>
    /// <param name="templateId">The identifier of the memo template.</param>
    /// <param name="compo">The component identifier for filtering user groups.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list of user groups associated with the specified memo template.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_memo_sp_GetUserGroupsByTemplateId] stored procedure to retrieve user groups that have access to a specific memo template.
    /// </remarks>
    public async virtual Task<List<core_memo_sp_GetUserGroupsByTemplateIdResult>> core_memo_sp_GetUserGroupsByTemplateIdAsync(byte? templateId, string? compo, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "templateId",
                    Value = templateId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "compo",
                    Size = 1,
                    Value = compo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Char,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_memo_sp_GetUserGroupsByTemplateIdResult>("EXEC @returnValue = [dbo].[core_memo_sp_GetUserGroupsByTemplateId] @templateId = @templateId, @compo = @compo", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Signs a memo with a specific template and user.
    /// </summary>
    /// <param name="refId">The reference identifier of the memo to sign.</param>
    /// <param name="templateId">The identifier of the template used for signing.</param>
    /// <param name="userId">The identifier of the user performing the signing.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list of results from the memo signing operation.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_memo_sp_SignMemo] stored procedure to sign a memo using a specific template and record the signing user.
    /// </remarks>
    public async virtual Task<List<core_memo_sp_SignMemoResult>> core_memo_sp_SignMemoAsync(int? refId, byte? templateId, int? userId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "templateId",
                    Value = templateId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_memo_sp_SignMemoResult>("EXEC @returnValue = [dbo].[core_memo_sp_SignMemo] @refId = @refId, @templateId = @templateId, @userId = @userId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Updates user groups for a specific memo template.
    /// </summary>
    /// <param name="templateId">The identifier of the memo template to update.</param>
    /// <param name="xmlDocument">The XML document containing the updated group information.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>The result of the update operation.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_memo_sp_UpdateGroups] stored procedure to update the user groups associated with a specific memo template using XML data.
    /// </remarks>
    public async virtual Task<int> core_memo_sp_UpdateGroupsAsync(byte? templateId, string? xmlDocument, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "templateId",
                    Value = templateId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "XmlDocument",
                    Value = xmlDocument ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Text,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_memo_sp_UpdateGroups] @templateId = @templateId, @XmlDocument = @XmlDocument", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Updates a key value in the memo system.
    /// </summary>
    /// <param name="keyId">The identifier of the key to update.</param>
    /// <param name="valueId">The identifier of the value to update.</param>
    /// <param name="newValueDescription">The new description for the value.</param>
    /// <param name="newValue">The new value content.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>The result of the update operation.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_memo_sp_UpdateKeyValue] stored procedure to update an existing key-value pair in the memo system with new description and value.
    /// </remarks>
    public async virtual Task<int> core_memo_sp_UpdateKeyValueAsync(int? keyId, int? valueId, string? newValueDescription, string? newValue, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "keyId",
                    Value = keyId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "valueId",
                    Value = valueId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "newValueDescription",
                    Size = 50,
                    Value = newValueDescription ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "newValue",
                    Size = -1,
                    Value = newValue ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_memo_sp_UpdateKeyValue] @keyId = @keyId, @valueId = @valueId, @newValueDescription = @newValueDescription, @newValue = @newValue", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Deletes a message by its ID.
    /// </summary>
    /// <param name="messageId">The ID of the message to delete.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>The result of the delete operation.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="messageId"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_messages_sp_DeleteMessage].</remarks>
    public async virtual Task<int> core_messages_sp_DeleteMessageAsync(short? messageId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "messageId",
                    Value = messageId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_messages_sp_DeleteMessage] @messageId = @messageId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Gets all messages for a specific component and admin status.
    /// </summary>
    /// <param name="compo">The component to get messages for.</param>
    /// <param name="isAdmin">Whether to get admin messages.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of core_messages_sp_GetAllMessagesResult objects containing the messages.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="compo"/> or <paramref name="isAdmin"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_messages_sp_GetAllMessages].</remarks>
    public async virtual Task<List<core_messages_sp_GetAllMessagesResult>> core_messages_sp_GetAllMessagesAsync(string? compo, bool? isAdmin, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "compo",
                    Size = 1,
                    Value = compo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "isAdmin",
                    Value = isAdmin ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_messages_sp_GetAllMessagesResult>("EXEC @returnValue = [dbo].[core_messages_sp_GetAllMessages] @compo = @compo, @isAdmin = @isAdmin", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Gets messages for a specific user and group with popup option.
    /// </summary>
    /// <param name="userID">The ID of the user to get messages for.</param>
    /// <param name="groupID">The ID of the group to get messages for.</param>
    /// <param name="popup">Whether to get popup messages.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of core_messages_sp_GetMessagesResult objects containing the messages.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="userID"/>, <paramref name="groupID"/>, or <paramref name="popup"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_messages_sp_GetMessages].</remarks>
    public async virtual Task<List<core_messages_sp_GetMessagesResult>> core_messages_sp_GetMessagesAsync(int? userID, int? groupID, bool? popup, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "userID",
                    Value = userID ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "groupID",
                    Value = groupID ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "popup",
                    Value = popup ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_messages_sp_GetMessagesResult>("EXEC @returnValue = [dbo].[core_messages_sp_GetMessages] @userID = @userID, @groupID = @groupID, @popup = @popup", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Gets details for a specific message.
    /// </summary>
    /// <param name="messageID">The ID of the message to get details for.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of core_messages_sp_GetMessagesDetailsResult objects containing the message details.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="messageID"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_messages_sp_GetMessagesDetails].</remarks>
    public async virtual Task<List<core_messages_sp_GetMessagesDetailsResult>> core_messages_sp_GetMessagesDetailsAsync(int? messageID, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "messageID",
                    Value = messageID ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_messages_sp_GetMessagesDetailsResult>("EXEC @returnValue = [dbo].[core_messages_sp_GetMessagesDetails] @messageID = @messageID", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Gets groups associated with a specific message.
    /// </summary>
    /// <param name="messageID">The ID of the message to get groups for.</param>
    /// <param name="compo">The component identifier.</param>
    /// <param name="groupId">The group ID to filter by.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of core_messages_sp_GetMessagesGroupsResult objects containing the message groups.</returns>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="messageID"/>, <paramref name="compo"/>, or <paramref name="groupId"/> is null.</exception>
    /// <remarks>This method executes the stored procedure [dbo].[core_messages_sp_GetMessagesGroups].</remarks>
    public async virtual Task<List<core_messages_sp_GetMessagesGroupsResult>> core_messages_sp_GetMessagesGroupsAsync(int? messageID, int? compo, short? groupId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "messageID",
                    Value = messageID ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "compo",
                    Value = compo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "groupId",
                    Value = groupId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_messages_sp_GetMessagesGroupsResult>("EXEC @returnValue = [dbo].[core_messages_sp_GetMessagesGroups] @messageID = @messageID, @compo = @compo, @groupId = @groupId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_messages_sp_InsertMessagesResult>> core_messages_sp_InsertMessagesAsync(string? title, string? name, DateTime? startTime, DateTime? endTime, bool? popup, string? message, int? userID, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "title",
                    Size = 50,
                    Value = title ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "name",
                    Size = 50,
                    Value = name ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "startTime",
                    Value = startTime ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "endTime",
                    Value = endTime ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "popup",
                    Value = popup ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "message",
                    Size = 1024,
                    Value = message ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "userID",
                    Value = userID ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_messages_sp_InsertMessagesResult>("EXEC @returnValue = [dbo].[core_messages_sp_InsertMessages] @title = @title, @name = @name, @startTime = @startTime, @endTime = @endTime, @popup = @popup, @message = @message, @userID = @userID", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<int> core_messages_sp_UpdateMessageGroupsAsync(int? messageID, string? xml, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "messageID",
                    Value = messageID ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "xml",
                    Value = xml ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NText,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_messages_sp_UpdateMessageGroups] @messageID = @messageID, @xml = @xml", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<int> core_messages_sp_UpdateMessagesAsync(int? messageID, string? title, string? name, DateTime? startTime, DateTime? endTime, bool? popup, string? message, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "messageID",
                    Value = messageID ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "title",
                    Size = 50,
                    Value = title ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "name",
                    Size = 50,
                    Value = name ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "startTime",
                    Value = startTime ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "endTime",
                    Value = endTime ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "popup",
                    Value = popup ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "message",
                    Size = 1024,
                    Value = message ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_messages_sp_UpdateMessages] @messageID = @messageID, @title = @title, @name = @name, @startTime = @startTime, @endTime = @endTime, @popup = @popup, @message = @message", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<int> core_messages_sp_UpdateMessagesReadAsync(int? userID, int? groupID, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "userID",
                    Value = userID ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "groupID",
                    Value = groupID ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_messages_sp_UpdateMessagesRead] @userID = @userID, @groupID = @groupID", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_pageTitles_sp_GetAllPagesResult>> core_pageTitles_sp_GetAllPagesAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_pageTitles_sp_GetAllPagesResult>("EXEC @returnValue = [dbo].[core_pageTitles_sp_GetAllPages]", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<int> core_pageTitles_sp_InsertAsync(string? title, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "title",
                    Size = 50,
                    Value = title ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_pageTitles_sp_Insert] @title = @title", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<int> core_pageTitles_sp_UpdateByPageIdAsync(int? pageId, string? title, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "pageId",
                    Value = pageId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "title",
                    Size = 50,
                    Value = title ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_pageTitles_sp_UpdateByPageId] @pageId = @pageId, @title = @title", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_pascode_sp_GetParentInfoResult>> core_pascode_sp_GetParentInfoAsync(int? parentUnit, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "parentUnit",
                    Value = parentUnit ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_pascode_sp_GetParentInfoResult>("EXEC @returnValue = [dbo].[core_pascode_sp_GetParentInfo] @parentUnit = @parentUnit", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_pascode_sp_GetReportingResult>> core_pascode_sp_GetReportingAsync(int? cS_ID, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "CS_ID",
                    Value = cS_ID ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_pascode_sp_GetReportingResult>("EXEC @returnValue = [dbo].[core_pascode_sp_GetReporting] @CS_ID = @CS_ID", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_pascode_sp_LoadResult>> core_pascode_sp_LoadAsync(int? cs_id, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "cs_id",
                    Value = cs_id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_pascode_sp_LoadResult>("EXEC @returnValue = [dbo].[core_pascode_sp_Load] @cs_id = @cs_id", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_pascode_sp_searchResult>> core_pascode_sp_searchAsync(string? pascode, string? longName, bool? activeOnly, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "pascode",
                    Size = 8,
                    Value = pascode ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "longName",
                    Size = 200,
                    Value = longName ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "activeOnly",
                    Value = activeOnly ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_pascode_sp_searchResult>("EXEC @returnValue = [dbo].[core_pascode_sp_search] @pascode = @pascode, @longName = @longName, @activeOnly = @activeOnly", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<int> core_pascode_sp_SetDefalutChainAsync(int? unitId, string? unitPasCode, int? userId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "unitId",
                    Value = unitId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "unitPasCode",
                    Size = 4,
                    Value = unitPasCode ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_pascode_sp_SetDefalutChain] @unitId = @unitId, @unitPasCode = @unitPasCode, @userId = @userId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<int> core_pascode_sp_updateAsync(int? cS_ID, string? lONG_NAME, string? uNIT_NBR, string? uNIT_KIND, string? uNIT_TYPE, string? uNIT_DET, string? uIC, string? cS_LEVEL, int? cS_ID_PARENT, int? gAINING_COMMAND_CS_ID, string? pAS_CODE, string? bASE_CODE, string? cS_OPER_TYPE, string? tIME_ZONE, string? cOMPONENT, string? gEO_LOC, string? pHYS_EXAM_YN, string? sCHEDULING_YN, string? aDDRESS1, string? aDDRESS2, string? cITY, string? cOUNTRY, string? sTATE, string? pOSTAL_CODE, string? e_MAIL, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "CS_ID",
                    Value = cS_ID ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "LONG_NAME",
                    Size = 200,
                    Value = lONG_NAME ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UNIT_NBR",
                    Size = 8,
                    Value = uNIT_NBR ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UNIT_KIND",
                    Size = 10,
                    Value = uNIT_KIND ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UNIT_TYPE",
                    Size = 4,
                    Value = uNIT_TYPE ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UNIT_DET",
                    Size = 8,
                    Value = uNIT_DET ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UIC",
                    Size = 12,
                    Value = uIC ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CS_LEVEL",
                    Size = 20,
                    Value = cS_LEVEL ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CS_ID_PARENT",
                    Value = cS_ID_PARENT ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "GAINING_COMMAND_CS_ID",
                    Value = gAINING_COMMAND_CS_ID ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PAS_CODE",
                    Size = 8,
                    Value = pAS_CODE ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BASE_CODE",
                    Size = 4,
                    Value = bASE_CODE ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CS_OPER_TYPE",
                    Size = 4,
                    Value = cS_OPER_TYPE ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TIME_ZONE",
                    Size = 6,
                    Value = tIME_ZONE ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "COMPONENT",
                    Size = 20,
                    Value = cOMPONENT ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GEO_LOC",
                    Size = 8,
                    Value = gEO_LOC ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PHYS_EXAM_YN",
                    Size = 2,
                    Value = pHYS_EXAM_YN ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SCHEDULING_YN",
                    Size = 2,
                    Value = sCHEDULING_YN ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ADDRESS1",
                    Size = 200,
                    Value = aDDRESS1 ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ADDRESS2",
                    Size = 200,
                    Value = aDDRESS2 ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CITY",
                    Size = 60,
                    Value = cITY ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "COUNTRY",
                    Size = 80,
                    Value = cOUNTRY ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "STATE",
                    Size = 4,
                    Value = sTATE ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "POSTAL_CODE",
                    Size = 20,
                    Value = pOSTAL_CODE ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "E_MAIL",
                    Size = 80,
                    Value = e_MAIL ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_pascode_sp_update] @CS_ID = @CS_ID, @LONG_NAME = @LONG_NAME, @UNIT_NBR = @UNIT_NBR, @UNIT_KIND = @UNIT_KIND, @UNIT_TYPE = @UNIT_TYPE, @UNIT_DET = @UNIT_DET, @UIC = @UIC, @CS_LEVEL = @CS_LEVEL, @CS_ID_PARENT = @CS_ID_PARENT, @GAINING_COMMAND_CS_ID = @GAINING_COMMAND_CS_ID, @PAS_CODE = @PAS_CODE, @BASE_CODE = @BASE_CODE, @CS_OPER_TYPE = @CS_OPER_TYPE, @TIME_ZONE = @TIME_ZONE, @COMPONENT = @COMPONENT, @GEO_LOC = @GEO_LOC, @PHYS_EXAM_YN = @PHYS_EXAM_YN, @SCHEDULING_YN = @SCHEDULING_YN, @ADDRESS1 = @ADDRESS1, @ADDRESS2 = @ADDRESS2, @CITY = @CITY, @COUNTRY = @COUNTRY, @STATE = @STATE, @POSTAL_CODE = @POSTAL_CODE, @E_MAIL = @E_MAIL", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<int> core_pascode_sp_UpdateReportingAsync(int? userId, string? reporting, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "reporting",
                    Value = reporting ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NText,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_pascode_sp_UpdateReporting] @userId = @userId, @reporting = @reporting", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_pascode_sp_ValidationResult>> core_pascode_sp_ValidationAsync(string? pascode, OutputParameter<bool?> valid, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parametervalid = new SqlParameter
        {
            ParameterName = "valid",
            Direction = ParameterDirection.InputOutput,
            Value = valid?.Value ?? Convert.DBNull,
            SqlDbType = SqlDbType.Bit,
        };
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "pascode",
                    Size = 8,
                    Value = pascode ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parametervalid,
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_pascode_sp_ValidationResult>("EXEC @returnValue = [dbo].[core_pascode_sp_Validation] @pascode = @pascode, @valid = @valid OUTPUT", sqlParameters, cancellationToken);

        valid?.SetValue(parametervalid.Value);
        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_pascodes_GetAllUserPasCodesResult>> core_pascodes_GetAllUserPasCodesAsync(string? chainType, int? adminUserID, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "ChainType",
                    Size = 20,
                    Value = chainType ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "adminUserID",
                    Value = adminUserID ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_pascodes_GetAllUserPasCodesResult>("EXEC @returnValue = [dbo].[core_pascodes_GetAllUserPasCodes] @ChainType = @ChainType, @adminUserID = @adminUserID", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_pascodes_GetChildUnitsResult>> core_pascodes_GetChildUnitsAsync(int? parentCS, string? chainType, int? userUnit, int? adminUserID, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "parentCS",
                    Value = parentCS ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ChainType",
                    Size = 20,
                    Value = chainType ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "userUnit",
                    Value = userUnit ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "adminUserID",
                    Value = adminUserID ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_pascodes_GetChildUnitsResult>("EXEC @returnValue = [dbo].[core_pascodes_GetChildUnits] @parentCS = @parentCS, @ChainType = @ChainType, @userUnit = @userUnit, @adminUserID = @adminUserID", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_pascodes_GetChildUnits_AdminResult>> core_pascodes_GetChildUnits_AdminAsync(int? parentCS, string? chainType, int? userUnit, int? adminUserID, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "parentCS",
                    Value = parentCS ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ChainType",
                    Size = 20,
                    Value = chainType ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "userUnit",
                    Value = userUnit ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "adminUserID",
                    Value = adminUserID ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_pascodes_GetChildUnits_AdminResult>("EXEC @returnValue = [dbo].[core_pascodes_GetChildUnits_Admin] @parentCS = @parentCS, @ChainType = @ChainType, @userUnit = @userUnit, @adminUserID = @adminUserID", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_pascodes_GetParentChainResult>> core_pascodes_GetParentChainAsync(int? childCS, int? viewType, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "childCS",
                    Value = childCS ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ViewType",
                    Value = viewType ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_pascodes_GetParentChainResult>("EXEC @returnValue = [dbo].[core_pascodes_GetParentChain] @childCS = @childCS, @ViewType = @ViewType", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_pascodes_GetParentUnitsResult>> core_pascodes_GetParentUnitsAsync(string? childPasCode, string? chainType, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "childPasCode",
                    Size = 10,
                    Value = childPasCode ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ChainType",
                    Size = 20,
                    Value = chainType ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_pascodes_GetParentUnitsResult>("EXEC @returnValue = [dbo].[core_pascodes_GetParentUnits] @childPasCode = @childPasCode, @ChainType = @ChainType", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_Permission_GetByWorkflowResult>> core_Permission_GetByWorkflowAsync(int? groupId, int? workflowId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "groupId",
                    Value = groupId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "workflowId",
                    Value = workflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_Permission_GetByWorkflowResult>("EXEC @returnValue = [dbo].[core_Permission_GetByWorkflow] @groupId = @groupId, @workflowId = @workflowId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<int> core_permissions_sp_DeleteAsync(int? permId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "permId",
                    Value = permId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_permissions_sp_Delete] @permId = @permId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves all permissions from the system.
    /// </summary>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list of all permissions in the system.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_permissions_sp_GetAll] stored procedure to retrieve all permissions available in the system.
    /// </remarks>
    public async virtual Task<List<core_permissions_sp_GetAllResult>> core_permissions_sp_GetAllAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_permissions_sp_GetAllResult>("EXEC @returnValue = [dbo].[core_permissions_sp_GetAll]", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves all pending permission requests for a specific user.
    /// </summary>
    /// <param name="userId">The identifier of the user to retrieve pending requests for.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list of pending permission requests for the specified user.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_permissions_sp_GetAllPendingRequests] stored procedure to retrieve all pending permission requests that require approval for the specified user.
    /// </remarks>
    public async virtual Task<List<core_permissions_sp_GetAllPendingRequestsResult>> core_permissions_sp_GetAllPendingRequestsAsync(int? userId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_permissions_sp_GetAllPendingRequestsResult>("EXEC @returnValue = [dbo].[core_permissions_sp_GetAllPendingRequests] @userId = @userId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves permissions for a specific user group.
    /// </summary>
    /// <param name="groupId">The identifier of the user group to retrieve permissions for.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list of permissions associated with the specified user group.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_permissions_sp_GetByGroup] stored procedure to retrieve all permissions assigned to a specific user group.
    /// </remarks>
    public async virtual Task<List<core_permissions_sp_GetByGroupResult>> core_permissions_sp_GetByGroupAsync(short? groupId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "groupId",
                    Value = groupId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_permissions_sp_GetByGroupResult>("EXEC @returnValue = [dbo].[core_permissions_sp_GetByGroup] @groupId = @groupId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves permissions for a specific user by their identifier.
    /// </summary>
    /// <param name="userId">The identifier of the user to retrieve permissions for.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list of permissions assigned to the specified user.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_permissions_sp_GetByUserId] stored procedure to retrieve all permissions directly assigned to a specific user.
    /// </remarks>
    public async virtual Task<List<core_permissions_sp_GetByUserIdResult>> core_permissions_sp_GetByUserIdAsync(int? userId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_permissions_sp_GetByUserIdResult>("EXEC @returnValue = [dbo].[core_permissions_sp_GetByUserId] @userId = @userId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves permissions for a specific user by their username.
    /// </summary>
    /// <param name="userName">The username of the user to retrieve permissions for.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list of permissions assigned to the specified user.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_permissions_sp_GetByUserName] stored procedure to retrieve all permissions assigned to a user by their username.
    /// </remarks>
    public async virtual Task<List<core_permissions_sp_GetByUserNameResult>> core_permissions_sp_GetByUserNameAsync(string? userName, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "userName",
                    Size = 100,
                    Value = userName ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_permissions_sp_GetByUserNameResult>("EXEC @returnValue = [dbo].[core_permissions_sp_GetByUserName] @userName = @userName", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves the document group identifier associated with a specific permission.
    /// </summary>
    /// <param name="permId">The identifier of the permission to retrieve the document group for.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list containing the document group identifier associated with the permission.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_permissions_sp_GetDocGroupIdByPermId] stored procedure to retrieve the document group that is linked to a specific permission.
    /// </remarks>
    public async virtual Task<List<core_permissions_sp_GetDocGroupIdByPermIdResult>> core_permissions_sp_GetDocGroupIdByPermIdAsync(int? permId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "permId",
                    Value = permId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_permissions_sp_GetDocGroupIdByPermIdResult>("EXEC @returnValue = [dbo].[core_permissions_sp_GetDocGroupIdByPermId] @permId = @permId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves all group permissions for a specific user group.
    /// </summary>
    /// <param name="groupId">The identifier of the user group to retrieve permissions for.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list of all permissions associated with the specified user group.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_permissions_sp_GetGroupPermissions] stored procedure to retrieve all permissions that are assigned to a specific user group.
    /// </remarks>
    public async virtual Task<List<core_permissions_sp_GetGroupPermissionsResult>> core_permissions_sp_GetGroupPermissionsAsync(short? groupId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "groupId",
                    Value = groupId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_permissions_sp_GetGroupPermissionsResult>("EXEC @returnValue = [dbo].[core_permissions_sp_GetGroupPermissions] @groupId = @groupId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves all user-assignable permissions.
    /// </summary>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list of all permissions that can be assigned to users.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_permissions_sp_GetUserAssignable] stored procedure to retrieve all permissions that are available for assignment to users.
    /// </remarks>
    public async virtual Task<List<core_permissions_sp_GetUserAssignableResult>> core_permissions_sp_GetUserAssignableAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_permissions_sp_GetUserAssignableResult>("EXEC @returnValue = [dbo].[core_permissions_sp_GetUserAssignable]", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves all permissions for a specific user.
    /// </summary>
    /// <param name="userId">The identifier of the user to retrieve permissions for.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list of all permissions assigned to the specified user.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_permissions_sp_GetUserPerms] stored procedure to retrieve all permissions that are assigned to a specific user, including both direct and group-based permissions.
    /// </remarks>
    public async virtual Task<List<core_permissions_sp_GetUserPermsResult>> core_permissions_sp_GetUserPermsAsync(int? userId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_permissions_sp_GetUserPermsResult>("EXEC @returnValue = [dbo].[core_permissions_sp_GetUserPerms] @userId = @userId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Grants a specific permission to a user.
    /// </summary>
    /// <param name="userId">The identifier of the user to grant the permission to.</param>
    /// <param name="permId">The identifier of the permission to grant.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>The result of the permission grant operation.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_permissions_sp_GrantUserPermission] stored procedure to assign a specific permission directly to a user.
    /// </remarks>
    public async virtual Task<int> core_permissions_sp_GrantUserPermissionAsync(int? userId, short? permId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "permId",
                    Value = permId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_permissions_sp_GrantUserPermission] @userId = @userId, @permId = @permId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Inserts a new permission into the system.
    /// </summary>
    /// <param name="name">The name of the new permission.</param>
    /// <param name="description">The description of the new permission.</param>
    /// <param name="exclude">Whether the permission should be excluded from certain operations.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>The result of the permission insertion operation.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_permissions_sp_Insert] stored procedure to create a new permission in the system with the specified name, description, and exclusion status.
    /// </remarks>
    public async virtual Task<int> core_permissions_sp_InsertAsync(string? name, string? description, bool? exclude, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "name",
                    Size = 50,
                    Value = name ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 100,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "exclude",
                    Value = exclude ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_permissions_sp_Insert] @name = @name, @description = @description, @exclude = @exclude", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Inserts a document group association for a permission.
    /// </summary>
    /// <param name="permId">The identifier of the permission to associate with the document group.</param>
    /// <param name="docGroupId">The identifier of the document group to associate with the permission.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>The result of the document group insertion operation.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_permissions_sp_InsertDocGroup] stored procedure to create an association between a permission and a document group.
    /// </remarks>
    public async virtual Task<int> core_permissions_sp_InsertDocGroupAsync(int? permId, int? docGroupId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "permId",
                    Value = permId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "docGroupId",
                    Value = docGroupId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_permissions_sp_InsertDocGroup] @permId = @permId, @docGroupId = @docGroupId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Inserts a permission request for a user.
    /// </summary>
    /// <param name="userId">The identifier of the user requesting the permission.</param>
    /// <param name="permId">The identifier of the permission being requested.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>The result of the permission request insertion operation.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_permissions_sp_insertRequest] stored procedure to create a permission request that requires approval from an administrator.
    /// </remarks>
    public async virtual Task<int> core_permissions_sp_insertRequestAsync(int? userId, short? permId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "permId",
                    Value = permId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_permissions_sp_insertRequest] @userId = @userId, @permId = @permId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Searches for users associated with a specific permission.
    /// </summary>
    /// <param name="permissionId">The identifier of the permission to search users for.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>A list of users who have the specified permission.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_permissions_sp_searchUsers] stored procedure to find all users who are assigned a specific permission.
    /// </remarks>
    public async virtual Task<List<core_permissions_sp_searchUsersResult>> core_permissions_sp_searchUsersAsync(int? permissionId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "permissionId",
                    Value = permissionId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_permissions_sp_searchUsersResult>("EXEC @returnValue = [dbo].[core_permissions_sp_searchUsers] @permissionId = @permissionId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Updates an existing permission in the system.
    /// </summary>
    /// <param name="permId">The identifier of the permission to update.</param>
    /// <param name="name">The new name for the permission.</param>
    /// <param name="description">The new description for the permission.</param>
    /// <param name="exclude">The new exclusion status for the permission.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>The result of the permission update operation.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_permissions_sp_Update] stored procedure to modify an existing permission with new name, description, and exclusion status.
    /// </remarks>
    public async virtual Task<int> core_permissions_sp_UpdateAsync(int? permId, string? name, string? description, bool? exclude, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "permId",
                    Value = permId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "name",
                    Size = 50,
                    Value = name ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 100,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "exclude",
                    Value = exclude ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_permissions_sp_Update] @permId = @permId, @name = @name, @description = @description, @exclude = @exclude", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Updates the document group association for a permission.
    /// </summary>
    /// <param name="oldPermId">The old permission identifier.</param>
    /// <param name="oldDocGroupId">The old document group identifier.</param>
    /// <param name="newPermId">The new permission identifier.</param>
    /// <param name="newDocGroupId">The new document group identifier.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>The result of the document group update operation.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_permissions_sp_UpdateDocGroup] stored procedure to update the association between a permission and a document group by replacing the old association with a new one.
    /// </remarks>
    public async virtual Task<int> core_permissions_sp_UpdateDocGroupAsync(int? oldPermId, int? oldDocGroupId, int? newPermId, int? newDocGroupId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "oldPermId",
                    Value = oldPermId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "oldDocGroupId",
                    Value = oldDocGroupId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "newPermId",
                    Value = newPermId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "newDocGroupId",
                    Value = newDocGroupId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_permissions_sp_UpdateDocGroup] @oldPermId = @oldPermId, @oldDocGroupId = @oldDocGroupId, @newPermId = @newPermId, @newDocGroupId = @newDocGroupId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Updates permission requests using XML data.
    /// </summary>
    /// <param name="xmlDocument">The XML document containing the permission request updates.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>The result of the permission request update operation.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_permissions_sp_updatePermissionRequests] stored procedure to update multiple permission requests using XML data for bulk operations.
    /// </remarks>
    public async virtual Task<int> core_permissions_sp_updatePermissionRequestsAsync(string? xmlDocument, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "XmlDocument",
                    Value = xmlDocument ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Text,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_permissions_sp_updatePermissionRequests] @XmlDocument = @XmlDocument", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Updates user permissions using XML data.
    /// </summary>
    /// <param name="userId">The identifier of the user whose permissions are being updated.</param>
    /// <param name="xmlDocument">The XML document containing the permission updates.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>The result of the user permission update operation.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_permissions_sp_UpdateUserPermissions] stored procedure to update all permissions for a specific user using XML data for bulk operations.
    /// </remarks>
    public async virtual Task<int> core_permissions_sp_UpdateUserPermissionsAsync(short? userId, string? xmlDocument, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "XmlDocument",
                    Value = xmlDocument ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Text,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_permissions_sp_UpdateUserPermissions] @userId = @userId, @XmlDocument = @XmlDocument", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Checks if a user has a specific permission.
    /// </summary>
    /// <param name="userId">The identifier of the user to check permissions for.</param>
    /// <param name="permName">The name of the permission to check.</param>
    /// <param name="hasPerm">Output parameter that returns whether the user has the permission.</param>
    /// <param name="returnValue">Output parameter that returns the stored procedure execution result code.</param>
    /// <param name="cancellationToken">Optional cancellation token to cancel the asynchronous operation.</param>
    /// <returns>The result of the permission check operation.</returns>
    /// <remarks>
    /// This method executes the [dbo].[core_permissions_sp_UserHasPermission] stored procedure to verify if a user has been granted a specific permission by name.
    /// </remarks>
    public async virtual Task<int> core_permissions_sp_UserHasPermissionAsync(int? userId, string? permName, OutputParameter<bool?> hasPerm, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterhasPerm = new SqlParameter
        {
            ParameterName = "hasPerm",
            Direction = ParameterDirection.InputOutput,
            Value = hasPerm?.Value ?? Convert.DBNull,
            SqlDbType = SqlDbType.Bit,
        };
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "permName",
                    Size = 50,
                    Value = permName ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterhasPerm,
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_permissions_sp_UserHasPermission] @userId = @userId, @permName = @permName, @hasPerm = @hasPerm OUTPUT", sqlParameters, cancellationToken);

        hasPerm?.SetValue(parameterhasPerm.Value);
        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_role_sp_GetAllResult>> core_role_sp_GetAllAsync(int? userId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_role_sp_GetAllResult>("EXEC @returnValue = [dbo].[core_role_sp_GetAll] @userId = @userId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_role_sp_GetPasCodesByRoleIdResult>> core_role_sp_GetPasCodesByRoleIdAsync(int? roleId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "roleId",
                    Value = roleId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_role_sp_GetPasCodesByRoleIdResult>("EXEC @returnValue = [dbo].[core_role_sp_GetPasCodesByRoleId] @roleId = @roleId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_role_sp_GetRolesForAdminResult>> core_role_sp_GetRolesForAdminAsync(int? userId, int? adminUserId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "adminUserId",
                    Value = adminUserId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_role_sp_GetRolesForAdminResult>("EXEC @returnValue = [dbo].[core_role_sp_GetRolesForAdmin] @userId = @userId, @adminUserId = @adminUserId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_role_sp_UpdatePasCodesResult>> core_role_sp_UpdatePasCodesAsync(int? roleId, string? xmlData, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "roleId",
                    Value = roleId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "xmlData",
                    Value = xmlData ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Text,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_role_sp_UpdatePasCodesResult>("EXEC @returnValue = [dbo].[core_role_sp_UpdatePasCodes] @roleId = @roleId, @xmlData = @xmlData", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<int> core_role_sp_UpdateUserGroupAsync(int? roleId, byte? groupId, byte? status, int? userId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "roleId",
                    Value = roleId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "groupId",
                    Value = groupId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Value = status ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_role_sp_UpdateUserGroup] @roleId = @roleId, @groupId = @groupId, @status = @status, @userId = @userId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<int> core_rule_sp_DeleteOptionRuleAsync(int? wsrid, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "wsrid",
                    Value = wsrid ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_rule_sp_DeleteOptionRule] @wsrid = @wsrid", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<int> core_rule_sp_DeleteRuleAsync(byte? ruleId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "ruleId",
                    Value = ruleId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_rule_sp_DeleteRule] @ruleId = @ruleId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_rule_sp_InsertRuleResult>> core_rule_sp_InsertRuleAsync(byte? workFlow, byte? ruleType, string? name, string? prompt, bool? active, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "workFlow",
                    Value = workFlow ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "ruleType",
                    Value = ruleType ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "name",
                    Size = 50,
                    Value = name ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "prompt",
                    Size = 50,
                    Value = prompt ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "active",
                    Value = active ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_rule_sp_InsertRuleResult>("EXEC @returnValue = [dbo].[core_rule_sp_InsertRule] @workFlow = @workFlow, @ruleType = @ruleType, @name = @name, @prompt = @prompt, @active = @active", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_rule_sp_SelectOptionRuleResult>> core_rule_sp_SelectOptionRuleAsync(int? wsoid, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "wsoid",
                    Value = wsoid ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_rule_sp_SelectOptionRuleResult>("EXEC @returnValue = [dbo].[core_rule_sp_SelectOptionRule] @wsoid = @wsoid", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<int> core_rules_sp_InsertOptionRuleAsync(int? optionId, byte? ruleId, string? data, bool? chkAll, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "optionId",
                    Value = optionId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ruleId",
                    Value = ruleId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "data",
                    Size = 500,
                    Value = data ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "chkAll",
                    Value = chkAll ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_rules_sp_InsertOptionRule] @optionId = @optionId, @ruleId = @ruleId, @data = @data, @chkAll = @chkAll", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_rwoa_GetRecentResult>> core_rwoa_GetRecentAsync(int? workflow, int? refId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "workflow",
                    Value = workflow ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_rwoa_GetRecentResult>("EXEC @returnValue = [dbo].[core_rwoa_GetRecent] @workflow = @workflow, @refId = @refId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_sarc_sp_GetAppealCountResult>> core_sarc_sp_GetAppealCountAsync(int? initialId, int? initialWorkflow, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "initialId",
                    Value = initialId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "initialWorkflow",
                    Value = initialWorkflow ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_sarc_sp_GetAppealCountResult>("EXEC @returnValue = [dbo].[core_sarc_sp_GetAppealCount] @initialId = @initialId, @initialWorkflow = @initialWorkflow", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_sarc_sp_GetAppealIdResult>> core_sarc_sp_GetAppealIdAsync(int? refId, int? workflow, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "workflow",
                    Value = workflow ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_sarc_sp_GetAppealIdResult>("EXEC @returnValue = [dbo].[core_sarc_sp_GetAppealId] @refId = @refId, @workflow = @workflow", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_sarc_sp_GetAppealRequestsResult>> core_sarc_sp_GetAppealRequestsAsync(int? userId, bool? sarc, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sarc",
                    Value = sarc ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_sarc_sp_GetAppealRequestsResult>("EXEC @returnValue = [dbo].[core_sarc_sp_GetAppealRequests] @userId = @userId, @sarc = @sarc", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_sarc_sp_GetCompletedAPsResult>> core_sarc_sp_GetCompletedAPsAsync(int? userId, bool? sarc, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sarc",
                    Value = sarc ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_sarc_sp_GetCompletedAPsResult>("EXEC @returnValue = [dbo].[core_sarc_sp_GetCompletedAPs] @userId = @userId, @sarc = @sarc", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_sarc_sp_GetHasAppealResult>> core_sarc_sp_GetHasAppealAsync(int? refId, int? workflowId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "workflowId",
                    Value = workflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_sarc_sp_GetHasAppealResult>("EXEC @returnValue = [dbo].[core_sarc_sp_GetHasAppeal] @refId = @refId, @workflowId = @workflowId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_sarc_sp_GetHasAppeal_PostProcessResult>> core_sarc_sp_GetHasAppeal_PostProcessAsync(int? appealId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "appealId",
                    Value = appealId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_sarc_sp_GetHasAppeal_PostProcessResult>("EXEC @returnValue = [dbo].[core_sarc_sp_GetHasAppeal_PostProcess] @appealId = @appealId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_sarc_sp_GetOpenCasesResult>> core_sarc_sp_GetOpenCasesAsync(int? userId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_sarc_sp_GetOpenCasesResult>("EXEC @returnValue = [dbo].[core_sarc_sp_GetOpenCases] @userId = @userId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_sarc_sp_GetOpenCasesCountResult>> core_sarc_sp_GetOpenCasesCountAsync(int? userId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_sarc_sp_GetOpenCasesCountResult>("EXEC @returnValue = [dbo].[core_sarc_sp_GetOpenCasesCount] @userId = @userId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_sarc_sp_GetPostCompletionResult>> core_sarc_sp_GetPostCompletionAsync(int? sarcId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "sarcId",
                    Value = sarcId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_sarc_sp_GetPostCompletionResult>("EXEC @returnValue = [dbo].[core_sarc_sp_GetPostCompletion] @sarcId = @sarcId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_sarc_sp_GetPostCompletionAppealCasesCountResult>> core_sarc_sp_GetPostCompletionAppealCasesCountAsync(int? userId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_sarc_sp_GetPostCompletionAppealCasesCountResult>("EXEC @returnValue = [dbo].[core_sarc_sp_GetPostCompletionAppealCasesCount] @userId = @userId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_sarc_sp_GetPostCompletionCasesCountResult>> core_sarc_sp_GetPostCompletionCasesCountAsync(int? userId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_sarc_sp_GetPostCompletionCasesCountResult>("EXEC @returnValue = [dbo].[core_sarc_sp_GetPostCompletionCasesCount] @userId = @userId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_sarc_sp_PostAppealCompletionSearchResult>> core_sarc_sp_PostAppealCompletionSearchAsync(string? caseID, string? ssn, string? name, int? userId, byte? rptView, string? compo, int? maxCount, byte? moduleId, int? unitId, bool? sarcpermission, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "caseID",
                    Size = 50,
                    Value = caseID ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ssn",
                    Size = 10,
                    Value = ssn ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "name",
                    Size = 10,
                    Value = name ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rptView",
                    Value = rptView ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "compo",
                    Size = 10,
                    Value = compo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "maxCount",
                    Value = maxCount ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "moduleId",
                    Value = moduleId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "unitId",
                    Value = unitId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sarcpermission",
                    Value = sarcpermission ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_sarc_sp_PostAppealCompletionSearchResult>("EXEC @returnValue = [dbo].[core_sarc_sp_PostAppealCompletionSearch] @caseID = @caseID, @ssn = @ssn, @name = @name, @userId = @userId, @rptView = @rptView, @compo = @compo, @maxCount = @maxCount, @moduleId = @moduleId, @unitId = @unitId, @sarcpermission = @sarcpermission", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_sarc_sp_PostCompletionSearchResult>> core_sarc_sp_PostCompletionSearchAsync(int? userId, string? caseID, string? ssn, string? name, byte? rptView, string? compo, int? unitId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "caseID",
                    Size = 50,
                    Value = caseID ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ssn",
                    Size = 10,
                    Value = ssn ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "name",
                    Size = 10,
                    Value = name ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "rptView",
                    Value = rptView ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "compo",
                    Size = 10,
                    Value = compo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "unitId",
                    Value = unitId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_sarc_sp_PostCompletionSearchResult>("EXEC @returnValue = [dbo].[core_sarc_sp_PostCompletionSearch] @userId = @userId, @caseID = @caseID, @ssn = @ssn, @name = @name, @rptView = @rptView, @compo = @compo, @unitId = @unitId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_sarc_sp_SearchResult>> core_sarc_sp_SearchAsync(int? userId, string? caseID, string? ssn, string? name, byte? rptView, string? compo, int? statusId, int? unitId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "caseID",
                    Size = 50,
                    Value = caseID ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ssn",
                    Size = 10,
                    Value = ssn ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "name",
                    Size = 10,
                    Value = name ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "rptView",
                    Value = rptView ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "compo",
                    Size = 10,
                    Value = compo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "statusId",
                    Value = statusId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "unitId",
                    Value = unitId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_sarc_sp_SearchResult>("EXEC @returnValue = [dbo].[core_sarc_sp_Search] @userId = @userId, @caseID = @caseID, @ssn = @ssn, @name = @name, @rptView = @rptView, @compo = @compo, @statusId = @statusId, @unitId = @unitId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<int> core_sarc_sp_UpdateAppealPostCompletionAsync(int? appealId, string? appealStreet, string? appealCity, string? appealState, string? appealZip, string? appealCountry, DateOnly? memberNotificationDate, string? email, string? helpExtensionNumber, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "appealId",
                    Value = appealId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "appealStreet",
                    Size = 400,
                    Value = appealStreet ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "appealCity",
                    Size = 200,
                    Value = appealCity ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "appealState",
                    Size = 100,
                    Value = appealState ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "appealZip",
                    Size = 200,
                    Value = appealZip ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "appealCountry",
                    Size = 100,
                    Value = appealCountry ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "memberNotificationDate",
                    Value = memberNotificationDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "email",
                    Size = 200,
                    Value = email ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "HelpExtensionNumber",
                    Size = 50,
                    Value = helpExtensionNumber ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_sarc_sp_UpdateAppealPostCompletion] @appealId = @appealId, @appealStreet = @appealStreet, @appealCity = @appealCity, @appealState = @appealState, @appealZip = @appealZip, @appealCountry = @appealCountry, @memberNotificationDate = @memberNotificationDate, @email = @email, @HelpExtensionNumber = @HelpExtensionNumber", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<int> core_sarc_sp_UpdatePostCompletionAsync(int? sarcId, bool? memberNotified, DateTime? memberNotoficationDate, string? helpExtensionNumber, string? appealStreet, string? appealCity, string? appealState, string? appealZip, string? appealCountry, string? email, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "sarcId",
                    Value = sarcId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "memberNotified",
                    Value = memberNotified ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "memberNotoficationDate",
                    Value = memberNotoficationDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "helpExtensionNumber",
                    Size = 100,
                    Value = helpExtensionNumber ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "appealStreet",
                    Size = 400,
                    Value = appealStreet ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "appealCity",
                    Size = 200,
                    Value = appealCity ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "appealState",
                    Size = 100,
                    Value = appealState ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "appealZip",
                    Size = 200,
                    Value = appealZip ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "appealCountry",
                    Size = 100,
                    Value = appealCountry ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "email",
                    Size = 200,
                    Value = email ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_sarc_sp_UpdatePostCompletion] @sarcId = @sarcId, @memberNotified = @memberNotified, @memberNotoficationDate = @memberNotoficationDate, @helpExtensionNumber = @helpExtensionNumber, @appealStreet = @appealStreet, @appealCity = @appealCity, @appealState = @appealState, @appealZip = @appealZip, @appealCountry = @appealCountry, @email = @email", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_sc_sp_GetRWAssociableSpecialCasesResult>> core_sc_sp_GetRWAssociableSpecialCasesAsync(string? member_ssn, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "member_ssn",
                    Size = 12,
                    Value = member_ssn ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_sc_sp_GetRWAssociableSpecialCasesResult>("EXEC @returnValue = [dbo].[core_sc_sp_GetRWAssociableSpecialCases] @member_ssn = @member_ssn", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_Signature_sp_GetResult>> core_Signature_sp_GetAsync(int? refid, int? workflow, int? ptype, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "refid",
                    Value = refid ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "workflow",
                    Value = workflow ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ptype",
                    Value = ptype ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_Signature_sp_GetResult>("EXEC @returnValue = [dbo].[core_Signature_sp_Get] @refid = @refid, @workflow = @workflow, @ptype = @ptype", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<int> core_Signature_sp_InsertAsync(int? refid, int? workflow, string? signature, string? sig_date, int? userId, int? ptype, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "refid",
                    Value = refid ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "workflow",
                    Value = workflow ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "signature",
                    Size = -1,
                    Value = signature ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sig_date",
                    Size = -1,
                    Value = sig_date ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ptype",
                    Value = ptype ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_Signature_sp_Insert] @refid = @refid, @workflow = @workflow, @signature = @signature, @sig_date = @sig_date, @userId = @userId, @ptype = @ptype", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<int> core_SignatureMetaData_sp_AddAsync(int? refId, int? workflowId, int? workStatus, byte? userGroup, int? userId, DateTime? date, string? nameAndRank, string? title, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "workflowId",
                    Value = workflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "workStatus",
                    Value = workStatus ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "userGroup",
                    Value = userGroup ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "date",
                    Value = date ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "NameAndRank",
                    Size = 100,
                    Value = nameAndRank ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Title",
                    Size = 100,
                    Value = title ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_SignatureMetaData_sp_Add] @refId = @refId, @workflowId = @workflowId, @workStatus = @workStatus, @userGroup = @userGroup, @userId = @userId, @date = @date, @NameAndRank = @NameAndRank, @Title = @Title", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<int> core_SignatureMetaData_sp_DeleteAsync(int? refId, int? workflowId, int? workStatus, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "workflowId",
                    Value = workflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "workStatus",
                    Value = workStatus ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_SignatureMetaData_sp_Delete] @refId = @refId, @workflowId = @workflowId, @workStatus = @workStatus", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_SignatureMetaData_sp_GetAllResult>> core_SignatureMetaData_sp_GetAllAsync(int? refId, int? workflowId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "workflowId",
                    Value = workflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_SignatureMetaData_sp_GetAllResult>("EXEC @returnValue = [dbo].[core_SignatureMetaData_sp_GetAll] @refId = @refId, @workflowId = @workflowId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves signature metadata by user group for a specific reference, workflow, and group.
    /// </summary>
    /// <param name="refId">The reference identifier for the signature metadata.</param>
    /// <param name="workflowId">The workflow identifier.</param>
    /// <param name="groupId">The group identifier.</param>
    /// <param name="returnValue">Output parameter for the stored procedure return value.</param>
    /// <param name="cancellationToken">Cancellation token for async operation.</param>
    /// <returns>A list of core_SignatureMetaData_sp_GetByUserGroupResult objects.</returns>
    /// <remarks>Executes [dbo].[core_SignatureMetaData_sp_GetByUserGroup] stored procedure.</remarks>
    public async virtual Task<List<core_SignatureMetaData_sp_GetByUserGroupResult>> core_SignatureMetaData_sp_GetByUserGroupAsync(int? refId, int? workflowId, int? groupId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "workflowId",
                    Value = workflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "groupId",
                    Value = groupId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_SignatureMetaData_sp_GetByUserGroupResult>("EXEC @returnValue = [dbo].[core_SignatureMetaData_sp_GetByUserGroup] @refId = @refId, @workflowId = @workflowId, @groupId = @groupId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves signature metadata by work status for a specific reference, workflow, and work status.
    /// </summary>
    /// <param name="refId">The reference identifier for the signature metadata.</param>
    /// <param name="workflowId">The workflow identifier.</param>
    /// <param name="workStatus">The work status identifier.</param>
    /// <param name="returnValue">Output parameter for the stored procedure return value.</param>
    /// <param name="cancellationToken">Cancellation token for async operation.</param>
    /// <returns>A list of core_SignatureMetaData_sp_GetByWorkStatusResult objects.</returns>
    /// <remarks>Executes [dbo].[core_SignatureMetaData_sp_GetByWorkStatus] stored procedure.</remarks>
    public async virtual Task<List<core_SignatureMetaData_sp_GetByWorkStatusResult>> core_SignatureMetaData_sp_GetByWorkStatusAsync(int? refId, int? workflowId, int? workStatus, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "workflowId",
                    Value = workflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "workStatus",
                    Value = workStatus ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_SignatureMetaData_sp_GetByWorkStatusResult>("EXEC @returnValue = [dbo].[core_SignatureMetaData_sp_GetByWorkStatus] @refId = @refId, @workflowId = @workflowId, @workStatus = @workStatus", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves IRILO associable special cases for a given member SSN.
    /// </summary>
    /// <param name="member_ssn">The member's SSN identifier.</param>
    /// <param name="returnValue">Output parameter for the stored procedure return value.</param>
    /// <param name="cancellationToken">Cancellation token for async operation.</param>
    /// <returns>A list of core_sp_GetIRILOAssociableSpecialCasesResult objects.</returns>
    /// <remarks>Executes [dbo].[core_sp_GetIRILOAssociableSpecialCases] stored procedure.</remarks>
    public async virtual Task<List<core_sp_GetIRILOAssociableSpecialCasesResult>> core_sp_GetIRILOAssociableSpecialCasesAsync(int? member_ssn, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "member_ssn",
                    Value = member_ssn ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_sp_GetIRILOAssociableSpecialCasesResult>("EXEC @returnValue = [dbo].[core_sp_GetIRILOAssociableSpecialCases] @member_ssn = @member_ssn", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves RW associable special cases for PSCD based on member SSN.
    /// </summary>
    /// <param name="member_ssn">The member's SSN identifier (12 characters).</param>
    /// <param name="returnValue">Output parameter for the stored procedure return value.</param>
    /// <param name="cancellationToken">Cancellation token for async operation.</param>
    /// <returns>A list of core_sp_GetRWAssociableSpecialCasesForPSCDResult objects.</returns>
    /// <remarks>Executes [dbo].[core_sp_GetRWAssociableSpecialCasesForPSCD] stored procedure.</remarks>
    public async virtual Task<List<core_sp_GetRWAssociableSpecialCasesForPSCDResult>> core_sp_GetRWAssociableSpecialCasesForPSCDAsync(string? member_ssn, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "member_ssn",
                    Size = 12,
                    Value = member_ssn ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_sp_GetRWAssociableSpecialCasesForPSCDResult>("EXEC @returnValue = [dbo].[core_sp_GetRWAssociableSpecialCasesForPSCD] @member_ssn = @member_ssn", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_sp_GetUnitTextResult>> core_sp_GetUnitTextAsync(int? cs_id, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "cs_id",
                    Value = cs_id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_sp_GetUnitTextResult>("EXEC @returnValue = [dbo].[core_sp_GetUnitText] @cs_id = @cs_id", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_sp_InitialWorkflowStatusResult>> core_sp_InitialWorkflowStatusAsync(int? compo, int? moduleId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "compo",
                    Value = compo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "moduleId",
                    Value = moduleId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_sp_InitialWorkflowStatusResult>("EXEC @returnValue = [dbo].[core_sp_InitialWorkflowStatus] @compo = @compo, @moduleId = @moduleId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves tracking information by reference ID with optional filtering.
    /// </summary>
    /// <param name="moduleId">The module identifier (tinyint).</param>
    /// <param name="referenceId">The reference identifier.</param>
    /// <param name="showAll">Flag to show all tracking records or filter by current user.</param>
    /// <param name="returnValue">Output parameter for the stored procedure return value.</param>
    /// <param name="cancellationToken">Cancellation token for async operation.</param>
    /// <returns>A list of core_tracking_sp_GetByReferenceIdResult objects.</returns>
    /// <remarks>Executes [dbo].[core_tracking_sp_GetByReferenceId] stored procedure.</remarks>
    public async virtual Task<List<core_tracking_sp_GetByReferenceIdResult>> core_tracking_sp_GetByReferenceIdAsync(byte? moduleId, int? referenceId, bool? showAll, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "moduleId",
                    Value = moduleId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "referenceId",
                    Value = referenceId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "showAll",
                    Value = showAll ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_tracking_sp_GetByReferenceIdResult>("EXEC @returnValue = [dbo].[core_tracking_sp_GetByReferenceId] @moduleId = @moduleId, @referenceId = @referenceId, @showAll = @showAll", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Retrieves tracking information by user ID with optional filtering.
    /// </summary>
    /// <param name="userId">The user identifier.</param>
    /// <param name="showAll">Flag to show all tracking records or filter by current user.</param>
    /// <param name="returnValue">Output parameter for the stored procedure return value.</param>
    /// <param name="cancellationToken">Cancellation token for async operation.</param>
    /// <returns>A list of core_tracking_sp_GetByUserIdResult objects.</returns>
    /// <remarks>Executes [dbo].[core_tracking_sp_GetByUserId] stored procedure.</remarks>
    public async virtual Task<List<core_tracking_sp_GetByUserIdResult>> core_tracking_sp_GetByUserIdAsync(int? userId, bool? showAll, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "showAll",
                    Value = showAll ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_tracking_sp_GetByUserIdResult>("EXEC @returnValue = [dbo].[core_tracking_sp_GetByUserId] @userId = @userId, @showAll = @showAll", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Checks if a user belongs to an attach unit.
    /// </summary>
    /// <param name="userId">The user identifier.</param>
    /// <param name="attachUnit">The attach unit identifier.</param>
    /// <param name="returnValue">Output parameter for the stored procedure return value.</param>
    /// <param name="cancellationToken">Cancellation token for async operation.</param>
    /// <returns>A list of core_user_sp_Belongs_To_AttachResult objects.</returns>
    /// <remarks>Executes [dbo].[core_user_sp_Belongs_To_Attach] stored procedure.</remarks>
    public async virtual Task<List<core_user_sp_Belongs_To_AttachResult>> core_user_sp_Belongs_To_AttachAsync(int? userId, int? attachUnit, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "attachUnit",
                    Value = attachUnit ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_user_sp_Belongs_To_AttachResult>("EXEC @returnValue = [dbo].[core_user_sp_Belongs_To_Attach] @userId = @userId, @attachUnit = @attachUnit", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_user_sp_CopyAccountResult>> core_user_sp_CopyAccountAsync(int? copyFromId, int? userId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "copyFromId",
                    Value = copyFromId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_user_sp_CopyAccountResult>("EXEC @returnValue = [dbo].[core_user_sp_CopyAccount] @copyFromId = @copyFromId, @userId = @userId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Searches member data by SSN, name, and unit.
    /// </summary>
    /// <param name="ssn">Member SSN (partial match supported).</param>
    /// <param name="name">Member name (partial match supported).</param>
    /// <param name="srchUnit">Unit ID to search within.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of core_user_sp_SearchMamberDataResult objects containing member information.</returns>
    /// <remarks>This method executes the stored procedure [dbo].[core_user_sp_SearchMamberData].</remarks>
    public async virtual Task<List<core_user_sp_SearchMamberDataResult>> core_user_sp_SearchMamberDataAsync(string? ssn, string? name, string? srchUnit, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "ssn",
                    Value = ssn ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                    Size = 20,
                },
                new SqlParameter
                {
                    ParameterName = "name",
                    Value = name ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                    Size = 10,
                },
                new SqlParameter
                {
                    ParameterName = "srchUnit",
                    Value = srchUnit ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                    Size = 10,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_user_sp_SearchMamberDataResult>("EXEC @returnValue = [dbo].[core_user_sp_SearchMamberData] @ssn = @ssn, @name = @name, @srchUnit = @srchUnit", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Searches member data by SSN, name, and unit (test version).
    /// </summary>
    /// <param name="ssn">Member SSN (partial match supported).</param>
    /// <param name="name">Member name (partial match supported).</param>
    /// <param name="srchUnit">Unit ID to search within.</param>
    /// <param name="returnValue">Output parameter containing the return value from the stored procedure.</param>
    /// <param name="cancellationToken">A token to cancel the asynchronous operation.</param>
    /// <returns>A list of core_user_sp_SearchMamberData_TestResult objects containing member information.</returns>
    /// <remarks>This method executes the stored procedure [dbo].[core_user_sp_SearchMamberData_Test].</remarks>
    public async virtual Task<List<core_user_sp_SearchMamberData_TestResult>> core_user_sp_SearchMamberData_TestAsync(string? ssn, string? name, string? srchUnit, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "ssn",
                    Value = ssn ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                    Size = 20,
                },
                new SqlParameter
                {
                    ParameterName = "name",
                    Value = name ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                    Size = 10,
                },
                new SqlParameter
                {
                    ParameterName = "srchUnit",
                    Value = srchUnit ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                    Size = 10,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_user_sp_SearchMamberData_TestResult>("EXEC @returnValue = [dbo].[core_user_sp_SearchMamberData_Test] @ssn = @ssn, @name = @name, @srchUnit = @srchUnit", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_user_sp_GetByCredentialsResult>> core_user_sp_GetByCredentialsAsync(string? first, string? last, string? username, string? ssn, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "first",
                    Size = 50,
                    Value = first ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "last",
                    Size = 50,
                    Value = last ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "username",
                    Size = 50,
                    Value = username ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ssn",
                    Size = 50,
                    Value = ssn ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_user_sp_GetByCredentialsResult>("EXEC @returnValue = [dbo].[core_user_sp_GetByCredentials] @first = @first, @last = @last, @username = @username, @ssn = @ssn", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_user_sp_GetIsEDIPINAvailableResult>> core_user_sp_GetIsEDIPINAvailableAsync(string? edipin, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "edipin",
                    Size = 100,
                    Value = edipin ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_user_sp_GetIsEDIPINAvailableResult>("EXEC @returnValue = [dbo].[core_user_sp_GetIsEDIPINAvailable] @edipin = @edipin", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_user_sp_GetMailingListByGroupResult>> core_user_sp_GetMailingListByGroupAsync(int? refId, int? groupId, string? callingService, bool? isFinal, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "groupId",
                    Value = groupId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "callingService",
                    Size = 25,
                    Value = callingService ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "isFinal",
                    Value = isFinal ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_user_sp_GetMailingListByGroupResult>("EXEC @returnValue = [dbo].[core_user_sp_GetMailingListByGroup] @refId = @refId, @groupId = @groupId, @callingService = @callingService, @isFinal = @isFinal", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_user_sp_GetMailingListByGroup_SCResult>> core_user_sp_GetMailingListByGroup_SCAsync(int? refId, int? groupId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "groupId",
                    Value = groupId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_user_sp_GetMailingListByGroup_SCResult>("EXEC @returnValue = [dbo].[core_user_sp_GetMailingListByGroup_SC] @refId = @refId, @groupId = @groupId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_user_sp_GetMailingListByGroup_SCResult>> core_user_sp_GetMailingListByGroup_SC_paginationAsync(int? refId, int? groupId, int? pageNumber = 1, int? pageSize = 10, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "groupId",
                    Value = groupId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = pageNumber ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_user_sp_GetMailingListByGroup_SCResult>("EXEC @returnValue = [dbo].[core_user_sp_GetMailingListByGroup_SC_pagination] @refId = @refId, @groupId = @groupId, @PageNumber = @PageNumber, @PageSize = @PageSize", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_user_sp_GetMailingListByGroupIdResult>> core_user_sp_GetMailingListByGroupIdAsync(int? groupdId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "groupdId",
                    Value = groupdId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_user_sp_GetMailingListByGroupIdResult>("EXEC @returnValue = [dbo].[core_user_sp_GetMailingListByGroupId] @groupdId = @groupdId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_user_sp_GetMailingListByRolesResult>> core_user_sp_GetMailingListByRolesAsync(string? compo, int? unitId, string? roles, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "compo",
                    Size = 10,
                    Value = compo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "unitId",
                    Value = unitId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "roles",
                    Size = 100,
                    Value = roles ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_user_sp_GetMailingListByRolesResult>("EXEC @returnValue = [dbo].[core_user_sp_GetMailingListByRoles] @compo = @compo, @unitId = @unitId, @roles = @roles", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_user_sp_GetMailingListByRolesResult>> core_user_sp_GetMailingListByRoles_paginationAsync(string? compo, int? unitId, string? roles, int? pageNumber = 1, int? pageSize = 10, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "compo",
                    Size = 10,
                    Value = compo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "unitId",
                    Value = unitId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "roles",
                    Size = 100,
                    Value = roles ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = pageNumber ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_user_sp_GetMailingListByRolesResult>("EXEC @returnValue = [dbo].[core_user_sp_GetMailingListByRoles_pagination] @compo = @compo, @unitId = @unitId, @roles = @roles, @PageNumber = @PageNumber, @PageSize = @PageSize", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_user_sp_GetMailingListByStatusResult>> core_user_sp_GetMailingListByStatusAsync(int? refId, short? status, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Value = status ?? Convert.DBNull,
                    SqlDbType = SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_user_sp_GetMailingListByStatusResult>("EXEC @returnValue = [dbo].[core_user_sp_GetMailingListByStatus] @refId = @refId, @status = @status", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_user_sp_GetMailingListByStatus_APResult>> core_user_sp_GetMailingListByStatus_APAsync(int? refId, short? status, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Value = status ?? Convert.DBNull,
                    SqlDbType = SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_user_sp_GetMailingListByStatus_APResult>("EXEC @returnValue = [dbo].[core_user_sp_GetMailingListByStatus_AP] @refId = @refId, @status = @status", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_user_sp_GetMailingListByStatus_APSAResult>> core_user_sp_GetMailingListByStatus_APSAAsync(int? refId, short? status, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Value = status ?? Convert.DBNull,
                    SqlDbType = SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_user_sp_GetMailingListByStatus_APSAResult>("EXEC @returnValue = [dbo].[core_user_sp_GetMailingListByStatus_APSA] @refId = @refId, @status = @status", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_user_sp_GetMailingListByStatus_LODResult>> core_user_sp_GetMailingListByStatus_LODAsync(int? refId, short? status, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Value = status ?? Convert.DBNull,
                    SqlDbType = SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_user_sp_GetMailingListByStatus_LODResult>("EXEC @returnValue = [dbo].[core_user_sp_GetMailingListByStatus_LOD] @refId = @refId, @status = @status", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_user_sp_GetMailingListByStatus_RRResult>> core_user_sp_GetMailingListByStatus_RRAsync(int? refId, short? status, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Value = status ?? Convert.DBNull,
                    SqlDbType = SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_user_sp_GetMailingListByStatus_RRResult>("EXEC @returnValue = [dbo].[core_user_sp_GetMailingListByStatus_RR] @refId = @refId, @status = @status", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_user_sp_GetMailingListByStatus_SARCResult>> core_user_sp_GetMailingListByStatus_SARCAsync(int? refId, short? status, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Value = status ?? Convert.DBNull,
                    SqlDbType = SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_user_sp_GetMailingListByStatus_SARCResult>("EXEC @returnValue = [dbo].[core_user_sp_GetMailingListByStatus_SARC] @refId = @refId, @status = @status", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_user_sp_GetMailingListByStatus_SCResult>> core_user_sp_GetMailingListByStatus_SCAsync(int? refId, short? status, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Value = status ?? Convert.DBNull,
                    SqlDbType = SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_user_sp_GetMailingListByStatus_SCResult>("EXEC @returnValue = [dbo].[core_user_sp_GetMailingListByStatus_SC] @refId = @refId, @status = @status", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_user_sp_GetMailingListBySystemParamsResult>> core_user_sp_GetMailingListBySystemParamsAsync(bool? includeWork, bool? includePersonal, bool? includeUnit, DataTable? userGroupList, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "includeWork",
                    Value = includeWork ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "includePersonal",
                    Value = includePersonal ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "includeUnit",
                    Value = includeUnit ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "userGroupList",
                    Value = userGroupList ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Structured,
                    TypeName = "[dbo].[tblIntegerList]",
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_user_sp_GetMailingListBySystemParamsResult>("EXEC @returnValue = [dbo].[core_user_sp_GetMailingListBySystemParams] @includeWork = @includeWork, @includePersonal = @includePersonal, @includeUnit = @includeUnit, @userGroupList = @userGroupList", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_user_sp_GetMailingListByUserResult>> core_user_sp_GetMailingListByUserAsync(int? userId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_user_sp_GetMailingListByUserResult>("EXEC @returnValue = [dbo].[core_user_sp_GetMailingListByUser ] @userId = @userId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_user_sp_GetMailingListByWorkflowResult>> core_user_sp_GetMailingListByWorkflowAsync(int? refId, short? status, int? workflowId, int? groupId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Value = status ?? Convert.DBNull,
                    SqlDbType = SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "workflowId",
                    Value = workflowId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "groupId",
                    Value = groupId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_user_sp_GetMailingListByWorkflowResult>("EXEC @returnValue = [dbo].[core_user_sp_GetMailingListByWorkflow] @refId = @refId, @status = @status, @workflowId = @workflowId, @groupId = @groupId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_user_sp_GetMailingListForBoardLevelUsersResult>> core_user_sp_GetMailingListForBoardLevelUsersAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_user_sp_GetMailingListForBoardLevelUsersResult>("EXEC @returnValue = [dbo].[core_user_sp_GetMailingListForBoardLevelUsers]", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_user_sp_GetMailingListForLessonsLearnedResult>> core_user_sp_GetMailingListForLessonsLearnedAsync(int? refId, int? moduleId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "moduleId",
                    Value = moduleId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_user_sp_GetMailingListForLessonsLearnedResult>("EXEC @returnValue = [dbo].[core_user_sp_GetMailingListForLessonsLearned] @refId = @refId, @moduleId = @moduleId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_user_sp_GetMailingListForLODResult>> core_user_sp_GetMailingListForLODAsync(int? refId, int? groupId, int? status, string? callingService, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "refId",
                    Value = refId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "groupId",
                    Value = groupId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Value = status ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "callingService",
                    Size = 25,
                    Value = callingService ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_user_sp_GetMailingListForLODResult>("EXEC @returnValue = [dbo].[core_user_sp_GetMailingListForLOD] @refId = @refId, @groupId = @groupId, @status = @status, @callingService = @callingService", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_user_sp_GetManagedUsersResult>> core_user_sp_GetManagedUsersAsync(int? userid, string? ssn, string? name, int? status, int? role, int? srchUnit, bool? showAllUsers, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "userid",
                    Value = userid ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ssn",
                    Size = 4,
                    Value = ssn ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "name",
                    Size = 20,
                    Value = name ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Value = status ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "role",
                    Value = role ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "srchUnit",
                    Value = srchUnit ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ShowAllUsers",
                    Value = showAllUsers ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_user_sp_GetManagedUsersResult>("EXEC @returnValue = [dbo].[core_user_sp_GetManagedUsers] @userid = @userid, @ssn = @ssn, @name = @name, @status = @status, @role = @role, @srchUnit = @srchUnit, @ShowAllUsers = @ShowAllUsers", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<int> core_user_sp_GetMembersUserIdAsync(string? memberSSN, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "memberSSN",
                    Size = 11,
                    Value = memberSSN ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_user_sp_GetMembersUserId] @memberSSN = @memberSSN", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_user_sp_GetUserAltTitleResult>> core_user_sp_GetUserAltTitleAsync(int? userId, int? groupId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "groupId",
                    Value = groupId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_user_sp_GetUserAltTitleResult>("EXEC @returnValue = [dbo].[core_user_sp_GetUserAltTitle] @userId = @userId, @groupId = @groupId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_user_sp_GetUserAltTitleByGroupCompoResult>> core_user_sp_GetUserAltTitleByGroupCompoAsync(int? groupId, int? workCompo, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "groupId",
                    Value = groupId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "workCompo",
                    Value = workCompo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_user_sp_GetUserAltTitleByGroupCompoResult>("EXEC @returnValue = [dbo].[core_user_sp_GetUserAltTitleByGroupCompo] @groupId = @groupId, @workCompo = @workCompo", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_user_sp_GetUserNameResult>> core_user_sp_GetUserNameAsync(string? first, string? last, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "first",
                    Size = 50,
                    Value = first ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "last",
                    Size = 50,
                    Value = last ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_user_sp_GetUserNameResult>("EXEC @returnValue = [dbo].[core_user_sp_GetUserName] @first = @first, @last = @last", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_user_sp_GetUsersAltTitleByGroupResult>> core_user_sp_GetUsersAltTitleByGroupAsync(int? groupId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "groupId",
                    Value = groupId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_user_sp_GetUsersAltTitleByGroupResult>("EXEC @returnValue = [dbo].[core_user_sp_GetUsersAltTitleByGroup] @groupId = @groupId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_user_sp_GetUsersOnlineResult>> core_user_sp_GetUsersOnlineAsync(OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_user_sp_GetUsersOnlineResult>("EXEC @returnValue = [dbo].[core_user_sp_GetUsersOnline]", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_user_sp_GetWhoisResult>> core_user_sp_GetWhoisAsync(int? userId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_user_sp_GetWhoisResult>("EXEC @returnValue = [dbo].[core_user_sp_GetWhois] @userId = @userId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_user_sp_HasHQTechAccountResult>> core_user_sp_HasHQTechAccountAsync(int? originUserId, string? userEDIPIN, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "originUserId",
                    Value = originUserId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "userEDIPIN",
                    Size = 100,
                    Value = userEDIPIN ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_user_sp_HasHQTechAccountResult>("EXEC @returnValue = [dbo].[core_user_sp_HasHQTechAccount] @originUserId = @originUserId, @userEDIPIN = @userEDIPIN", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_user_sp_IsFinalStatusCodeResult>> core_user_sp_IsFinalStatusCodeAsync(byte? statusId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "statusId",
                    Value = statusId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_user_sp_IsFinalStatusCodeResult>("EXEC @returnValue = [dbo].[core_user_sp_IsFinalStatusCode] @statusId = @statusId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<int> core_user_sp_LogoutAsync(int? userId, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_user_sp_Logout] @userId = @userId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<int> core_user_sp_RegisterUserAsync(int? userID, string? workCompo, bool? receiveEmail, int? groupID, byte? accountStatus, DateTime? expirationDate, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "userID",
                    Value = userID ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "workCompo",
                    Size = 1,
                    Value = workCompo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "receiveEmail",
                    Value = receiveEmail ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "groupID",
                    Value = groupID ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "accountStatus",
                    Value = accountStatus ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "expirationDate",
                    Value = expirationDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_user_sp_RegisterUser] @userID = @userID, @workCompo = @workCompo, @receiveEmail = @receiveEmail, @groupID = @groupID, @accountStatus = @accountStatus, @expirationDate = @expirationDate", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<int> core_user_sp_RegisterUserRoleAsync(int? userID, short? groupID, byte? status, OutputParameter<int?> userRoleID, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameteruserRoleID = new SqlParameter
        {
            ParameterName = "userRoleID",
            Direction = ParameterDirection.InputOutput,
            Value = userRoleID?.Value ?? Convert.DBNull,
            SqlDbType = SqlDbType.Int,
        };
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "userID",
                    Value = userID ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "groupID",
                    Value = groupID ?? Convert.DBNull,
                    SqlDbType = SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Value = status ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                parameteruserRoleID,
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_user_sp_RegisterUserRole] @userID = @userID, @groupID = @groupID, @status = @status, @userRoleID = @userRoleID OUTPUT", sqlParameters, cancellationToken);

        userRoleID?.SetValue(parameteruserRoleID.Value);
        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_user_sp_SearchMemberDataResult>> core_user_sp_SearchMemberDataAsync(int? userId, string? ssn, string? lastName, string? firstName, string? middleName, int? srchUnit, int? rptView, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ssn",
                    Size = 20,
                    Value = ssn ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "lastName",
                    Size = 50,
                    Value = lastName ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "firstName",
                    Size = 50,
                    Value = firstName ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "middleName",
                    Size = 60,
                    Value = middleName ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "srchUnit",
                    Value = srchUnit ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rptView",
                    Value = rptView ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_user_sp_SearchMemberDataResult>("EXEC @returnValue = [dbo].[core_user_sp_SearchMemberData] @userId = @userId, @ssn = @ssn, @lastName = @lastName, @firstName = @firstName, @middleName = @middleName, @srchUnit = @srchUnit, @rptView = @rptView", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_user_sp_SearchMemberData_TestResult>> core_user_sp_SearchMemberData_TestAsync(int? userId, string? ssn, string? name, int? srchUnit, int? rptView, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ssn",
                    Size = 20,
                    Value = ssn ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "name",
                    Size = 10,
                    Value = name ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "srchUnit",
                    Value = srchUnit ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "rptView",
                    Value = rptView ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_user_sp_SearchMemberData_TestResult>("EXEC @returnValue = [dbo].[core_user_sp_SearchMemberData_Test] @userId = @userId, @ssn = @ssn, @name = @name, @srchUnit = @srchUnit, @rptView = @rptView", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<int> core_user_sp_UdpateAccountStatusAsync(int? userID, byte? accountStatus, DateTime? expirationDate, string? comment, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "userID",
                    Value = userID ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "accountStatus",
                    Value = accountStatus ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "expirationDate",
                    Value = expirationDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "comment",
                    Size = 200,
                    Value = comment ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_user_sp_UdpateAccountStatus] @userID = @userID, @accountStatus = @accountStatus, @expirationDate = @expirationDate, @comment = @comment", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<List<core_user_sp_UpdateLoginResult>> core_user_sp_UpdateLoginAsync(int? userId, string? sessionId, string? remoteAddr, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sessionId",
                    Size = 100,
                    Value = sessionId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "remoteAddr",
                    Size = 100,
                    Value = remoteAddr ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
        var _ = await _context.SqlQueryToListAsync<core_user_sp_UpdateLoginResult>("EXEC @returnValue = [dbo].[core_user_sp_UpdateLogin] @userId = @userId, @sessionId = @sessionId, @remoteAddr = @remoteAddr", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<int> core_user_sp_UpdateManagedSettingsAsync(int? userId, string? compo, int? roleId, byte? groupId, string? comment, bool? receiveEmail, DateTime? expirationDate, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "compo",
                    Size = 1,
                    Value = compo ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "roleId",
                    Value = roleId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "groupId",
                    Value = groupId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "comment",
                    Size = 200,
                    Value = comment ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "receiveEmail",
                    Value = receiveEmail ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "expirationDate",
                    Value = expirationDate ?? Convert.DBNull,
                    SqlDbType = SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_user_sp_UpdateManagedSettings] @userId = @userId, @compo = @compo, @roleId = @roleId, @groupId = @groupId, @comment = @comment, @receiveEmail = @receiveEmail, @expirationDate = @expirationDate", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public async virtual Task<int> core_user_sp_UpdateUserAltTitleAsync(int? userId, int? groupId, string? newTitle, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "groupId",
                    Value = groupId ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "newTitle",
                    Size = 200,
                    Value = newTitle ?? Convert.DBNull,
                    SqlDbType = SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_user_sp_UpdateUserAltTitle] @userId = @userId, @groupId = @groupId, @newTitle = @newTitle", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    /// <summary>
    /// Updates witness information for a given witness ID.
    /// </summary>
    /// <param name="id">The witness identifier.</param>
    /// <param name="name">The witness name (50 characters max).</param>
    /// <param name="address">The witness address (50 characters max).</param>
    /// <param name="returnValue">Output parameter for the stored procedure return value.</param>
    /// <param name="cancellationToken">Cancellation token for async operation.</param>
    /// <returns>The number of affected rows.</returns>
    /// <remarks>Executes [dbo].[core_witness_Update] stored procedure.</remarks>
    public async virtual Task<int> core_witness_UpdateAsync(int? id, string? name, string? address, OutputParameter<int>? returnValue = null, CancellationToken? cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = ParameterDirection.Output,
            SqlDbType = SqlDbType.Int,
        };

        var sqlParameters = new[]
        {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "name",
                    Size = 50,
                    Value = name ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "address",
                    Size = 50,
                    Value = address ?? Convert.DBNull,
                    SqlDbType = SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[core_witness_Update] @id = @id, @name = @name, @address = @address", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    #endregion
}
