// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable enable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using AF.ECT.Data.Configurations.CommandStructure;
using AF.ECT.Data.Configurations.CoreSystem;
using AF.ECT.Data.Configurations.Development;
using AF.ECT.Data.Configurations.Documents;
using AF.ECT.Data.Configurations.Forms;
using AF.ECT.Data.Configurations.Logging;
using AF.ECT.Data.Configurations.Lookups;
using AF.ECT.Data.Configurations.Memos;
using AF.ECT.Data.Configurations.Messages;
using AF.ECT.Data.Configurations.Permissions;
using AF.ECT.Data.Configurations.Reminders;
using AF.ECT.Data.Configurations.Reporting;
using AF.ECT.Data.Configurations.Users;
using AF.ECT.Data.Configurations.Workflow;

namespace AF.ECT.Data.Models;

/// <summary>
/// Entity Framework DbContext for the ALOD (Audit Log Operations Database) system.
/// </summary>
/// <remarks>
/// This context provides access to database entities and stored procedures for the
/// Radzen Blazor application. It is auto-generated by EF Core Power Tools and
/// should not be modified manually.
/// </remarks>
public partial class ALODContext : DbContext
{
    /// <summary>
    /// Initializes a new instance of the ALODContext.
    /// </summary>
    /// <param name="options">The options to be used by the DbContext.</param>
    /// <exception cref="ArgumentNullException">Thrown when options is null.</exception>
    public ALODContext(DbContextOptions<ALODContext> options)
        : base(options)
    {
    }

    /// <summary>
    /// Initializes a new instance of the ALODContext without options (for Audit.NET).
    /// </summary>
    public ALODContext()
    {
    }

    /// <summary>
    /// Gets or sets the DbSet for Access Scope lookup data.
    /// </summary>
    public virtual DbSet<Entities.CoreLkupAccessScope> AccessScopes { get; set; }

    /// <summary>
    /// Gets or sets the DbSet for Access Status lookup data.
    /// </summary>
    public virtual DbSet<Entities.CoreLkupAccessStatus> AccessStatuses { get; set; }

    /// <summary>
    /// Gets or sets the DbSet for Action lookup data.
    /// </summary>
    public virtual DbSet<Entities.CoreLkupAction> Actions { get; set; }

    /// <summary>
    /// Gets or sets the DbSet for AMRO Disposition lookup data.
    /// </summary>
    public virtual DbSet<Entities.CoreLkupAmrodisposition> Amrodispositions { get; set; }

    /// <summary>
    /// Gets or sets the DbSet for Availability Code lookup data.
    /// </summary>
    public virtual DbSet<Entities.CoreLkupAvailabilityCode> AvailabilityCodes { get; set; }

    /// <summary>
    /// Gets or sets the DbSet for Cancel Reason lookup data.
    /// </summary>
    public virtual DbSet<Entities.CoreLkupCancelReason> CancelReasons { get; set; }

    /// <summary>
    /// Gets or sets the DbSet for Chain Type lookup data.
    /// </summary>
    public virtual DbSet<Entities.CoreLkupChainType> ChainTypes { get; set; }

    /// <summary>
    /// Gets or sets the DbSet for Compo lookup data.
    /// </summary>
    public virtual DbSet<Entities.CoreLkupCompo> Compos { get; set; }

    /// <summary>
    /// Gets or sets the DbSet for Component lookup data.
    /// </summary>
    public virtual DbSet<Entities.CoreLkupComponent> Components { get; set; }

    /// <summary>
    /// Gets or sets the DbSet for Countries lookup data.
    /// </summary>
    public virtual DbSet<Entities.CoreLkupCountry> Countries { get; set; }

    /// <summary>
    /// Gets or sets the DbSet for Data Type lookup data.
    /// </summary>
    public virtual DbSet<Entities.CoreLkupDataType> DataTypes { get; set; }

    /// <summary>
    /// Gets or sets the DbSet for DAWG Recommendation lookup data.
    /// </summary>
    public virtual DbSet<Entities.CoreLkupDawgrecommendation> Dawgrecommendations { get; set; }

    /// <summary>
    /// Gets or sets the DbSet for DbSign Templates lookup data.
    /// </summary>
    public virtual DbSet<Entities.CoreLkupDbSignTemplate> DbSignTemplates { get; set; }

    /// <summary>
    /// Gets or sets the DbSet for Disposition lookup data.
    /// </summary>
    public virtual DbSet<Entities.CoreLkupDisposition> Dispositions { get; set; }

    /// <summary>
    /// Gets or sets the DbSet for Duty Status lookup data.
    /// </summary>
    public virtual DbSet<Entities.CoreLkupDutyStatus> DutyStatuses { get; set; }

    /// <summary>
    /// Gets or sets the DbSet for Fast Track Type lookup data.
    /// </summary>
    public virtual DbSet<Entities.CoreLkupFastTrackType> FastTrackTypes { get; set; }

    /// <summary>
    /// Gets or sets the DbSet for Finding By Reason Of lookup data.
    /// </summary>
    public virtual DbSet<Entities.CoreLkUpFindingByReasonOf> FindingByReasonOfs { get; set; }

    /// <summary>
    /// Gets or sets the DbSet for Findings lookup data.
    /// </summary>
    public virtual DbSet<Entities.CoreLkUpFinding> Findings { get; set; }

    /// <summary>
    /// Gets or sets the DbSet for Findings Text lookup data.
    /// </summary>
    public virtual DbSet<Entities.CoreLkupFindingsText> FindingsTexts { get; set; }

    /// <summary>
    /// Gets or sets the DbSet for Follow Up Interval lookup data.
    /// </summary>
    public virtual DbSet<Entities.CoreLkupFollowUpInterval> FollowUpIntervals { get; set; }

    /// <summary>
    /// Gets or sets the DbSet for From Location lookup data.
    /// </summary>
    public virtual DbSet<Entities.CoreLkupFromLocation> FromLocations { get; set; }

    /// <summary>
    /// Gets or sets the DbSet for FT Recommendations lookup data.
    /// </summary>
    public virtual DbSet<Entities.CoreLkupFtrecommendation> Ftrecommendations { get; set; }

    /// <summary>
    /// Gets or sets the DbSet for Grade lookup data.
    /// </summary>
    public virtual DbSet<Entities.CoreLkupGrade> Grades { get; set; }

    /// <summary>
    /// Gets or sets the DbSet for Grade Abbreviation Type lookup data.
    /// </summary>
    public virtual DbSet<Entities.CoreLkupGradeAbbreviationType> GradeAbbreviationTypes { get; set; }

    /// <summary>
    /// Gets or sets the DbSet for ICD 7th Character lookup data.
    /// </summary>
    public virtual DbSet<Entities.CoreLkupIcd7thChar> Icd7thChars { get; set; }

    /// <summary>
    /// Gets or sets the DbSet for ICD9 lookup data.
    /// </summary>
    public virtual DbSet<Entities.CoreLkupIcd9> Icd9s { get; set; }

    /// <summary>
    /// Gets or sets the DbSet for Incident Type lookup data.
    /// </summary>
    public virtual DbSet<Entities.CoreLkupIncidentType> IncidentTypes { get; set; }

    /// <summary>
    /// Gets or sets the DbSet for Info Source lookup data.
    /// </summary>
    public virtual DbSet<Entities.CoreLkupInfoSource> InfoSources { get; set; }

    /// <summary>
    /// Gets or sets the DbSet for IO Grades lookup data.
    /// </summary>
    public virtual DbSet<Entities.CoreLkupIograde> Iogrades { get; set; }

    /// <summary>
    /// Gets or sets the DbSet for IRILO Status lookup data.
    /// </summary>
    public virtual DbSet<Entities.CoreLkupIrilostatus> Irilostatuses { get; set; }

    /// <summary>
    /// Gets or sets the DbSet for MAJCOM lookup data.
    /// </summary>
    public virtual DbSet<Entities.CoreLkupMajcom> Majcoms { get; set; }

    /// <summary>
    /// Gets or sets the DbSet for Med Groups lookup data.
    /// </summary>
    public virtual DbSet<Entities.CoreLkupMedGroup> MedGroups { get; set; }

    /// <summary>
    /// Gets or sets the DbSet for Medical Facility lookup data.
    /// </summary>
    public virtual DbSet<Entities.CoreLkupMedicalFacility> MedicalFacilities { get; set; }

    /// <summary>
    /// Gets or sets the DbSet for Member Category lookup data.
    /// </summary>
    public virtual DbSet<Entities.CoreLkupMemberCategory> MemberCategories { get; set; }

    /// <summary>
    /// Gets or sets the DbSet for Member Influence lookup data.
    /// </summary>
    public virtual DbSet<Entities.CoreLkupMemberInfluence> MemberInfluences { get; set; }

    /// <summary>
    /// Gets or sets the DbSet for Member Status lookup data.
    /// </summary>
    public virtual DbSet<Entities.CoreLkupMemberStatus> MemberStatuses { get; set; }

    /// <summary>
    /// Gets or sets the DbSet for Military Services lookup data.
    /// </summary>
    public virtual DbSet<Entities.CoreLkupMilitaryService> MilitaryServices { get; set; }

    /// <summary>
    /// Gets or sets the DbSet for Missed Work Days lookup data.
    /// </summary>
    public virtual DbSet<Entities.CoreLkupMissedWorkDay> MissedWorkDays { get; set; }

    /// <summary>
    /// Gets or sets the DbSet for Module lookup data.
    /// </summary>
    public virtual DbSet<Entities.CoreLkupModule> Modules { get; set; }

    /// <summary>
    /// Gets or sets the DbSet for Nature Of Incident lookup data.
    /// </summary>
    public virtual DbSet<Entities.CoreLkupNatureOfIncident> NatureOfIncidents { get; set; }

    /// <summary>
    /// Gets or sets the DbSet for Occurrence Description lookup data.
    /// </summary>
    public virtual DbSet<Entities.CoreLkupOccurrenceDescription> OccurrenceDescriptions { get; set; }

    /// <summary>
    /// Gets or sets the DbSet for Operation Type lookup data.
    /// </summary>
    public virtual DbSet<Entities.CoreLkupOperationType> OperationTypes { get; set; }

    /// <summary>
    /// Gets or sets the DbSet for PA lookup data.
    /// </summary>
    public virtual DbSet<Entities.CoreLkupPa> Pas { get; set; }

    /// <summary>
    /// Gets or sets the DbSet for PEPP Case Type lookup data.
    /// </summary>
    public virtual DbSet<Entities.CoreLkupPeppcaseType> PeppcaseTypes { get; set; }

    /// <summary>
    /// Gets or sets the DbSet for PEPP Disposition lookup data.
    /// </summary>
    public virtual DbSet<Entities.CoreLkupPeppdisposition> Peppdispositions { get; set; }

    /// <summary>
    /// Gets or sets the DbSet for PEPP Rating lookup data.
    /// </summary>
    public virtual DbSet<Entities.CoreLkupPepprating> Peppratings { get; set; }

    /// <summary>
    /// Gets or sets the DbSet for PEPP Type lookup data.
    /// </summary>
    public virtual DbSet<Entities.CoreLkupPepptype> Pepptypes { get; set; }

    /// <summary>
    /// Gets or sets the DbSet for Personnel Type lookup data.
    /// </summary>
    public virtual DbSet<Entities.CoreLkupPersonnelType> PersonnelTypes { get; set; }

    /// <summary>
    /// Gets or sets the DbSet for Physical Cancel Reason lookup data.
    /// </summary>
    public virtual DbSet<Entities.CoreLkupPhyCancelReason> PhyCancelReasons { get; set; }

    /// <summary>
    /// Gets or sets the DbSet for Process lookup data.
    /// </summary>
    public virtual DbSet<Entities.CoreLkupProcess> Processes { get; set; }

    /// <summary>
    /// Gets or sets the DbSet for Proximate Cause lookup data.
    /// </summary>
    public virtual DbSet<Entities.CoreLkupProximateCause> ProximateCauses { get; set; }

    /// <summary>
    /// Gets or sets the DbSet for PW Category lookup data.
    /// </summary>
    public virtual DbSet<Entities.CoreLkupPwcategory> Pwcategories { get; set; }

    /// <summary>
    /// Gets or sets the DbSet for RMU lookup data.
    /// </summary>
    public virtual DbSet<Entities.CoreLkupRmu> Rmus { get; set; }

    /// <summary>
    /// Gets or sets the DbSet for Rule lookup data.
    /// </summary>
    public virtual DbSet<Entities.CoreLkupRule> Rules { get; set; }

    /// <summary>
    /// Gets or sets the DbSet for Rule Type lookup data.
    /// </summary>
    public virtual DbSet<Entities.CoreLkupRuleType> RuleTypes { get; set; }

    /// <summary>
    /// Gets or sets the DbSet for RWOA Reason lookup data.
    /// </summary>
    public virtual DbSet<Entities.CoreLkupRwoareason> Rwoareasons { get; set; }

    /// <summary>
    /// Gets or sets the DbSet for SC Sub Type lookup data.
    /// </summary>
    public virtual DbSet<Entities.CoreLkupScsubType> ScsubTypes { get; set; }

    /// <summary>
    /// Gets or sets the DbSet for Specialists Required For Management lookup data.
    /// </summary>
    public virtual DbSet<Entities.CoreLkupSpecialistsRequiredForManagement> SpecialistsRequiredForManagements { get; set; }

    /// <summary>
    /// Gets or sets the DbSet for States lookup data.
    /// </summary>
    public virtual DbSet<Entities.CoreLkupState> States { get; set; }

    /// <summary>
    /// Gets or sets the DbSet for Sudden Incapacitation Risk lookup data.
    /// </summary>
    public virtual DbSet<Entities.CoreLkupSuddenIncapacitationRisk> SuddenIncapacitationRisks { get; set; }

    /// <summary>
    /// Gets or sets the DbSet for Time Zone lookup data.
    /// </summary>
    public virtual DbSet<Entities.CoreLkupTimeZone> TimeZones { get; set; }

    /// <summary>
    /// Gets or sets the DbSet for Unit Level Type lookup data.
    /// </summary>
    public virtual DbSet<Entities.CoreLkupUnitLevelType> UnitLevelTypes { get; set; }

    /// <summary>
    /// Gets or sets the DbSet for Workflow Action lookup data.
    /// </summary>
    public virtual DbSet<Entities.CoreLkupWorkflowAction> WorkflowActions { get; set; }

    /// <summary>
    /// Gets or sets the DbSet for Years Satisfactory Service lookup data.
    /// </summary>
    public virtual DbSet<Entities.CoreLkupYearsSatisfactoryService> YearsSatisfactoryServices { get; set; }

    /// <summary>
    /// Configures the model for the context.
    /// </summary>
    /// <param name="modelBuilder">The builder being used to construct the model for this context.</param>
    /// <remarks>
    /// This method is called when the model for a derived context has been initialized,
    /// but before the model has been locked down and used to initialize the context.
    /// </remarks>
    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        // Apply custom entity configurations from Configurations folder
        ApplyCoreEntityConfigurations(modelBuilder);
        
        OnModelCreatingPartial(modelBuilder);
    }

    /// <summary>
    /// Applies configurations for core entities that have been manually configured with detailed settings.
    /// </summary>
    /// <param name="modelBuilder">The builder being used to construct the model.</param>
    private void ApplyCoreEntityConfigurations(ModelBuilder modelBuilder)
    {
        // Apply custom configurations from Configurations folder
        // User management configurations
        modelBuilder.ApplyConfiguration(new CoreUserConfiguration());
        modelBuilder.ApplyConfiguration(new CoreUsersOnlineConfiguration());
        modelBuilder.ApplyConfiguration(new CoreUserGroupConfiguration());
        modelBuilder.ApplyConfiguration(new CoreUserGroupLevelConfiguration());
        modelBuilder.ApplyConfiguration(new CoreUserGroupsManagedByConfiguration());
        modelBuilder.ApplyConfiguration(new CoreUserGroupsViewByConfiguration());
        modelBuilder.ApplyConfiguration(new CoreUserRoleRequestConfiguration());
        modelBuilder.ApplyConfiguration(new CoreUsersAltTitleConfiguration());
        
        // Workflow configurations
        modelBuilder.ApplyConfiguration(new CoreWorkflowConfiguration());
        modelBuilder.ApplyConfiguration(new CoreWorkStatusConfiguration());
        modelBuilder.ApplyConfiguration(new CoreWorkStatusOptionConfiguration());
        modelBuilder.ApplyConfiguration(new CoreWorkStatusActionConfiguration());
        modelBuilder.ApplyConfiguration(new CoreWorkStatusRuleConfiguration());
        modelBuilder.ApplyConfiguration(new CoreWorkStatusTrackingConfiguration());
        modelBuilder.ApplyConfiguration(new CoreWorkStatusUpdatedConfiguration());
        modelBuilder.ApplyConfiguration(new CoreWorkStatusValidationConfiguration());
        modelBuilder.ApplyConfiguration(new CoreStatusCodeConfiguration());
        modelBuilder.ApplyConfiguration(new CoreStatusCodeSignerConfiguration());
        modelBuilder.ApplyConfiguration(new CoreAssociatedCaseConfiguration());
        modelBuilder.ApplyConfiguration(new CoreSignatureMetaDatumConfiguration());
        modelBuilder.ApplyConfiguration(new CoreSignOnlySignatureConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLkupWorkflowActionConfiguration());
        modelBuilder.ApplyConfiguration(new CoreWitnessConfiguration());
        modelBuilder.ApplyConfiguration(new CoreWorkflowCancelReasonConfiguration());
        modelBuilder.ApplyConfiguration(new CoreWorkflowCaseTypeMapConfiguration());
        modelBuilder.ApplyConfiguration(new CoreWorkflowCertificationStampMapConfiguration());
        modelBuilder.ApplyConfiguration(new CoreWorkflowCompletedByGroupMapConfiguration());
        modelBuilder.ApplyConfiguration(new CoreWorkflowDispositionMapConfiguration());
        modelBuilder.ApplyConfiguration(new CoreWorkflowFindingConfiguration());
        modelBuilder.ApplyConfiguration(new CoreWorkflowInitStatusConfiguration());
        modelBuilder.ApplyConfiguration(new CoreWorkflowLockConfiguration());
        modelBuilder.ApplyConfiguration(new CoreWorkflowMemberComponentConfiguration());
        modelBuilder.ApplyConfiguration(new CoreWorkflowPermConfiguration());
        modelBuilder.ApplyConfiguration(new CoreWorkflowPermissionConfiguration());
        modelBuilder.ApplyConfiguration(new CoreWorkflowReturnReasonConfiguration());
        modelBuilder.ApplyConfiguration(new CoreWorkflowRwoaReasonConfiguration());
        modelBuilder.ApplyConfiguration(new CoreWorkflowViewConfiguration());
        
        // Form configurations
        modelBuilder.ApplyConfiguration(new Form348Configuration());
        modelBuilder.ApplyConfiguration(new CaseCommentConfiguration());
        modelBuilder.ApplyConfiguration(new CaseDialogueCommentConfiguration());
        modelBuilder.ApplyConfiguration(new ChildCaseCommentConfiguration());
        
        // Command structure configurations
        modelBuilder.ApplyConfiguration(new CommandStructConfiguration());
        modelBuilder.ApplyConfiguration(new CommandStructChainConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLkupChainTypeConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLkupMajcomConfiguration());
        
        // Permission configurations
        modelBuilder.ApplyConfiguration(new CoreUserRoleConfiguration());
        modelBuilder.ApplyConfiguration(new CoreUserGroupConfiguration());
        modelBuilder.ApplyConfiguration(new CorePermissionConfiguration());
        modelBuilder.ApplyConfiguration(new CorePermissionDocGroupConfiguration());
        modelBuilder.ApplyConfiguration(new CorePermissionRequestConfiguration());
        modelBuilder.ApplyConfiguration(new CoreGroupPermissionConfiguration());
        modelBuilder.ApplyConfiguration(new CoreUserPermissionConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLkupAccessScopeConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLkupAccessStatusConfiguration());
        modelBuilder.ApplyConfiguration(new CorePageConfiguration());
        modelBuilder.ApplyConfiguration(new CorePageAccessConfiguration());
        
        // System configurations (lookup tables and system entities)
        modelBuilder.ApplyConfiguration(new CoreEmailTemplateConfiguration());
        modelBuilder.ApplyConfiguration(new ReminderEmailSettingConfiguration());
        modelBuilder.ApplyConfiguration(new ReminderEmailConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLkupModuleConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLkupCompoConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLkupGradeConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLkupStateConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLkupProcessConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLkupCountryConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLkupActionConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLkupAmrodispositionConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLkupAvailabilityCodeConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLkupCancelReasonConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLkupComponentConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLkupDataTypeConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLkupDawgrecommendationConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLkupDbSignTemplateConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLkupDutyStatusConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLkupFastTrackTypeConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLkUpFindingConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLkUpFindingByReasonOfConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLkupFindingsTextConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLkupFollowUpIntervalConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLkupFromLocationConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLkupFtrecommendationConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLkupGradeAbbreviationTypeConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLkupIcd7thCharConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLkupIcd9Configuration());
        modelBuilder.ApplyConfiguration(new CoreLkupIncidentTypeConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLkupInfoSourceConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLkupIogradeConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLkupIrilostatusConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLkupMedGroupConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLkupMedicalFacilityConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLkupMemberCategoryConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLkupMemberInfluenceConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLkupMemberStatusConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLkupMilitaryServiceConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLkupOperationTypeConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLkupMissedWorkDayConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLkupNatureOfIncidentConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLkupOccurrenceDescriptionConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLkupPaConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLkupPeppcaseTypeConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLkupPeppdispositionConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLkupPeppratingConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLkupPepptypeConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLkupPersonnelTypeConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLkupPhyCancelReasonConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLkupProximateCauseConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLkupPwcategoryConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLkupRmuConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLkupRuleConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLkupRuleTypeConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLkupRwoareasonConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLkupScsubTypeConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLkupSpecialistsRequiredForManagementConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLkupSuddenIncapacitationRiskConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLkupTimeZoneConfiguration());
        
        // Earlier batches: Case types, key-value system, logging infrastructure
        modelBuilder.ApplyConfiguration(new CoreCaseTypeConfiguration());
        modelBuilder.ApplyConfiguration(new CoreSubCaseTypeConfiguration());
        modelBuilder.ApplyConfiguration(new CoreCertificationStampConfiguration());
        modelBuilder.ApplyConfiguration(new CoreCompletedByGroupConfiguration());
        modelBuilder.ApplyConfiguration(new CoreKeyValKeyConfiguration());
        modelBuilder.ApplyConfiguration(new CoreKeyValKeyTypeConfiguration());
        modelBuilder.ApplyConfiguration(new CoreKeyValValueConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLogActionConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLogChangeSetConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLogDebugMessageConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLogEmailConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLogErrorConfiguration());
        
        // Batch 20: Unit level, years of service, disposition, log archive, page generation, memo system (9 entities)
        modelBuilder.ApplyConfiguration(new CoreLkupUnitLevelTypeConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLkupYearsSatisfactoryServiceConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLkupDispositionConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLogErrorArchiveConfiguration());
        modelBuilder.ApplyConfiguration(new CoreLogPageGenerationTimeConfiguration());
        modelBuilder.ApplyConfiguration(new CoreMemoConfiguration());
        modelBuilder.ApplyConfiguration(new CoreMemoContentConfiguration());
        modelBuilder.ApplyConfiguration(new CoreMemoContents2Configuration());
        modelBuilder.ApplyConfiguration(new CoreMemoGroupConfiguration());
        
        // Batch 21: Memo letterhead/templates, messages, package import errors, test data, online users (9 entities)
        modelBuilder.ApplyConfiguration(new CoreMemoLetterheadConfiguration());
        modelBuilder.ApplyConfiguration(new CoreMemos2Configuration());
        modelBuilder.ApplyConfiguration(new CoreMemoTemplateConfiguration());
        modelBuilder.ApplyConfiguration(new CoreMessageConfiguration());
        modelBuilder.ApplyConfiguration(new CoreMessagesGroupConfiguration());
        modelBuilder.ApplyConfiguration(new CoreMessagesReadConfiguration());
        modelBuilder.ApplyConfiguration(new CorePkgImportErrorConfiguration());
        modelBuilder.ApplyConfiguration(new CoreTestConfiguration());
        modelBuilder.ApplyConfiguration(new CoreUsersOnlineConfiguration());
        
        // Batch 22: User management system - roles, permissions, groups, hierarchy (9 entities)
        modelBuilder.ApplyConfiguration(new CoreUsersAltTitleConfiguration());
        modelBuilder.ApplyConfiguration(new CoreUserRoleRequestConfiguration());
        modelBuilder.ApplyConfiguration(new CoreUserRoleConfiguration());
        modelBuilder.ApplyConfiguration(new CoreUserPermissionConfiguration());
        modelBuilder.ApplyConfiguration(new CoreUserGroupsViewByConfiguration());
        modelBuilder.ApplyConfiguration(new CoreUserGroupsManagedByConfiguration());
        modelBuilder.ApplyConfiguration(new CoreUserGroupLevelConfiguration());
        modelBuilder.ApplyConfiguration(new CoreUserGroupConfiguration());
        modelBuilder.ApplyConfiguration(new CoreUserConfiguration());
        
        // Batch 23: Workflow engine - statuses, tracking, locks, permissions, page access (10 entities)
        modelBuilder.ApplyConfiguration(new CoreWorkStatusTrackingConfiguration());
        modelBuilder.ApplyConfiguration(new CoreWorkflowLockConfiguration());
        modelBuilder.ApplyConfiguration(new CoreStatusCodeConfiguration());
        modelBuilder.ApplyConfiguration(new CorePermissionConfiguration());
        modelBuilder.ApplyConfiguration(new CorePageAccessConfiguration());
        modelBuilder.ApplyConfiguration(new CoreGroupPermissionConfiguration());
        modelBuilder.ApplyConfiguration(new CoreWorkflowConfiguration());
        modelBuilder.ApplyConfiguration(new CoreWorkStatusConfiguration());
        modelBuilder.ApplyConfiguration(new CoreWorkStatusOptionConfiguration());
        modelBuilder.ApplyConfiguration(new CoreWorkStatusValidationConfiguration());
        
        // Batch 24: Reports, Form 348 SARC/SC/Finding (4 new entities - others were pre-existing from batches 1-16)
        modelBuilder.ApplyConfiguration(new RptUserQueryConfiguration());
        modelBuilder.ApplyConfiguration(new Form348SarcConfiguration());
        modelBuilder.ApplyConfiguration(new Form348ScConfiguration());
        modelBuilder.ApplyConfiguration(new Form348FindingConfiguration());
        
        // Batch 25: Form 348 post-processing system - appeals, findings, unit data, query clauses (8 new entities - ReminderEmail was pre-existing)
        modelBuilder.ApplyConfiguration(new Form348PostProcessingConfiguration());
        modelBuilder.ApplyConfiguration(new Form348PostProcessingAppealConfiguration());
        modelBuilder.ApplyConfiguration(new Form348SarcPostProcessingConfiguration());
        modelBuilder.ApplyConfiguration(new Form348SarcFindingConfiguration());
        modelBuilder.ApplyConfiguration(new Form348SarcIcdConfiguration());
        modelBuilder.ApplyConfiguration(new Form348UnitConfiguration());
        modelBuilder.ApplyConfiguration(new Form348PscdFindingConfiguration());
        modelBuilder.ApplyConfiguration(new RptUserQueryClauseConfiguration());
        
        // Batch 26: System infrastructure - reporting params, conversions, mappings, metadata, dev tools, document categorization (9 entities)
        modelBuilder.ApplyConfiguration(new RptUserQueryParamConfiguration());
        modelBuilder.ApplyConfiguration(new ConversionRunConfiguration());
        modelBuilder.ApplyConfiguration(new ConversionRunLogConfiguration());
        modelBuilder.ApplyConfiguration(new CoreCaseTypeSubCaseTypeMapConfiguration());
        modelBuilder.ApplyConfiguration(new DataElementDetailConfiguration());
        modelBuilder.ApplyConfiguration(new DevLoginConfiguration());
        modelBuilder.ApplyConfiguration(new DevUnitConfiguration());
        modelBuilder.ApplyConfiguration(new DocCategoryViewConfiguration());
        modelBuilder.ApplyConfiguration(new DocumentCategory2Configuration());
        
        // Batch 27: Form 348 appeals and audit - AP/SARC appeals, findings, approval authority, audit reviews, comments (9 entities)
        modelBuilder.ApplyConfiguration(new DocumentViewConfiguration());
        modelBuilder.ApplyConfiguration(new Form261Configuration());
        modelBuilder.ApplyConfiguration(new Form348ApConfiguration());
        modelBuilder.ApplyConfiguration(new Form348ApFindingConfiguration());
        modelBuilder.ApplyConfiguration(new Form348ApprovalAuthorityConfiguration());
        modelBuilder.ApplyConfiguration(new Form348ApSarcConfiguration());
        modelBuilder.ApplyConfiguration(new Form348ApSarcFindingConfiguration());
        modelBuilder.ApplyConfiguration(new Form348AuditConfiguration());
        modelBuilder.ApplyConfiguration(new Form348CommentConfiguration());

        // Batch 28: AFRC Oracle migration staging data - DBA users, LIR disposition/personnel, LOD disposition/RWOA, Manpower, Personnel (unit/non-unit/feed) (9 entities)
        modelBuilder.ApplyConfiguration(new AfrcOracleDbaUsersDatumConfiguration());
        modelBuilder.ApplyConfiguration(new AfrcOracleLirDispDatumConfiguration());
        modelBuilder.ApplyConfiguration(new AfrcOracleLirPersonnelDatumConfiguration());
        modelBuilder.ApplyConfiguration(new AfrcOracleLodDispDatumConfiguration());
        modelBuilder.ApplyConfiguration(new AfrcOracleLodRwoaDatumConfiguration());
        modelBuilder.ApplyConfiguration(new AfrcOracleManpowerAllDatumConfiguration());
        modelBuilder.ApplyConfiguration(new AfrcOracleNonunitPersonnelDatumConfiguration());
        modelBuilder.ApplyConfiguration(new AfrcOraclePersonnelDatumConfiguration());
        modelBuilder.ApplyConfiguration(new AfrcOraclePersonnelFeedDatumConfiguration());

        // Batch 29: Mixed development and command structure - Oracle person process, raw import data (ARCNET/PAS), warmup processes, ASP.NET session state, command structure backup/history (9 entities)
        modelBuilder.ApplyConfiguration(new AfrcOraclePersonProcessDatumConfiguration());
        modelBuilder.ApplyConfiguration(new AlodArcnetRawConfiguration());
        modelBuilder.ApplyConfiguration(new AlodPasRawConfiguration());
        modelBuilder.ApplyConfiguration(new ApplicationWarmupProcessConfiguration());
        modelBuilder.ApplyConfiguration(new ApplicationWarmupProcessLogConfiguration());
        modelBuilder.ApplyConfiguration(new AspstateTempApplicationConfiguration());
        modelBuilder.ApplyConfiguration(new AspstateTempSessionConfiguration());
        modelBuilder.ApplyConfiguration(new CommandStructChainBackupConfiguration());
        modelBuilder.ApplyConfiguration(new CommandStructHistoryConfiguration());

        // Batch 30: Command structure trees and Form 348 incapacitation/medical/lessons/appeals/reinvestigation - tree views, INCAP findings/appeals/extensions, medical data, lessons learned, SARC appeal post-processing, RR workflow (9 entities)
        modelBuilder.ApplyConfiguration(new CommandStructTreeConfiguration());
        modelBuilder.ApplyConfiguration(new CommandStructTreeTmpConfiguration());
        modelBuilder.ApplyConfiguration(new Form348IncapAppealConfiguration());
        modelBuilder.ApplyConfiguration(new Form348IncapExtConfiguration());
        modelBuilder.ApplyConfiguration(new Form348IncapFindingConfiguration());
        modelBuilder.ApplyConfiguration(new Form348LessonConfiguration());
        modelBuilder.ApplyConfiguration(new Form348MedicalConfiguration());
        modelBuilder.ApplyConfiguration(new Form348PostProcessingAppealSarcConfiguration());
        modelBuilder.ApplyConfiguration(new Form348RrConfiguration());

        // Batch 31: Form 348 RR findings, SC PEPP types/reassessments, grade abbreviations, hyperlinks, and import staging - RR investigation findings, special category PEPP/reassessments, military grade abbreviations, hyperlink management, command structure/chain/DBA import staging (9 entities)
        modelBuilder.ApplyConfiguration(new Form348RrFindingConfiguration());
        modelBuilder.ApplyConfiguration(new Form348ScPeppTypeConfiguration());
        modelBuilder.ApplyConfiguration(new Form348ScReassessmentConfiguration());
        modelBuilder.ApplyConfiguration(new GradeAbbreviationConfiguration());
        modelBuilder.ApplyConfiguration(new HyperLinkConfiguration());
        modelBuilder.ApplyConfiguration(new HyperLinkTypeConfiguration());
        modelBuilder.ApplyConfiguration(new ImpCommandStructConfiguration());
        modelBuilder.ApplyConfiguration(new ImpCommandStructChainConfiguration());
        modelBuilder.ApplyConfiguration(new ImpDbaRolePrivConfiguration());

        // Batch 32: Import staging tables - database users, EDIPIN mappings, grade lookups, workflow history, access status, LOD approving authority mappings, active duty personnel, LOD dispositions, investigation reports (9 entities)
        modelBuilder.ApplyConfiguration(new ImpDbaUserConfiguration());
        modelBuilder.ApplyConfiguration(new ImpEdipinConfiguration());
        modelBuilder.ApplyConfiguration(new ImpGradeLookUpConfiguration());
        modelBuilder.ApplyConfiguration(new ImpHistoryConfiguration());
        modelBuilder.ApplyConfiguration(new ImpLkupAccessStatusConfiguration());
        modelBuilder.ApplyConfiguration(new ImpLodAaMappingConfiguration());
        modelBuilder.ApplyConfiguration(new ImpLodActiveDutyConfiguration());
        modelBuilder.ApplyConfiguration(new ImpLodDispositionConfiguration());
        modelBuilder.ApplyConfiguration(new ImpLodInvestigationRptConfiguration());
    }

    /// <summary>
    /// Applies configurations for all entities generated by the PowerShell script.
    /// These are template-based configurations that provide basic table mappings.
    /// </summary>
    /// <param name="modelBuilder">The builder being used to construct the model.</param>
    private void ApplyGeneratedEntityConfigurations(ModelBuilder modelBuilder)
    {
        // AFRC Oracle Data configurations
        
    }

    /// <summary>
    /// Allows configuration of the model that cannot be done automatically by the conventions.
    /// </summary>
    /// <param name="modelBuilder">The builder being used to construct the model for this context.</param>
    /// <remarks>
    /// This partial method can be implemented in another partial class to add
    /// custom model configuration that cannot be done through data annotations.
    /// </remarks>
    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
