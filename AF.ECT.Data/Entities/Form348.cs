// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable enable

namespace AF.ECT.Data.Entities;

/// <summary>
/// Represents a DA Form 348 (Line of Duty Determination) case in the Electronic Case Tracking system.
/// </summary>
/// <remarks>
/// The Form 348 entity manages the complete lifecycle of Line of Duty (LOD) investigations,
/// which determine whether a service member's injury, disease, or death occurred in the line of duty
/// and whether the member was at fault. This determination affects eligibility for medical care,
/// disability benefits, and other entitlements. The entity supports both formal and informal
/// investigations, multiple levels of review and approval, and comprehensive signature tracking
/// for all authorities involved in the adjudication process.
/// </remarks>
public partial class Form348
{
    /// <summary>
    /// Gets or sets the unique identifier for the LOD case.
    /// </summary>
    /// <remarks>
    /// This is the primary key and auto-incremented identity column.
    /// </remarks>
    public int LodId { get; set; }

    /// <summary>
    /// Gets or sets the human-readable case identifier.
    /// </summary>
    /// <remarks>
    /// Required field. Must be unique. Format typically includes component, year, and sequence number
    /// (e.g., "AR-2024-00123"). This is the primary reference number used in correspondence and reports.
    /// </remarks>
    public string CaseId { get; set; } = null!;

    /// <summary>
    /// Gets or sets the current workflow status of the case.
    /// </summary>
    /// <remarks>
    /// References the CoreWorkStatus entity. The status determines the current stage of processing,
    /// available actions, and next steps in the workflow.
    /// </remarks>
    public int Status { get; set; }

    /// <summary>
    /// Gets or sets the workflow definition identifier for this case.
    /// </summary>
    /// <remarks>
    /// References the CoreWorkflow entity. The workflow determines the sequence of statuses,
    /// required approvals, and routing rules for the case based on component and formality level.
    /// </remarks>
    public byte Workflow { get; set; }

    /// <summary>
    /// Gets or sets the full name of the service member who is the subject of the LOD investigation.
    /// </summary>
    /// <remarks>
    /// Required field. Typically formatted as "Last, First Middle" or "Last, First MI".
    /// </remarks>
    public string MemberName { get; set; } = null!;

    /// <summary>
    /// Gets or sets the Social Security Number of the service member.
    /// </summary>
    /// <remarks>
    /// Required field. Stored in encrypted or protected format. Used for positive identification
    /// and correlation with personnel and medical records.
    /// </remarks>
    public string MemberSsn { get; set; } = null!;

    /// <summary>
    /// Gets or sets the pay grade/rank of the service member.
    /// </summary>
    /// <remarks>
    /// References the CoreLkupGrade entity. Grade at the time of the incident being investigated.
    /// </remarks>
    public int MemberGrade { get; set; }

    /// <summary>
    /// Gets or sets the unit name/designation of the service member.
    /// </summary>
    /// <remarks>
    /// Required field. Free-text unit designation. Also linked via MemberUnitId to the
    /// command structure for routing and reporting purposes.
    /// </remarks>
    public string MemberUnit { get; set; } = null!;

    /// <summary>
    /// Gets or sets the command structure identifier for the service member's unit.
    /// </summary>
    /// <remarks>
    /// References the CommandStruct entity. Used for case routing, approval chains,
    /// and hierarchical reporting.
    /// </remarks>
    public int MemberUnitId { get; set; }

    /// <summary>
    /// Gets or sets the date of birth of the service member.
    /// </summary>
    /// <remarks>
    /// Used for positive identification and age-related regulatory requirements.
    /// </remarks>
    public DateTime? MemberDob { get; set; }

    /// <summary>
    /// Gets or sets the component (Active, Reserve, Guard) of the service member.
    /// </summary>
    /// <remarks>
    /// Required field. Different components have different workflows, approval authorities,
    /// and regulatory requirements for LOD determinations.
    /// </remarks>
    public string MemberCompo { get; set; } = null!;

    public int CreatedBy { get; set; }

    public DateTime CreatedDate { get; set; }

    public int ModifiedBy { get; set; }

    public DateTime ModifiedDate { get; set; }

    public int? DocGroupId { get; set; }

    public bool FormalInv { get; set; }

    public string? MedTechComments { get; set; }

    public int? AppAuthUserId { get; set; }

    public bool Deleted { get; set; }

    public byte? RwoaReason { get; set; }

    public string? RwoaExplantion { get; set; }

    public DateTime? RwoaDate { get; set; }

    public string? FinalDecision { get; set; }

    public string? BoardForGeneralYn { get; set; }

    public DateTime? SigDateUnitCommander { get; set; }

    public string? SigNameUnitCommander { get; set; }

    public DateTime? SigDateMedOfficer { get; set; }

    public string? SigNameMedOfficer { get; set; }

    public DateTime? SigDateLegal { get; set; }

    public string? SigNameLegal { get; set; }

    public DateTime? SigDateAppointing { get; set; }

    public string? SigNameAppointing { get; set; }

    public DateTime? SigDateBoardLegal { get; set; }

    public string? SigNameBoardLegal { get; set; }

    public DateTime? SigDateBoardMedical { get; set; }

    public string? SigNameBoardMedical { get; set; }

    public DateTime? SigDateBoardAdmin { get; set; }

    public string? SigNameBoardAdmin { get; set; }

    public DateTime? SigDateApproval { get; set; }

    public string? SigNameApproval { get; set; }

    public string? SigTitleApproval { get; set; }

    public DateTime? SigDateFormalApproval { get; set; }

    public string? SigNameFormalApproval { get; set; }

    public string? SigTitleFormalApproval { get; set; }

    public string? ToUnit { get; set; }

    public string? FromUnit { get; set; }

    public byte? FinalFindings { get; set; }

    public DateTime? IoCompletionDate { get; set; }

    public string? IoInstructions { get; set; }

    public string? IoPocInfo { get; set; }

    public bool Sarc { get; set; }

    public bool Restricted { get; set; }

    public string? IoSsn { get; set; }

    public int? IoUid { get; set; }

    public short AaPtype { get; set; }

    public string? ReturnComment { get; set; }

    public bool? MemberNotified { get; set; }

    public int? CompletedByUnit { get; set; }

    public string? SigTitleBoardAdmin { get; set; }

    public string? SigTitleBoardMedical { get; set; }

    public string? SigTitleBoardLegal { get; set; }

    public string? SigTitleAppointing { get; set; }

    public string? SigTitleLegal { get; set; }

    public string? SigTitleUnitCommander { get; set; }

    public string? SigTitleMedOfficer { get; set; }

    public int? ParentId { get; set; }

    public bool? IsAttachPas { get; set; }

    public int? MemberAttachedUnitId { get; set; }

    public int? ReturnToGroup { get; set; }

    public int? ReturnByGroup { get; set; }

    public string? BoardTechComments { get; set; }

    public string? SigNameMpf { get; set; }

    public DateTime? SigDateMpf { get; set; }

    public string? SigTitleMpf { get; set; }

    public bool? IsFormalCancelRecommended { get; set; }

    public byte? AppointingCancelReasonId { get; set; }

    public string? AppointingCancelExplanation { get; set; }

    public byte? ApprovingCancelReasonId { get; set; }

    public string? ApprovingCancelExplanation { get; set; }

    public string? SigNameLodPm { get; set; }

    public DateTime? SigDateLodPm { get; set; }

    public string? SigTitleLodPm { get; set; }

    public string? SigNameBoardA1 { get; set; }

    public DateTime? SigDateBoardA1 { get; set; }

    public string? SigTitleBoardA1 { get; set; }

    public bool? HasCredibleService { get; set; }

    public bool? WasMemberOnOrders { get; set; }

    public int? ApprovingAuthorityUserId { get; set; }

    public int? Tmn { get; set; }

    public int? Tms { get; set; }

    public string? AppointingUnit { get; set; }

    public DateTime? SigDateFormalLegal { get; set; }

    public string? SigNameFormalLegal { get; set; }

    public string? SigTitleFormalLegal { get; set; }

    public DateTime? SigDateFormalAppointing { get; set; }

    public string? SigNameFormalAppointing { get; set; }

    public string? SigTitleFormalAppointing { get; set; }

    public DateTime? SigDateFormalBoardMedical { get; set; }

    public string? SigNameFormalBoardMedical { get; set; }

    public string? SigTitleFormalBoardMedical { get; set; }

    public DateTime? SigDateFormalBoardLegal { get; set; }

    public string? SigNameFormalBoardLegal { get; set; }

    public string? SigTitleFormalBoardLegal { get; set; }

    public DateTime? SigDateFormalBoardAdmin { get; set; }

    public string? SigNameFormalBoardAdmin { get; set; }

    public string? SigTitleFormalBoardAdmin { get; set; }

    public DateTime? SigDateFormalBoardA1 { get; set; }

    public string? SigNameFormalBoardA1 { get; set; }

    public string? SigTitleFormalBoardA1 { get; set; }

    public bool? RwoaDirectReply { get; set; }

    public int? WingccNilodByreasonof { get; set; }

    public bool IsPostProcessingComplete { get; set; }

    public string? LodPm { get; set; }

    public virtual CoreLkupPersonnelType AaPtypeNavigation { get; set; } = null!;

    public virtual CoreUser? AppAuthUser { get; set; }

    public virtual CoreLkupCancelReason? AppointingCancelReason { get; set; }

    public virtual CoreLkupCancelReason? ApprovingCancelReason { get; set; }

    public virtual CoreUser CreatedByNavigation { get; set; } = null!;

    public virtual ICollection<Form348Finding> Form348Findings { get; set; } = new List<Form348Finding>();

    public virtual Form348PostProcessing? Form348PostProcessing { get; set; }

    public virtual ICollection<Form348PostProcessingAppeal> Form348PostProcessingAppeals { get; set; } = new List<Form348PostProcessingAppeal>();

    public virtual ICollection<Form348Sc> Form348Scs { get; set; } = new List<Form348Sc>();

    public virtual Form348Unit? Form348Unit { get; set; }

    public virtual CoreLkupGrade MemberGradeNavigation { get; set; } = null!;

    public virtual CoreUser ModifiedByNavigation { get; set; } = null!;

    public virtual CoreLkupRwoareason? RwoaReasonNavigation { get; set; }

    public virtual CoreWorkStatus StatusNavigation { get; set; } = null!;

    public virtual CoreLkUpFindingByReasonOf? WingccNilodByreasonofNavigation { get; set; }

    public virtual CoreWorkflow WorkflowNavigation { get; set; } = null!;
}
