@page "/cases"
@using AF.ECT.Shared
@using AF.ECT.Client.Services
@using Blazored.LocalStorage
@inject IWorkflowClient WorkflowClient
@inject ILocalStorageService LocalStorage

<PageTitle>Cases</PageTitle>

<h3>Cases</h3>

@if (cases == null)
{
    <p>Loading cases...</p>
}
else if (!cases.Any())
{
    <p>No cases available (check connection).</p>
}
else
{
    <ul>
        @foreach (var caseItem in cases)
        {
            <li>@caseItem.CaseId - @caseItem.Status</li>
        }
    </ul>
}

@code {
    private const string CaseCacheKey = "cachedCases";
    private const int DefaultRefId = 0; // TODO: Replace with actual reference ID from user context when available.
    private const int DefaultGroupId = 0; // TODO: Replace with actual group ID from user context when available.
    private List<ActiveCaseItem>? cases;

    protected override async Task OnInitializedAsync()
    {
        // Try to load from cache first (for offline)
        cases = await LocalStorage.GetItemAsync<List<ActiveCaseItem>>(CaseCacheKey);
        var cachedResultAvailable = cases?.Any() == true;

        // Always try to fetch fresh data and cache it
        try
        {
            var response = await WorkflowClient.GetActiveCasesAsync(DefaultRefId, DefaultGroupId);
            cases = response.Items.ToList();
            await LocalStorage.SetItemAsync(CaseCacheKey, cases);
        }
        catch
        {
            // Offline or error - use cached data if available
            if (!cachedResultAvailable)
            {
                cases ??= new List<ActiveCaseItem>();
            }
        }
    }
}